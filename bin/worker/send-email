#!/usr/bin/perl
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by 
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License. 
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.

use v5.10;
use strict;
BEGIN {
    require "$ENV{LJHOME}/cgi-bin/ljlib.pl";
}

use Carp qw/ croak /;
use LJ::Worker::TheSchwartz;

schwartz_decl('TheSchwartz::Worker::SendEmail');
schwartz_on_idle(sub {
    $0 = "send-email [idle, $TheSchwartz::Worker::SendEmail::_COUNT, $TheSchwartz::Worker::SendEmail::_BAD]";
});
schwartz_work();

# ============================================================================
package TheSchwartz::Worker::SendEmail;
use base 'TheSchwartz::Worker';
use Carp qw/ croak /;

our $_COUNT = 0;
our $_BAD = 0;

sub work {
    my ( $class, $job ) = @_;
    my $args = $job->arg;

    # Convert TheSchwartz job to DW::Task::SendEmail task
    my $task = DW::Task::SendEmail->new($args);
    
    # Enqueue the task for processing by the task queue system
    my $result = DW::TaskQueue->dispatch($task);
    
    if ($result) {
        # Task was successfully enqueued, mark job as completed
        $job->completed;
        $_COUNT++;
        DW::Stats::increment( 'dw.email.sent', 1, [ "status:enqueued", "via:direct" ] );
    } else {
        # Failed to enqueue task, retry the job
        $job->failed("Failed to enqueue email task, will retry");
    }
}

sub keep_exit_status_for { 0 }
sub grab_for { 500 }
sub max_retries { 5 * 24 }  # 5 days * 24 hours
sub retry_delay {
    my ($class, $fails) = @_;
    return ((5*60, 5*60, 15*60, 30*60)[$fails] || 3600);
}
