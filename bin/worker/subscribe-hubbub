#!/usr/bin/perl
#
# subscribe-hubbub
#
# This worker maintains the subscription list for feeds that support hubbub.
# I.e., we kick off subscriptions, we watch for leases that are about to expire,
# and any sort of maintenance that needs to happen for hubbub subscriptions.
#
# Authors:
#      Mark Smith <mark@dreamwidth.org>
#
# Copyright (c) 2009 by Dreamwidth Studios, LLC.
#
# This program is free software; you may redistribute it and/or modify it under
# the same terms as Perl itself.  For a copy of the license, please reference
# 'perldoc perlartistic' or 'perldoc perlgpl'.
#

use lib "$ENV{LJHOME}/cgi-bin";
BEGIN {
    require 'ljlib.pl';
}

use Getopt::Long;
use LWPx::ParanoidAgent;

# verbose currently ignored; we're always chatty
my ( $once, $help, $verbose );
GetOptions(
    'once' => \$once,
    'help' => \$help,
    'verbose' => \$verbose,
) or usage();
usage() if $help;


# main loop; simply works until something terrible happens or we get killed
while ( 1 ) {
    print "[$$] Main loop beginning.\n";

    eval { work(); };
    warn $@ if $@;

    last if $once;
    sleep 60;
}


sub work {
    # clear caches, new dbs, etc
    LJ::start_request();
    my $dbh = LJ::get_db_writer()
        or die "unable to get db handle\n";

    my $ua = LWPx::ParanoidAgent->new( timeout => 2, max_size => 1024 )
        or die "failed to create useragent\n";

    # find tasks that need doing that are owned by users that are visible
    my $rows = $dbh->selectall_arrayref(
        q{SELECT s.id, s.userid, s.huburl, s.topicurl, s.verifytoken, s.leasegoodto
          FROM user u, syndicated_hubbub2 s
          WHERE u.userid = s.userid AND u.statusvis = 'V'
            AND (s.leasegoodto IS NULL OR s.leasegoodto < (UNIX_TIMESTAMP() + 1800))
          LIMIT 500}
    ) || [];
    die $dbh->errstr if $dbh->err;

    # iterate over tasks
    foreach my $row ( @$rows ) {
        my ( $id, $userid, $huburl, $topicurl, $verifytoken, $leasegoodto ) = @$row;
        my $u = LJ::load_userid( $userid ) or next;

        print "[$$] Subscribing to " . $u->user . "(" . $u->id . ")\n";
        print "         topicurl = $topicurl\n";
        print "         huburl = $huburl\n";

        my $res = $ua->post( $huburl, {
            'hub.callback'      => "$LJ::SITEROOT/misc/hubbub",
            'hub.mode'          => 'subscribe',
            'hub.topic'         => $topicurl,
            'hub.verify'        => 'async',
            'hub.lease_seconds' => 86400 * 30,  # 30 days.  we assume we care for a while.
#            'hub.secret' FIXME: implement, this is part of PSHB 0.2
            'hub.verify_token'  => $verifytoken,
        } );

        # no matter what happens, bump the lease time artificially so
        # we won't retry every time this loop runs.  if the hub verifies
        # our subscription, the lease time will be set properly.
        $dbh->do( 'UPDATE syndicated_hubbub2 SET leasegoodto = UNIX_TIMESTAMP() + ? WHERE id = ?',
                  undef, int( rand() * 3600 ) + 3600, $id );  # 1-2 hours random

        # be verbose
        print "             == " . $res->code . " " . $res->message . "\n";
    }

    # now the other half of life: removing stale subscriptions.  we keep track of every
    # time we see a feed reference a (userid, huburl, topicurl) combination.  if one of those
    # stops getting referenced for some period of time (24 hours?) then we should consider
    # that subscription to be invalid.  (and in fact, we should unsubscribe.)
    # FIXME: implement this ;)
}


sub usage {
    die <<EOF;
$0 - manages PubSubHubbub subscriptions

    --once      Only run once; useful if you're using this worker in cron.
    --help      See this help/usage document.

In general, this worker should be scheduled by worker-manager (see etc/workers.conf)
and then it will just constantly ensure your site is subscribed to receive hubbub
pings in an expedient manner.

Configuring the rest of the hubbub system is detailed elsewhere (wiki probably).
EOF
}
