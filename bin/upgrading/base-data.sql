# This file is automatically generated from MySQL by $LJHOME/bin/dumpsql.pl
# Don't submit a diff against a hand-modified file - dump and diff instead.

REPLACE INTO codes (code, item, sortorder, type) VALUES ('#000000', 'Black', '210', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#0000FF', 'Blue, Bright', '150', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#00025C', 'Blue, Midnight', '140', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#002400', 'Green, Pine', '85', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#00EEC4', 'Green, Mint', '110', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#00FF00', 'Green, Bright', '100', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#00FFFF', 'Blue, Sky', '130', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#01059D', 'Blue, Navy', '145', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#015B01', 'Green, Dark', '90', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#019501', 'Green', '95', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#019997', 'Blue, Ocean', '125', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#066D98', 'Blue, Steel', '120', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#330000', ' Brown, Dark', '30', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#520155', 'Purple, Wine', '185', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#5B0101', 'Red, Darkest', '5', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#6569FF', 'Blue, Medium', '155', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#676767', 'Gray, Dark', '215', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#696A0A', 'Olive', '65', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#88FEE9', 'Green, Aqua', '115', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#8E01D7', 'Violet, Dark', '170', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#993300', ' Brown', '35', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#9E0000', 'Red, Dark', '10', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#A501A7', 'Purple', '190', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#ADB1FF', 'Blue, Light', '160', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#B0B200', 'Yellow, Dark', '70', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#B3FFB3', 'Green, Light', '105', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#BBFFFE', 'Blue, Light Sky', '135', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#BC5D00', 'Orange, Brown', '45', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#C0C0C0', 'Gray, Light', '220', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#CA65FF', 'Violet', '175', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#CC9966', ' Brown, Tan', '40', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#E3E5FF', 'Blue, Powder', '165', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#EFCFFF', 'Violet, Light', '180', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#F999FF', 'Purple, Pink', '200', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#FCDDFF', 'Pink, Ice', '205', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#FEFFBB', 'Yellow, Light', '80', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#FF0000', 'Red', '15', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#FF00FF', 'Purple, Fuchsia', '195', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#FF6600', 'Orange, Bright', '50', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#FF8B8B', 'Red, Light', '20', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#FFB22B', 'Orange', '55', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#FFCBCB', 'Red, Pink', '25', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#FFE2A3', 'Orange, Light', '60', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#FFFF00', 'Yellow', '75', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('#FFFFFF', 'White', '225', 'color');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('0', 'None', '0', 'encname');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('0', 'none', '0', 'encoding');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('01', 'Агинский Бурятский автономный округ', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('02', 'Адыгея Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('03', 'Алтай Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('04', 'Алтайский край', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('05', 'Амурская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('06', 'Архангельская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('07', 'Астраханская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('08', 'Башкортостан Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('09', 'Белгородская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('1', 'Western European (Windows)', '0', 'encname');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('1', 'windows-1252', '0', 'encoding');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('10', 'Western European (ISO)', '0', 'encname');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('10', 'iso-8859-1', '0', 'encoding');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('10', 'Брянская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('11', 'CP949', '0', 'encoding');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('11', 'Korean (Windows)', '0', 'encname');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('11', 'Бурятия Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('12', 'Chinese (Simplified)', '0', 'encname');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('12', 'GB2312', '0', 'encoding');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('12', 'Владимирская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('13', 'Волгоградская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('14', 'Вологодская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('15', 'Воронежская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('16', 'Дагестан Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('17', 'Еврейская автономная область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('18', 'Ивановская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('19', 'Ингушская Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('2', 'UTF-8', '0', 'encoding');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('2', 'Unicode (UTF-8)', '0', 'encname');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('20', 'Иркутская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('21', 'Кабардино-Балкарская Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('22', 'Калининградская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('23', 'Калмыкия Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('24', 'Калужская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('25', 'Камчатский край', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('26', 'Карачаево-Черкесская Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('27', 'Карелия Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('28', 'Кемеровская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('29', 'Кировская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('3', 'Cyrillic (Windows)', '0', 'encname');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('3', 'windows-1251', '0', 'encoding');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('30', 'Коми Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('31', 'Костромская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('32', 'Краснодарский край', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('33', 'Красноярский край', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('34', 'Курганская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('35', 'Курская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('36', 'Ленинградская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('37', 'Липецкая область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('38', 'Магаданская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('39', 'Марий Эл Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('4', 'Hebrew (ISO)', '0', 'encname');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('4', 'hebrew', '0', 'encoding');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('40', 'Мордовия Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('41', 'Москва', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('42', 'Московская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('43', 'Мурманская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('44', 'Ненецкий автономный округ', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('45', 'Нижегородская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('46', 'Новгородская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('47', 'Новосибирская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('48', 'Омская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('49', 'Оренбургская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('5', 'Greek', '0', 'encname');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('5', 'windows-1253', '0', 'encoding');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('50', 'Орловская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('51', 'Пензенская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('52', 'Пермский край', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('53', 'Приморский край', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('54', 'Псковская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('55', 'Ростовская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('56', 'Рязанская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('57', 'Самарская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('58', 'Санкт-Петербург', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('59', 'Саратовская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('6', 'Cyrillic (KOI8)', '0', 'encname');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('6', 'KOI8-R', '0', 'encoding');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('60', 'Саха (Якутия) Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('61', 'Сахалинская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('62', 'Свердловская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('63', 'Северная Осетия - Алания Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('64', 'Смоленская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('65', 'Ставропольский край', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('66', 'Тамбовская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('67', 'Татарстан Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('68', 'Тверская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('69', 'Томская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('7', 'Japanese (SHIFT-JIS)', '0', 'encname');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('7', 'sjis', '0', 'encoding');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('70', 'Тульская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('71', 'Тыва Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('72', 'Тюменская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('73', 'Удмуртская Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('74', 'Ульяновская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('75', 'Усть-Ордынский Бурятский автономный округ', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('76', 'Хабаровский край', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('77', 'Хакасия Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('78', 'Ханты-Мансийский автономный округ - Югра', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('79', 'Челябинская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('8', 'Japanese (EUC)', '0', 'encname');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('8', 'euc-jp', '0', 'encoding');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('80', 'Чеченская Республика', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('81', 'Читинская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('82', 'Чувашская Республика - Чувашия', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('83', 'Чукотский автономный округ', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('84', 'Ямало-Ненецкий автономный округ', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('85', 'Ярославская область', '0', 'stateru');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('9', 'BIG5', '0', 'encoding');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('9', 'Chinese Traditional (Big5)', '0', 'encname');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AA', 'Armed Forces Americas', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AD', 'Andorra', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AE', 'Armed Forces Other (AE)', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AE', 'United Arab Emirates', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AF', 'Afghanistan', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AG', 'Antigua and Barbuda', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AI', 'Anguilla', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AK', 'Alaska', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AL', 'Alabama', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AL', 'Albania', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AM', 'Armenia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AN', 'Netherlands Antilles', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AO', 'Angola', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AP', 'Armed Forces Pacific', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AQ', 'Antarctica', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AR', 'Argentina', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AR', 'Arkansas', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AS', 'American Samoa', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AS', 'American Samoa', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AT', 'Austria', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AU', 'Australia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AW', 'Aruba', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AZ', 'Arizona', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('AZ', 'Azerbaijan', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BA', 'Bosnia and Herzegovina', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BB', 'Barbados', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BD', 'Bangladesh', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BE', 'Belgium', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BF', 'Burkina Faso', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BG', 'Bulgaria', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BH', 'Bahrain', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BI', 'Burundi', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BJ', 'Benin', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BM', 'Bermuda', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BN', 'Brunei Darussalam', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BO', 'Bolivia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BR', 'Brazil', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BS', 'Bahamas', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BT', 'Bhutan', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BV', 'Bouvet Island', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BW', 'Botswana', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BY', 'Belarus', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('BZ', 'Belize', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CA', 'California', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CA', 'Canada', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CC', 'Cocos (Keeling) Islands', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CF', 'Central African Republic', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CG', 'Congo', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CH', 'Switzerland', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CI', 'Cote D\'Ivoire (Ivory Coast)', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CK', 'Cook Islands', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CL', 'Chile', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CM', 'Cameroon', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CN', 'China', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CO', 'Colombia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CO', 'Colorado', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CR', 'Costa Rica', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CS', 'Czechoslovakia (former)', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CT', 'Connecticut', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CU', 'Cuba', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CV', 'Cape Verde', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CX', 'Christmas Island', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CY', 'Cyprus', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('CZ', 'Czech Republic', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('DC', 'Dist. of Columbia', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('DE', 'Delaware', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('DE', 'Deutsch', '1', 'lang');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('DE', 'Germany', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('DJ', 'Djibouti', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('DK', 'Denmark', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('DM', 'Dominica', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('DO', 'Dominican Republic', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('DZ', 'Algeria', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('EC', 'Ecuador', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('EE', 'Estonia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('EG', 'Egypt', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('EH', 'Western Sahara', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('EN', 'English', '1', 'lang');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ER', 'Eritrea', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ES', 'Espanol', '1', 'lang');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ES', 'Spain', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ET', 'Ethiopia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('FI', 'Finland', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('FJ', 'Fiji', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('FK', 'Falkland Islands (Malvinas)', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('FL', 'Florida', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('FM', 'Federated States of Micronesia', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('FM', 'Micronesia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('FO', 'Faroe Islands', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('FR', 'Francais', '1', 'lang');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('FR', 'France', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('FX', 'France, Metropolitan', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GA', 'Gabon', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GA', 'Georgia', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GD', 'Grenada', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GE', 'Georgia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GF', 'French Guiana', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GH', 'Ghana', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GI', 'Gibraltar', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GL', 'Greenland', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GM', 'Gambia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GN', 'Guinea', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GP', 'Guadeloupe', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GQ', 'Equatorial Guinea', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GR', 'Greece', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GS', 'S. Georgia and S. Sandwich Isls.', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GT', 'Guatemala', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GU', 'Guam', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GU', 'Guam', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GW', 'Guinea-Bissau', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('GY', 'Guyana', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('HI', 'Hawaii', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('HK', 'Hong Kong', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('HM', 'Heard and McDonald Islands', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('HN', 'Honduras', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('HR', 'Croatia (Hrvatska)', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('HT', 'Haiti', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('HU', 'Hungary', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('IA', 'Iowa', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ID', 'Idaho', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ID', 'Indonesia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('IE', 'Ireland', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('IL', 'Illinois', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('IL', 'Israel', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('IN', 'India', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('IN', 'Indiana', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('IO', 'British Indian Ocean Territory', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('IQ', 'Iraq', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('IR', 'Iran', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('IS', 'Iceland', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('IT', 'Italy', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('JM', 'Jamaica', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('JO', 'Jordan', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('JP', 'Japan', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('KE', 'Kenya', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('KG', 'Kyrgyzstan', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('KH', 'Cambodia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('KI', 'Kiribati', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('KM', 'Comoros', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('KN', 'Saint Kitts and Nevis', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('KP', 'Korea (North)', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('KR', 'Korea (South)', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('KS', 'Kansas', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('KW', 'Kuwait', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('KY', 'Cayman Islands', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('KY', 'Kentucky', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('KZ', 'Kazakhstan', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('LA', 'Laos', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('LA', 'Louisiana', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('LB', 'Lebanon', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('LC', 'Saint Lucia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('LI', 'Liechtenstein', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('LJSC', 'Scotland', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('LK', 'Sri Lanka', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('LR', 'Liberia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('LS', 'Lesotho', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('LT', 'Lithuania', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('LU', 'Luxembourg', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('LV', 'Latvia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('LY', 'Libya', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MA', 'Massachusetts', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MA', 'Morocco', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MC', 'Monaco', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MD', 'Maryland', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MD', 'Moldova', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ME', 'Maine', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MG', 'Madagascar', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MH', 'Marshall Islands', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MH', 'Marshall Islands', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MI', 'Michigan', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MK', 'Macedonia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ML', 'Mali', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MM', 'Myanmar', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MN', 'Minnesota', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MN', 'Mongolia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MO', 'Macau', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MO', 'Missouri', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MP', 'Northern Mariana Islands', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MP', 'Northern Mariana Islands', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MQ', 'Martinique', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MR', 'Mauritania', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MS', 'Mississippi', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MS', 'Montserrat', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MT', 'Malta', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MT', 'Montana', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MU', 'Mauritius', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MV', 'Maldives', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MW', 'Malawi', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MX', 'Mexico', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MY', 'Malaysia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('MZ', 'Mozambique', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NA', 'Namibia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NC', 'New Caledonia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NC', 'North Carolina', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ND', 'North Dakota', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NE', 'Nebraska', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NE', 'Niger', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NF', 'Norfolk Island', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NG', 'Nigeria', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NH', 'New Hampshire', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NI', 'Nicaragua', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NJ', 'New Jersey', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NL', 'Netherlands', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NM', 'New Mexico', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NO', 'Norway', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NP', 'Nepal', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NR', 'Nauru', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NT', 'Neutral Zone', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NU', 'Niue', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NV', 'Nevada', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NY', 'New York', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('NZ', 'New Zealand (Aotearoa)', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('OH', 'Ohio', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('OK', 'Oklahoma', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('OM', 'Oman', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('OR', 'Oregon', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('PA', 'Panama', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('PA', 'Pennsylvania', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('PE', 'Peru', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('PF', 'French Polynesia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('PG', 'Papua New Guinea', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('PH', 'Philippines', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('PK', 'Pakistan', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('PL', 'Poland', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('PM', 'St. Pierre and Miquelon', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('PN', 'Pitcairn', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('PR', 'Puerto Rico', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('PR', 'Puerto Rico', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('PS', 'Palestine', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('PT', 'Portugal', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('PW', 'Palau', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('PY', 'Paraguay', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('QA', 'Qatar', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('RE', 'Reunion', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('RI', 'Rhode Island', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('RO', 'Romania', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('RU', 'Russian Federation', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('RU', 'Russian', '1', 'lang');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('RW', 'Rwanda', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SA', 'Saudi Arabia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SB', 'Solomon Islands', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SC', 'Seychelles', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SC', 'South Carolina', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SD', 'South Dakota', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SD', 'Sudan', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SE', 'Sweden', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SG', 'Singapore', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SH', 'St. Helena', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SI', 'Slovenia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SJ', 'Svalbard and Jan Mayen Islands', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SK', 'Slovak Republic', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SL', 'Sierra Leone', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SM', 'San Marino', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SN', 'Senegal', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SO', 'Somalia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SR', 'Suriname', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ST', 'Sao Tome and Principe', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SU', 'USSR (former)', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SV', 'El Salvador', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SY', 'Syria', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('SZ', 'Swaziland', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TC', 'Turks and Caicos Islands', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TD', 'Chad', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TF', 'French Southern Territories', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TG', 'Togo', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TH', 'Thailand', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TJ', 'Tajikistan', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TK', 'Tokelau', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TM', 'Turkmenistan', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TN', 'Tennessee', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TN', 'Tunisia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TO', 'Tonga', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TP', 'East Timor', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TR', 'Turkey', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TT', 'Trinidad and Tobago', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TV', 'Tuvalu', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TW', 'Taiwan', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TX', 'Texas', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('TZ', 'Tanzania', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('UA', 'Ukraine', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('UG', 'Uganda', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('UK', 'United Kingdom', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('UM', 'US Minor Outlying Islands', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('US', 'United States', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('UT', 'Utah', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('UY', 'Uruguay', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('UZ', 'Uzbekistan', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('VA', 'Vatican City State (Holy See)', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('VA', 'Virginia', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('VC', 'Saint Vincent and the Grenadines', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('VE', 'Venezuela', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('VG', 'Virgin Islands (British)', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('VI', 'Virgin Islands (U.S.)', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('VI', 'Virgin Islands', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('VN', 'Viet Nam', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('VT', 'Vermont', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('VU', 'Vanuatu', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('WA', 'Washington', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('WF', 'Wallis and Futuna Islands', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('WI', 'Wisconsin', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('WS', 'Samoa', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('WV', 'West Virginia', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('WY', 'Wyoming', '0', 'state');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('YE', 'Yemen', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('YT', 'Mayotte', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('YU', 'Yugoslavia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ZA', 'South Africa', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ZM', 'Zambia', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ZR', 'Zaire', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ZW', 'Zimbabwe', '0', 'country');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('act', 'Australian Capital Territory', '0', 'stateau');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('al', 'Alberta', '0', 'stateca');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('bc', 'British Columbia', '0', 'stateca');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('be', 'Berlin', '0', 'statede');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('bm', 'Bremen', '0', 'statede');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('br', 'Brandenburg', '0', 'statede');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('bw', 'Baden-Wuerttemberg', '0', 'statede');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('by', 'Bayern', '0', 'statede');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ha', 'Hamburg', '0', 'statede');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('hs', 'Hessen', '0', 'statede');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ma', 'Manitoba', '0', 'stateca');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('mv', 'Mecklenburg-Vorpommern', '0', 'statede');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('nb', 'New Brunswick', '0', 'stateca');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('nf', 'Newfoundland', '0', 'stateca');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ni', 'Niedersachsen', '0', 'statede');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ns', 'Nova Scotia', '0', 'stateca');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('nsw', 'New South Wales', '0', 'stateau');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('nt', 'Northern Territory', '0', 'stateau');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('nu', 'Nunavut', '0', 'stateca');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('nw', 'Nordrhein-Westfalen', '0', 'statede');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('nw', 'Northwest Territories', '0', 'stateca');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('on', 'Ontario', '0', 'stateca');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('pe', 'Prince Edward Island', '0', 'stateca');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ql', 'Queensland', '0', 'stateau');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('qu', 'Quebec', '0', 'stateca');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('rp', 'Rheinland-Pfalz', '0', 'statede');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('sa', 'Sachsen-Anhalt', '0', 'statede');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('sa', 'Saskatchewan', '0', 'stateca');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('sa', 'South Australia', '0', 'stateau');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('sc', 'Sachsen', '0', 'statede');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('sh', 'Schleswig-Holstein', '0', 'statede');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('sl', 'Saarland', '0', 'statede');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('ta', 'Tasmania', '0', 'stateau');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('th', 'Thueringen', '0', 'statede');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('vi', 'Victoria', '0', 'stateau');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('wa', 'Western Australia', '0', 'stateau');
REPLACE INTO codes (code, item, sortorder, type) VALUES ('yt', 'Yukon Territory', '0', 'stateca');
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to grant or revoke privileges to/from other users. arg=Unique privcode that the user has access to grant/deny for, or \"*\" for all privileges.', '0', 'admin', 'Administer privileges', 'general');
UPDATE priv_list SET des='Allows a user to grant or revoke privileges to/from other users. arg=Unique privcode that the user has access to grant/deny for, or \"*\" for all privileges.',is_public='0',privname='Administer privileges',scope='general' WHERE privcode='admin';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to set an IP address as being allowed if it\'s listed as an open proxy.', '0', 'allowopenproxy', 'Allow Open Proxy', 'general');
UPDATE priv_list SET des='Allows a user to set an IP address as being allowed if it\'s listed as an open proxy.',is_public='0',privname='Allow Open Proxy',scope='general' WHERE privcode='allowopenproxy';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to view information that isn\'t otherwise available.  All use is logged.  arg=Arg=\"*\": can view everything, Arg=\"suspended\": can view public posts in a suspended journal, Arg=\"userlog\": can see userlog data.', '0', 'canview', 'View All Entries', 'general');
UPDATE priv_list SET des='Allows a user to view information that isn\'t otherwise available.  All use is logged.  arg=Arg=\"*\": can view everything, Arg=\"suspended\": can view public posts in a suspended journal, Arg=\"userlog\": can see userlog data.',is_public='0',privname='View All Entries',scope='general' WHERE privcode='canview';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to change another user\'s journal type.', '1', 'changejournaltype', 'Change Journal Type', 'general');
UPDATE priv_list SET des='Allows a user to change another user\'s journal type.',is_public='1',privname='Change Journal Type',scope='general' WHERE privcode='changejournaltype';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to change the maintainer of a community.', '1', 'communityxfer', 'Community Maintainer Transfer', 'general');
UPDATE priv_list SET des='Allows a user to change the maintainer of a community.',is_public='1',privname='Community Maintainer Transfer',scope='general' WHERE privcode='communityxfer';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to delete comments or entries from other journals. Only used in rare cases.', '', 'deletetalk', 'Delete Comments or Entries', 'general');
UPDATE priv_list SET des='Allows a user to delete comments or entries from other journals. Only used in rare cases.',is_public='',privname='Delete Comments or Entries',scope='general' WHERE privcode='deletetalk';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to add documents to the Frequently Asked Questions. arg=Unique faq category code that the privilege is applicable for, or \"*\" for all faq categories.', '1', 'faqadd', 'FAQ - Add', 'general');
UPDATE priv_list SET des='Allows a user to add documents to the Frequently Asked Questions. arg=Unique faq category code that the privilege is applicable for, or \"*\" for all faq categories.',is_public='1',privname='FAQ - Add',scope='general' WHERE privcode='faqadd';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to modify FAQ categories.', '1', 'faqcat', 'FAQ - Edit Categories', 'general');
UPDATE priv_list SET des='Allows a user to modify FAQ categories.',is_public='1',privname='FAQ - Edit Categories',scope='general' WHERE privcode='faqcat';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to edit documents in the Frequently Asked Questions. arg=Unique FAQ category code that the privilege is applicable for, or \"*\" for all faq categories', '1', 'faqedit', 'FAQ - Edit', 'general');
UPDATE priv_list SET des='Allows a user to edit documents in the Frequently Asked Questions. arg=Unique FAQ category code that the privilege is applicable for, or \"*\" for all faq categories',is_public='1',privname='FAQ - Edit',scope='general' WHERE privcode='faqedit';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to edit a static file in the main site\'s document include tree. arg=Unique file identifier, or \"*\" for all files', '1', 'fileedit', 'File Editing', 'general');
UPDATE priv_list SET des='Allows a user to edit a static file in the main site\'s document include tree. arg=Unique file identifier, or \"*\" for all files',is_public='1',privname='File Editing',scope='general' WHERE privcode='fileedit';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to find other users by different criteria. arg=Optional \"codetrace\", which allows the user to see someone\'s use of account codes.', '1', 'finduser', 'Find a user', 'general');
UPDATE priv_list SET des='Allows a user to find other users by different criteria. arg=Optional \"codetrace\", which allows the user to see someone\'s use of account codes.',is_public='1',privname='Find a user',scope='general' WHERE privcode='finduser';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to view data in the \"statushistory\" table for all users.  arg=Type of \"statushistory\" entries user can see, or no argument to see everything.', '1', 'historyview', 'View statushistory info', 'general');
UPDATE priv_list SET des='Allows a user to view data in the \"statushistory\" table for all users.  arg=Type of \"statushistory\" entries user can see, or no argument to see everything.',is_public='1',privname='View statushistory info',scope='general' WHERE privcode='historyview';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to edit mood themes and make themes public.', '1', 'moodthememanager', 'Mood Themes - Manager', 'general');
UPDATE priv_list SET des='Allows a user to edit mood themes and make themes public.',is_public='1',privname='Mood Themes - Manager',scope='general' WHERE privcode='moodthememanager';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allow viewing of payment data, setting of account type, etc.', '0', 'payments', 'Administer Payments', 'general');
UPDATE priv_list SET des='Allow viewing of payment data, setting of account type, etc.',is_public='0',privname='Administer Payments',scope='general' WHERE privcode='payments';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to delete all email addresses from an account.', '1', 'reset_email', 'Reset User Email Address', 'general');
UPDATE priv_list SET des='Allows a user to delete all email addresses from an account.',is_public='1',privname='Reset User Email Address',scope='general' WHERE privcode='reset_email';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to reset the password to an account', '1', 'reset_password', 'Reset User Password', 'general');
UPDATE priv_list SET des='Allows a user to reset the password to an account',is_public='1',privname='Reset User Password',scope='general' WHERE privcode='reset_password';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to edit the database schema documentation.', '1', 'schemadoc', 'Edit Schema Documentation', 'general');
UPDATE priv_list SET des='Allows a user to edit the database schema documentation.',is_public='1',privname='Edit Schema Documentation',scope='general' WHERE privcode='schemadoc';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to view/adjust certain critical site settings. arg=Unique keyword that user has access to view', '1', 'siteadmin', 'Administer Site', 'general');
UPDATE priv_list SET des='Allows a user to view/adjust certain critical site settings. arg=Unique keyword that user has access to view',is_public='1',privname='Administer Site',scope='general' WHERE privcode='siteadmin';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to change the summary on support requests. arg=Unique support category', '1', 'supportchangesummary', 'Support - Change Summaries', 'general');
UPDATE priv_list SET des='Allows a user to change the summary on support requests. arg=Unique support category',is_public='1',privname='Support - Change Summaries',scope='general' WHERE privcode='supportchangesummary';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to close old support requests that other users haven\'t closed themselves. arg=Unique support category that the user has permission to close in.', '1', 'supportclose', 'Support - Close Requests', 'general');
UPDATE priv_list SET des='Allows a user to close old support requests that other users haven\'t closed themselves. arg=Unique support category that the user has permission to close in.',is_public='1',privname='Support - Close Requests',scope='general' WHERE privcode='supportclose';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to approve screened responses, change request summaries and answer and comment unscreened. arg=Unique Support Category', '1', 'supporthelp', 'Support - Manage Requests', 'general');
UPDATE priv_list SET des='Allows a user to approve screened responses, change request summaries and answer and comment unscreened. arg=Unique Support Category',is_public='1',privname='Support - Manage Requests',scope='general' WHERE privcode='supporthelp';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to make internal comments on support requests. arg=Unique support category', '1', 'supportmakeinternal', 'Support - Make Internal Comments', 'general');
UPDATE priv_list SET des='Allows a user to make internal comments on support requests. arg=Unique support category',is_public='1',privname='Support - Make Internal Comments',scope='general' WHERE privcode='supportmakeinternal';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to move support requests to different categories and to mark requests as still needing help. The supportmakeinternal privilege is required. arg=Unique support category', '1', 'supportmovetouch', 'Support - Move and Touch Requests', 'general');
UPDATE priv_list SET des='Allows a user to move support requests to different categories and to mark requests as still needing help. The supportmakeinternal privilege is required. arg=Unique support category',is_public='1',privname='Support - Move and Touch Requests',scope='general' WHERE privcode='supportmovetouch';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to read support requests in private categories. arg=Unique support category', '1', 'supportread', 'Support - Read Requests', 'general');
UPDATE priv_list SET des='Allows a user to read support requests in private categories. arg=Unique support category',is_public='1',privname='Support - Read Requests',scope='general' WHERE privcode='supportread';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to view internal comments on support requests. arg=Unique support category', '1', 'supportviewinternal', 'Support - View Internal Comments', 'general');
UPDATE priv_list SET des='Allows a user to view internal comments on support requests. arg=Unique support category',is_public='1',privname='Support - View Internal Comments',scope='general' WHERE privcode='supportviewinternal';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to read screened responses on support requests. arg=Unique support category', '1', 'supportviewscreened', 'Support - See Screened Responses', 'general');
UPDATE priv_list SET des='Allows a user to read screened responses on support requests. arg=Unique support category',is_public='1',privname='Support - See Screened Responses',scope='general' WHERE privcode='supportviewscreened';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to make use of the stock answers in a support category. arg=Unique support category', '1', 'supportviewstocks', 'View stock answers', 'general');
UPDATE priv_list SET des='Allows a user to make use of the stock answers in a support category. arg=Unique support category',is_public='1',privname='View stock answers',scope='general' WHERE privcode='supportviewstocks';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to suspend or unsuspend user accounts. Used by the Abuse Team.', '0', 'suspend', 'Suspend accounts', 'general');
UPDATE priv_list SET des='Allows a user to suspend or unsuspend user accounts. Used by the Abuse Team.',is_public='0',privname='Suspend accounts',scope='general' WHERE privcode='suspend';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows editing settings of syndicated journal that shouldn\'t be editable by users.', '0', 'syn_edit', 'Edit Syndicated Settings', 'general');
UPDATE priv_list SET des='Allows editing settings of syndicated journal that shouldn\'t be editable by users.',is_public='0',privname='Edit Syndicated Settings',scope='general' WHERE privcode='syn_edit';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to modify bans with the sysban mechanism.  arg=A specific ban type the user can modify, or \"*\" for all ban type.', '0', 'sysban', 'Modify System Bans', 'general');
UPDATE priv_list SET des='Allows a user to modify bans with the sysban mechanism.  arg=A specific ban type the user can modify, or \"*\" for all ban type.',is_public='0',privname='Modify System Bans',scope='general' WHERE privcode='sysban';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to edit site text in a given language. arg=Unique language code, optionally appended by |domainid.domaincode', '1', 'translate', 'Translate/Update Text', 'general');
UPDATE priv_list SET des='Allows a user to edit site text in a given language. arg=Unique language code, optionally appended by |domainid.domaincode',is_public='1',privname='Translate/Update Text',scope='general' WHERE privcode='translate';
INSERT IGNORE INTO priv_list (des, is_public, privcode, privname, scope) VALUES ('Allows a user to add/edit vgifts. arg=Tag in case restricting priv to a particular category is needed, or "*" for all tags.', '1', 'vgifts', 'Virtual Gifts', 'general');
UPDATE priv_list SET des='Allows a user to add/edit vgifts. arg=Tag in case restricting priv to a particular category is needed, or "*" for all tags.',is_public='1',privname='Virtual Gifts',scope='general' WHERE privcode='vgifts';
INSERT IGNORE INTO ratelist (des, name) VALUES ('Logged when a user adds someone to their Friends list', 'addfriend');
UPDATE ratelist SET des='Logged when a user adds someone to their Friends list' WHERE name='addfriend';
INSERT IGNORE INTO ratelist (des, name) VALUES ('Logged when a user creates a community.', 'commcreate');
UPDATE ratelist SET des='Logged when a user creates a community.' WHERE name='commcreate';
INSERT IGNORE INTO ratelist (des, name) VALUES ('Logged when wrong username/password is used.', 'failed_login');
UPDATE ratelist SET des='Logged when wrong username/password is used.' WHERE name='failed_login';
INSERT IGNORE INTO ratelist (des, name) VALUES ('Logged when a user sends a friend invite', 'invitefriend');
UPDATE ratelist SET des='Logged when a user sends a friend invite' WHERE name='invitefriend';
INSERT IGNORE INTO ratelist (des, name) VALUES ('Logged when a forgotten password or username e-mail is requested', 'lostinfo');
UPDATE ratelist SET des='Logged when a forgotten password or username e-mail is requested' WHERE name='lostinfo';
INSERT IGNORE INTO ratelist (des, name) VALUES ('Logged whenever user posts (to any journal)', 'post');
UPDATE ratelist SET des='Logged whenever user posts (to any journal)' WHERE name='post';
INSERT IGNORE INTO ratelist (des, name) VALUES ('Logged when a users sends a message via Tell A Friend', 'tellafriend');
UPDATE ratelist SET des='Logged when a users sends a message via Tell A Friend' WHERE name='tellafriend';
INSERT IGNORE INTO ratelist (des, name) VALUES ('Logged when a users sends a message to another user', 'usermessage');
UPDATE ratelist SET des='Logged when a users sends a message to another user' WHERE name='usermessage';
REPLACE INTO schemacols (colname, des, tablename) VALUES ('aaid', 'Primary key for each authaction.', 'authactions');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('acid', 'Account code ID.  Primary key.', 'acctcode');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('acktime', 'The time the user saw the box, either by clicking next/no/more info.', 'cprod');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('action', 'A textual description of what happened (up to 30 characters).', 'userlog');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('action', 'The action command name to be run when the authaction is confirmed (clicked/etc)', 'authactions');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('actiontarget', 'Optional, but is likely some numeric value.', 'userlog');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('allowmask', 'A bitmask to specify who can read the (non-public/non-private) entry. Bit 0 is for all friends (i.e., any defined friend can read it). Bits 1-30 are used for [dbtable[friendgroup2]]/[dbtable[friendgroup]]s. Bit 31 is reserved.', 'log2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('answer', 'The answer text, in plaintext.', 'faq');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('anum', 'The access number. A random number between 0 and 255 associated with the entry to form the jitemid.', 'log2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('area', 'The type of usage: \"L\" for log, \"T\" for talk, \"B\" for bio, \"P\" for pic.', 'dudata');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('areaid', 'Unique ID within area, or \'0\' if area has no ids (like bio)', 'dudata');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('arg1', 'Optional argument to accompany the action.', 'authactions');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('args', 'A URL string of arguments.', 'cmdbuffer');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('auth', 'Thirteen randomly generated bytes.  This, along with the acid encoded, make up the invite code.', 'acctcode');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('authcode', 'Random characters (the confirmation bit)', 'authactions');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('bgcolor', 'The background color used in the friends view events.', 'friends');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('bytes', 'Number of bytes item takes up.', 'dudata');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('cbid', 'unique id', 'cmdbuffer');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('checknext', 'Date and time of scheduled next check to syndication feed.', 'syndicated');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('clickthrutime', 'The time when the user clicked for more information.', 'cprod');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('client', 'Client string, of form Platform-Name/Version.  See login mode of protocol docs.', 'clients');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('clientid', 'Clientid of client from [dbtable[clients]] table.', 'clientusage');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('clientid', 'Primary key.  Auto-generated for each new client name.', 'clients');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('cmd', 'Text of the command name.', 'cmdbuffer');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('colname', 'The name of the specific column of the table being described.', 'schemacols');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('comment', 'Stores userpic comments. Users can define a 120 character, or 255 byte, comment for each userpic.', 'userpic2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('compdata', 'Gzipped compiled layer data.', 's2compiled2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('compressed', 'Either \"N\" or \"Y\", depending on whether the metadata about the journal entry is compressed. Unimplemented. Always \"N\".', 'log2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('createtime', 'Unixtime.', 'subs');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('curr', 'The current weighting value for this dbid+role.', 'dbweights');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('datatype', 'Either \"char\" for text data, \"num\" for an integer, or \"bool\" for a 1/0 value.', 'userproplist');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('datatype', 'Type of property, e.g. bool(ean).', 'talkproplist');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('dateadd', 'Date and time syndicated account was updated with the entry item.', 'synitem');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('datecreate', 'Date the auth code was created.', 'authactions');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('dateins', 'The date the search was made.', 'dirsearchres2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('dateview', 'The time of the viewing.', 'faquses');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('day', 'The day of the eventtime. Duplicated for an index.', 'log2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('dbid', 'The dbid from [dbtable[dbinfo]].', 'dbweights');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('dbid', 'Unique database ID.  Recommended to use the mysql server-id value.', 'dbinfo');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('des', 'A description of the individual column within the table, for use in the schema browser, and in the LJ manual.', 'schemacols');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('des', 'A description of the table, for use in the schema browser, and in the LJ manual.', 'schematables');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('des', 'Description of a comment property.', 'talkproplist');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('des', 'Description of rate-limited thing. Example: Logged when wrong username/password is used.', 'ratelist');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('des', 'Description of the meta-data, for use by developers (humans?)', 'userproplist');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('digest', 'The md5 digest of the event.  Concatenate everything important and run it through perl\'s md5_hex (or MySQL\'s md5)', 'duplock');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('domain', 'domain name, without any leading http:// or www.  Example:  foo.com', 'domains');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('dupid', 'The unique ID this action generated the first time.', 'duplock');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('etag', 'ETag (entity tag cache validator) response-header field value from server. If available, stored for use alongside an If-None-Match response-header field for subsequent requests. Used with lastmod column value.', 'syndicated');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('event', 'Journal entry text.', 'logtext2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('eventtime', 'The time of the entry, supplied by the user / according to the user\'s system clock.', 'log2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('expiretime', 'Unixtime. Can be 0, to mean \"never\".', 'subs');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('exptype', 'Session expiration type, the length a specific session should be defined for. \'short\' is 36 hours, \'long\' is 60 days,  \'once\' defaults to same length as \'short\'; just doesn\'t renew. ', 'sessions');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('faqcat', 'The name of the main category the FAQ item belongs to. Is the index to [dbtable[faqcat]]', 'faq');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('faqid', 'The faqid of the [dbtable[faq]] item which was viewed.', 'faquses');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('faqid', 'The unique id number of the FAQ.', 'faq');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('fdsn', 'The DBI connection DSN, username, then password, delimited by pipe characters.', 'dbinfo');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('fgcolor', 'The foreground color used in the friends view events.', 'friends');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('firstshowtime', 'The time when it was first highlighted to them (not at the show everything page).', 'cprod');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('fmt', 'Format of the uploaded image file. One of \'G\', \'J\', or \'P\', for GIF, JPEG, or PNG formats respectively.', 'userpic2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('friendid', 'The [dbtable[user]].userid of the friend to watch/trust.', 'friends');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('groupmask', 'A bitmask of 1 (1 << 0) OR\'ed with (1 << [dbtable[friendgroup]].groupnum) for each friendgroup this friend belongs to.', 'friends');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('height', 'Height of image in pixels.', 'userpic2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('idtype', 'The external identity type. One of \"O\" - OpenID, \"L\" - LID (NetMesh), \"T\" - TypeKey, ?  - etc.', 'identitymap');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('incname', 'The filename of the include file.', 'includetext');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('inctext', 'The text contents of the include file.', 'includetext');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('instime', 'The time the action first completed.', 'duplock');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('instime', 'The time the query was buffered. Not used by applications, but useful for debugging/humans.', 'cmdbuffer');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('intcount', 'The number of users listing the interest.', 'interests');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('intid', 'Unique id assigned to the interest.', 'interests');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('is_dirty', 'One of either 1 (indexed), or NULL (not in index) - means we need to update the target\'s etypeid.', 'subs');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('item', 'base64digest of rss $item', 'synitem');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('jitemid', 'The unique id number given to the entry.', 'log2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('jitemid', 'Unique id number given to the entry.', 'logsec2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('jitemid', 'Unique id of entry.', 'logprop2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('journalid', 'Journal id the command affects. This is so that all of a user\'s queued actions can be run before that user is potentially moved between clusters.', 'cmdbuffer');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('journalid', 'The journal in which the event took place.', 'subs');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('journalid', 'The userid of the [dbtable[user]] (such as a journal or community) in which the comment was posted.', 'talk2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('journalid', 'The userid of the [dbtable[user]] (such as a journal or community) in which the entry is being posted.', 'log2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('journalid', 'The userid of the [dbtable[user]] in which the comment is being posted.', 'talkprop2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('jtalkid', 'Each comment\'s unique id.', 'talk2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('jtalkid', 'Unique id of a comment.', 'talkprop2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('lastcheck', 'Date and time feed was last checked for updates, for use on syndicated account profile page. (Result of the last check is stored in the laststatus column.)', 'syndicated');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('lastitemid', 'Itemid of their last post (see [dbtable[log2]])', 'userusage');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('lastlogin', 'The most recent time this user used this client.', 'clientusage');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('lastmod', 'Unix time converted from HTTP time received in Last-Modified HTTP response-header field when querying feed source. Converted back, and used in If-Modified-Since field within a subsequent request-header.', 'syndicated');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('lastmodtime', 'The date the FAQ item was last modified.', 'faq');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('lastmoduserid', 'The userid of the [dbtable[user]] who last modified the FAQ item.', 'faq');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('lastnew', 'Date and time syndicated account was last updated with new entries. (Profile page will display \'Never\' if feed account is newly created and not yet updated for example.)', 'syndicated');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('laststatus', 'Status of last check, for use on syndicated account profile page. The value might be: \'Parse error\', \'Not Modified\', etc.', 'syndicated');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('level', 'Either \"all\" for user to get notifications and then a copy of each comment/solution posted, or \"new\" for user to get notifications when a new Support request in that category is posted.', 'supportnotify');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('logtime', 'The time of the entry, when the entry was posted (and when LJ logged it to the database - here), according to the server\'s clock.', 'log2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('masterid', 'The dbid which this server replicates from, or 0 for the master server.  Note: only one server should have a master of 0!', 'dbinfo');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('membership', 'Can people join without being invited?', 'community');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('modtime', 'API gets and sets this when loading/saving style layers and takes it into account when appending modtime (Last-Modified header field, so browsers will cache properly) to stylesheet_url.', 's2styles');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('modtime', 'Unix time when row was created (for the new cookie).', 'uniqmap');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('month', 'The month of the eventtime. Duplicated for an index.', 'log2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('name', 'A unique name of the server.', 'dbinfo');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('name', 'Name of property, matching [a-z0-9_]+.  Intended for use by code and clients.', 'userproplist');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('name', 'Name of the rate-limited thing, for referring to in code. Example: failed_login', 'ratelist');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('name', 'System name of a comment property.', 'talkproplist');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('nodeid', 'The thread nodeid for the given nodetype to which this comment applies (probably the jitemid from the [dbtable[log2]] row).', 'talk2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('nodetype', 'This field defines what type of thing in comment is in reply to. The value can be \"L\" = log item (journal entry), \"T\" = todo item.', 'talk2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('norm', 'The normal weighting value for this dbid+role.', 'dbweights');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('nothankstime', 'Also a boolean: time/if user does not want to see it again.', 'cprod');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('ntypeid', 'The notification type from the [dbtable[notifytypelist]] table.', 'subs');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('numreaders', 'Stores syndicated feed account readership (number of users (watchers) who list account as a friend), assuming feed isn\'t stale, so we can get to it quicker for other things. Lets us know which feeds are unwatched - so we poll them less.', 'syndicated');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('oldest_ourdate', 'Stores the oldest [dbtable[synitem]] date. It is stored in the [dbtable[syndicated]] table to use later to do a mass cleaning, or as part of migration to a clustered [dbtable[synitem]] table.', 'syndicated');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('oldvalue', 'The old value of the item.', 'infohistory');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('other', 'Optional note space.', 'infohistory');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('parentkwid', '(Can be null.)', 'usertags');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('parenttalkid', 'talkid of parent comment that this comment is in reply to within a comment thread. 0 if it is a top-level comment.', 'talk2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('posterid', 'The [dbtable[user]] userid of the person that posted the comment.', 'talk2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('posterid', 'The [dbtable[user]] userid of the person that posted the entry.', 'log2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('postlevel', 'Who can post?  Members only, or a select group.  \"screened\" is not yet used.', 'community');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('prettyname', 'Mixed case pretty name with spaces and punctuation.  Intended for use by humans.', 'userproplist');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('prettyname', 'Property name formatted to be human-readable.', 'talkproplist');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('prop', 'A property name, such as \'useragent\'.', 'supportprop');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('public_browsable', 'If set to 1, users with the schemadoc priv can view the data in this table from the web. (lookup tables only)', 'schematables');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('public_help', 'Controls if you can use internal comments/actions as Reply Types.', 'supportcat');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('qdigest', 'An MD5sum of the SQL search query.', 'dirsearchres2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('question', 'The question text, in plaintext.', 'faq');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('rcptid', 'Userid of recipient, or 0 if code is unused.', 'acctcode');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('realm', 'The area of the site the lock is being provided for.', 'duplock');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('reason', 'Reason the invite code was generated.', 'acctcode');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('recentshowtime', 'A recent showing time. Perhaps not _the_ most recent, though.', 'cprod');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('redist_mode', 'Determines if data from this table is made available in the LJ source distribution.  And if so, is it to be updated with upgrades (REPLACE INTO) or just inserted once.', 'schematables');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('reid', 'Realm ID.  If you don\'t need it (most don\'t), use 0.  Example: for comment realm, reid is the itemid being replied to.', 'duplock');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('replycount', 'The number of people that have replied to this entry.', 'log2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('rlid', 'Corresponds to a rate-limitable action\'s rlid number in [dbtable[ratelist]].', 'ratelog');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('role', 'The database role type:  master, slave, clusterN, clusterNslave, etc...  See other documentation.', 'dbweights');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('rootfdsn', 'The fdsn to connect as root, to do administrative stuff.', 'dbinfo');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('scope', 'Either \"general\" for talkprops in the generic LiveJournal code, or \"local\" if the talkprop is site-specific.', 'talkproplist');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('scope', 'Either \"general\" for userprops in the generic LiveJournal code, or \"local\" if the userprop is site-specific.', 'userproplist');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('security', 'The security level of the entry. \"public\" is viewable to all, \"private\" is for only the poster, and \"usemask\" does a bitwise calculation of the allowmask and the groupmask of the friend viewing it.', 'log2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('showbydefault', 'Unused.', 'friends');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('sortorder', 'The sorting number the questions are ordered by. Used while SELECT\'ing them.', 'faq');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('spid', 'Unique ID of Support request. Used in URL.', 'supportprop');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('state', 'Comment state identifier: (A)ctive, (D)eleted, (S)creened, (F)rozen, etc.', 'talk2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('subid', 'The ESN subscription ID (domain type \'E\') allocated by the LJ::alloc_user_counter function.', 'subs');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('subject', 'Journal entry subject.', 'logtext2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('summary', 'The summary text, in plaintext, for the user to browse at-a-glance.', 'faq');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('synurl', 'HTML-cleaned URI of external feed.', 'syndicated');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('tablename', 'The name of the table being described.', 'schemacols');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('tablename', 'The name of the table being described.', 'schematables');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('timechange', 'The time of the change.', 'infohistory');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('timecheck', 'Usage information sufficient to tell us whether the accounts been used in the last year or month, even just for viewing. (Important so that if site ever does start to close old accounts, will know they\'re not closing active only-used-for-viewing accounts)', 'userusage');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('timecreate', 'When the user created their journal.', 'userusage');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('timegenerate', 'Time the invite code was generated. Time the code was used == the recipient account creation time.', 'acctcode');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('timeupdate', 'When the user last updated their journal.', 'userusage');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('tpropid', 'Corresponds to unique tpropid in [dbtable[talkproplist]] of an individual comment property. Example: 10 (which might map to subjecticon in [dbtable[talkproplist]].', 'talkprop2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('tpropid', 'Unique id of a comment property.', 'talkproplist');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('track', 'If the police or a court has contact us to track a user, we turn this on and activities are logged to the [dbtable[tracking]] table.', 'user');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('uniq', 'Value of the unique cookie.', 'uniqmap');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('updatetime', 'The date it was last updated.', 'includetext');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('upropid', 'Unique id for this meta-data property.', 'userproplist');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userid', 'Community\'s userid from the [dbtable[user]] table.', 'community');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userid', 'The owner of the subscription.', 'subs');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userid', 'The userid doing the action, or 0 if user is unknown (as in support realm)', 'duplock');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userid', 'The userid of the [dbtable[user]] making the change.', 'infohistory');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userid', 'The userid of the [dbtable[user]] who added the friend.', 'friends');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userid', 'The userid of the remote [dbtable[user]] viewing the FAQ item.', 'faquses');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userid', 'The userid of the subscribing [dbtable[user]].', 'supportnotify');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userid', 'The userid the disk usage item belongs to.', 'dudata');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userid', 'Userid of [dbtable[user]] using client.', 'clientusage');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userid', 'Userid of [dbtable[user]] we\'re verifying.', 'authactions');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userid', 'Userid of [dbtable[user]] whose journal should be loaded.', 'domains');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userid', 'Userid of [dbtable[user]].  One row in this table per user.', 'userusage');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userid', 'Userid of syndicated feed account.', 'syndicated');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userid', 'Userid of syndicated feed account.', 'synitem');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userid', 'Userid of user the unique cookie belongs to.', 'uniqmap');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userid', 'Userid that can give this code.', 'acctcode');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('userids', 'Either \"[Searching]\" if a query is still running, or a comma-separated list of userids matched for the query if it is finished.', 'dirsearchres2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('value', 'The property value such as the requestor\'s useragent string, a unique cookie value to display on Support requests for authorized users, etc.', 'supportprop');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('value', 'Value for tpropid (generally set by comment poster). Property can be a boolean (e.g., enabling don\'t auto-format), partial filename of specific selected subject icon, etc.', 'talkprop2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('verifytime', 'The unixtime we last checked this [dbtable[has_subs]] caching row is still accurate and people do in fact still subscribe to this. This allows for maintenance tasks to background prune this table and fix up verifytimes.', 'has_subs');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('what', 'Criterion being used to ban on: ip, emailnopay (site-specific example and means don\'t allow payments from that e-mail), email, etc.', 'sysban');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('what', 'Short name of the item being changed.', 'infohistory');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('width', 'Horizontal width of image in pixels.', 'userpic2');
REPLACE INTO schemacols (colname, des, tablename) VALUES ('year', 'The year of the eventtime. Duplicated for an index.', 'log2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('', '0', 'off', NULL, 'moods');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('', '0', 'off', NULL, 's2styles');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('', '0', 'off', NULL, 'synitem');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('', '0', 'off', NULL, 'user');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered, not indexed.', '0', 'off', NULL, 'userproplite2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. ESN event queue notification method.', '0', 'off', NULL, 'notifyqueue');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores ESN journal subscriptions data. A flag on event target (a journal) is written here saying whether there are known listeners out there.', '0', 'off', NULL, 'has_subs');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores IP addresses for spam reports, temporarily, whether the journal in which the anonymous comment was posted in has enabled IP tracking or not. Used with the [dbtable[spamreports]] table.\n\r\nThe LJ::record_anon_comment_ip function gets the anonymous comment IP, and records it here.\r\n\r\nA maintenance task cleans out IPs after 5 days - so anonymous comments deleted after 5 days are fairly useless, and reports about them are quietly discarded by the comment deletion system.', '0', 'off', NULL, 'tempanonips');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores Jabber roster data.', '0', 'off', NULL, 'jabroster');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores a log count of generic actions that have happened, like a post action (which calls LJ::DB::note_recent_action()).\n\r\nA maintenance task moves these logged summaries from the various clusters to the global [dbtable[actionhistory]] table.', '0', 'off', NULL, 'recentactions');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores blobs (binary large objects) of on-disk data.\n\r\nBlob* files/classes for storing Blobs need to be added either to a local path or a remote Blob server (\"remote Blob server\" support has since been removed in favor of MogileFS).\r\n\r\nNotes: blobids aren\'t necessarily unique between domains; global userpicids may collide with the counter used for the rest. So, the type must be in the key. domain IDs are set up in etc/config.pl.', '0', 'off', NULL, 'userblob');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores comments, such as OpenID comments, awaiting user approval.', '0', 'off', NULL, 'pendcomments');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores community invitations received.', '0', 'off', NULL, 'inviterecv');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores community invitations sent.', '0', 'off', NULL, 'invitesent');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores contextual product prodding history. This makes sure people are not pestered by specific prodding when they do not want it anymore.', '0', 'off', NULL, 'cprod');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores data about entries for the random user search. On posting an entry (public, to personal journal, and not opted out (using latest_optout option at the console)) a user may end up with a row in this table.\n\r\nThe htdocs/random.bml page returns a random user that is both 1) publicly listed in the directory, and 2) updated within the past 24 hours. If a user changes their privacy setting using the console to not be in this table, it will take up to 24 hours for them to be removed from the random.bml listing; a maintenance task builds/cleans the table.\r\n\r\nThe information row is kept for seven days by default. Site administrators can adjust this using the $LJ::RANDOM_USER_PERIOD site variable.', '0', 'off', NULL, 'random_user_set');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores data for links users place in their Links List (“blogroll”), used in S2 styles.', '0', 'off', NULL, 'links');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores data for mapping an entry to its security filtering.\n\r\nA row is added here whenever an entry with security of \"usemask\" (which is Friends-only and Custom) is posted.\r\n\r\nUsed for speedier deleting of a friend group, which was slow since old entries needed the bit turned off in allowmask.', '0', 'off', NULL, 'logsec2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores data for mapping memories to keywords.', '0', 'off', NULL, 'memkeyword2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores data for mapping of tags applied to an entry.', '0', 'off', NULL, 'logtags');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores data for mapping tags; like [dbtable[logtags]], but only for the most recent 100 tags-to-entry.', '0', 'off', NULL, 'logtagsrecent');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores data for mapping userpic keywords ([dbtable[userkeywords]]) to userpics ([dbtable[userpic2]]).', '0', 'off', NULL, 'userpicmap2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores data of failed logins, for use with the rate-limiting system.', '0', 'off', NULL, 'loginstall');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores data on where users are active, for per-activity user cluster statistics.\n\r\nThe LJ::make_user_active function updates into this table, so long as it has not already been updated for the same user within the last hour. For sites not using memcached, the table is always updated. Please see also [dbtable[active_user]].', '0', 'off', NULL, 'clustertrack2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores data to give users access to view their logins in the past 30 days, if they\'re at all afraid that their account has been compromised.', '0', 'off', NULL, 'loginlog');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores general purpose status log data, such as when an entry is deleted or logging post-by-e-mail activity.\n\r\nThe initiator of the event is stored here so we can look back and say, for example: \"this person deleted the entry\". This works for communities and individual journals, and the actions are logged on the account that lost the entry.\r\n\r\nThe basic format is [ action, actiontarget ].', '0', 'off', NULL, 'userlog');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores metadata about all comments to journal entries. Indexes are all on this table.', '0', 'off', NULL, 'talk2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores metadata about all journal entries. The actual content is stored in [dbtable[logtext2]].', '0', 'off', NULL, 'log2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores metadata about all user-to-user messages. The actual content is stored in [dbtable[usermsgtext]].', '0', 'off', NULL, 'usermsg');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores metadata details about a user\'s ESN subscriptions. Please see also [dbtable[has_subs]].', '0', 'off', NULL, 'subs');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores metadata for entries users mark as \"Memories\".', '0', 'off', NULL, 'memorable2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores metadata of a user\'s ESN subscriptions, from possibilities stored in [dbtable[subsproplist]].', '0', 'off', NULL, 'subsprop');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores metadata of comments, from possibilities stored in [dbtable[talkproplist]].', '0', 'off', NULL, 'talkprop2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores metadata of entries, from possibilities stored in [dbtable[logproplist]].', '0', 'off', NULL, 'logprop2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores metadata of poll props used, from possibilities stored in [dbtable[pollproplist2]].', '0', 'off', NULL, 'pollprop2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores metadata of user-to-user messages, from possibilities stored in [dbtable[usermsgproplist]].', '0', 'off', NULL, 'usermsgprop');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores metadata of what tags a user has. Please see also [dbtable[userkeywords]].', '0', 'off', NULL, 'usertags');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores moderated community entry Storable objects (all props/options).', '0', 'off', NULL, 'modblob');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores moderated community entry summary information.', '0', 'off', NULL, 'modlog');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores references to where a user has posted comments. Used for comments ([dbtable[user]] left in other journals) counter on user profile page.', '0', 'off', NULL, 'talkleft');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores the actual text of comments to journal entries.', '0', 'off', NULL, 'talktext2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores the actual text of journal entries. Data is compressed if $LJ::COMPRESS_TEXT site variable is on.', '0', 'off', NULL, 'logtext2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores the actual text of user-to-user messages.', '0', 'off', NULL, 'usermsgtext');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores the actual userpic blobs. Optionally a blob server can be used instead of storing them here in the database.', '0', 'off', NULL, 'userpicblob2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores the special links (\"reluser relationships\") between accounts.\n\r\nRelationship type IDs are defined in the LJ::get_reluser_id function. A relationship \"typeid\" cannot be a single character. Please see also [dbtable[reluser]].', '0', 'off', NULL, 'reluser2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores the summary counts for security on entry keywords (tags).', '0', 'off', NULL, 'logkwsum');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores unixtime of the user\'s next birthday. Used for sending out birthday notifications.', '0', 'off', NULL, 'birthdays');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores user (not system) S2 layers, and is lazily migrated.  This table is indexed by userid, layerid, and contains data that is compressed when it\'s put in. (Tests show this reduces data size by about 75 percent.)\n\r\nNew saves go here. Loads try this table first (unless user is system) and if miss, then try the [dbtable[s2compiled]] table on the global.', '0', 'off', NULL, 's2compiled2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores user activity data, such as tracking types of user activity on a per-hour basis (example: $u had login activity during this hour). An \"active user\" is a user who has hit a LiveJournal page while logged-in, within the specified time period.\n\r\nOnly used if memcached servers are available, and the site administrator has not disabled active user tracking. Clustered activity data from the current or previous hour is not harvested, to avoid counting duplicates. The year, month, day, hour, and userid columns make up the primary key, for duplicate checking. Please see also [dbtable[active_user_summary]] and [dbtable[clustertrack2]].', '0', 'off', NULL, 'active_user');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores user properties greater than 255 bytes.', '0', 'off', NULL, 'userpropblob');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores user-based disk usage totals.', '0', 'off', NULL, 'dudata');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores userpic ([dbtable[userpic2]]) keywords. Also stores entry keywords (tags), and memory keywords.\n\r\nA site-configurable limit to the number of keywords for each userpic exists; default is 5.\r\n\r\nThis table never gets deleted from, except if the user itself gets deleted. Please see also [dbtable[userpicmap2]].', '0', 'off', NULL, 'userkeywords');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores userpic metadata. The actual userpics are stored in either the database ([dbtable[userpicblob2]]) or on a blob server.\n\r\nFrom data version 7 userpics are clustered; the global [dbtable[userpic]] table is used prior to data version 7. Please see also [dbtable[userpicmap2]]/[dbtable[userkeywords]].', '0', 'off', NULL, 'userpic2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. Stores web sessions data. Optionally tied to IPs and with expiration times.\n\r\nWhenever a session is okayed, expired ones or ones created over 30 days ago are deleted.\r\n\r\nA live session can\'t change e-mail address or password. Digest authentication will be required for that, or JavaScript MD5 challenge-response.', '0', 'off', NULL, 'sessions');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered. This replaced the global querybuffer table. That table was used to hold queries to do later, in an efficient batch under an explicit table lock. By contrast, this table is used with specialized commands rather than general table locking.', '0', 'off', NULL, 'cmdbuffer');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered.', '0', 'off', NULL, 'embedcontent');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered.', '0', 'off', NULL, 'embedcontent_preview');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered.', '0', 'off', NULL, 'jablastseen');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered.', '0', 'off', NULL, 'notifyarchive');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered.', '0', 'off', NULL, 'notifybookmarks');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered.', '0', 'off', NULL, 'poll2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered.', '0', 'off', NULL, 'pollitem2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered.', '0', 'off', NULL, 'pollquestion2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered.', '0', 'off', NULL, 'pollresult2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered.', '0', 'off', NULL, 'pollsubmission2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered.', '0', 'off', NULL, 'ratelog');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered.', '0', 'off', NULL, 's2stylelayers2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered.', '0', 'off', NULL, 'sessions_data');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Clustered.', '0', 'off', NULL, 'userbio');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global table for persistent queues.', '0', 'off', NULL, 'persistent_queue');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global, indexed.', '0', 'off', NULL, 'userprop');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global, not indexed.', '0', 'off', NULL, 'userproplite');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Generic place for code to cache blobs.', '0', 'off', NULL, 'blobcache');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Please see also the clustered [dbtable[s2stylelayers2]] table.', '0', 'off', NULL, 's2stylelayers');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Required for user-mover script (ljumover). The script performs mass user-move operations between various clusters.', '0', 'off', NULL, 'clustermove_inprogress');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores Directory Search information: userid, a \"pack\" of information - time of last update, age, journal type, country, state, and city; row modification time, and expiry information.', '0', 'off', NULL, 'usersearch_packdata');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores Frequently Asked Question information and their optional summaries for the FAQ section of the Support system. Alternate text can be loaded for the questions if available.', '0', 'off', NULL, 'faq');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores Jabber cluster tracking data.', '0', 'off', NULL, 'jabcluster');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores Jabber presence data.', '0', 'off', NULL, 'jabpresence');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores MogileFS sethandles for the Directory Search.', '0', 'off', NULL, 'dirmogsethandles');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores S2 layer data (compdata is not gzipped). Please see also [dbtable[s2compiled2]].', '0', 'off', NULL, 's2compiled');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores S2 layer sources. Please see also the newer global InnoDB table [dbtable[s2source_inno]].', '0', 'off', NULL, 's2source');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores Support system categories.', '1', 'insert', 'catkey=\'general\'', 'supportcat');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores [dbtable[user]] subscriptions to Support request categories for e-mail notification of new requests.', '0', 'off', NULL, 'supportnotify');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores \'sysban\' data - the mechanism for banning users from portions of the site based on certain criteria.', '0', 'off', NULL, 'sysban');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores a count of generic actions. A nightly maintenance task (clean_caches) summarizes the clustered [dbtable[recentactions]] tables data here.', '0', 'off', NULL, 'actionhistory');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores a history log of certain types of changes (like user e-mail changes), so the old values can be looked at by administrators or automatically retrieved. Please see also [dbtable[statushistory]].', '0', 'off', NULL, 'infohistory');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores a log of when a user is expunged (\'purged\'), by the moveucluster script, so they can be queried later by time or username.', '0', 'off', NULL, 'expunged_users');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores a record of clients that access the protocol.\n\r\nWhenever the protocol encounters a new client, a new row (and thus a new clientid) is generated.', '0', 'off', NULL, 'clients');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores a record that an action has been done, so it doesn\'t get done a second time later by a user accidentally double-clicking a single-click button in their browser.\n\r\nThe idea is that the application should grab a write lock for both the table it\'s inserting into, and the duplock table. Then, check the duplock table for a duplicate. If it\'s already in there, unlock the tables and remember the dupid to tell the user (app should pretend it was the first time... don\'t show an error message!), or if it\'s not in there, put it in the table, and then put the resulting uniqueid from the table handler into the duplock table (as dupid).\r\n\r\nThis table is purged every hour or so of all locks older than an hour.', '0', 'off', NULL, 'duplock');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores an internal log of a user for Support purposes. For example, suspensions and unsuspensions are recorded for the abuse prevention team, and privilege granting/removing is logged. Please see also [dbtable[infohistory]].', '0', 'off', NULL, 'statushistory');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores categories under which Frequently Asked Questions can be classified.', '1', 'off', NULL, 'faqcat');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores community accounts (which are just normal user accounts with some extra behavior) properties used.', '0', 'off', NULL, 'community');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores community interests. Please see also [dbtable[interests]], which stores interest data for normal [dbtable[user]] accounts.', '0', 'off', NULL, 'comminterests');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores content marked as spam by users when they delete it, for administrator review.\n\r\nA reported comment, user-to-user message, or community entry is copied into this table, by the LJ::mark_comment_as_spam, LJ::mark_as_spam, or LJ::mark_entry_as_spam function, respectively.\r\n\r\nThe admin tool (/admin/spamreports.bml hinging on siteadmin:spamreports priv) allows spam report viewing: top 10 reported IPs, top 10 reported users (and showing if someone has received a spam warning before), last 10 reports, reports in last 1 hour, 6 hours, and 24 hours; the page supports sorting by open/closed.\r\n\r\nThe \'spamreport_notification\' hook exists for optionally notifying people about spamming.  A maintenance task cleans out data older than 90 days. Please see also the [dbtable[tempanonips]] table.', '0', 'off', NULL, 'spamreports');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores contextual product prodding items. (\"Hey, you\'ve never used polls, wanna learn how?\")', '0', 'off', NULL, 'cprodlist');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores counter information allocated by the LJ::alloc_global_counter function. Please see also [dbtable[usercounter]].', '0', 'off', NULL, 'counter');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores data for RFC 2617 challenge-response digest authentication support - used on-site for logins, commenting, etc. Please see also [dbtable[secrets]].', '0', 'off', NULL, 'challenges');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores data for a rotating secret value on the server, for auth support. Please see also [dbtable[challenges]].', '0', 'off', NULL, 'secrets');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores data for mapping a userid to an external identity and its type.\n\r\nThis focuses on OpenID consumer support, and was introduced so infrastructure was in place to make it completely identity-system neutral rather than OpenID-specific.\r\n\r\nIn theory, eventually, this will allow people to log in with TypeKey, LID, etc.', '0', 'off', NULL, 'identitymap');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores data for mapping pollid <=> journalid.', '0', 'off', NULL, 'pollowner');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores data for mapping userid <=> user(name).', '0', 'off', NULL, 'useridmap');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores data for mapping value of unique cookie <=> userid.', '0', 'off', NULL, 'uniqmap');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores data for the Support system.\n\r\nAllows users with the supporthelp priv to see links to support/history.bml, when viewing a Support request, where they can pull up a list of all past requests opened by that user or by that e-mail address.', '0', 'off', NULL, 'support');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores data for which Support tickets a user responded to. Used for speedier querying for the Support system \"You Replied\" filter.', '0', 'off', NULL, 'support_youreplied');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores data of when different users use which clients, for purposes of statistics.', '0', 'off', NULL, 'clientusage');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores data of which users someone has listed as a \"friend\". Also stores the preferences on the friend item.', '0', 'off', NULL, 'friends');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores database connection and replication info, instead of in the %LJ::DBINFO hash, for easier (web-based) management of LiveJournal installations with many databases.', '0', 'off', NULL, 'dbinfo');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores each database\'s roles and weights. The [dbtable[dbinfo]] table keeps track of which databases exist.', '0', 'off', NULL, 'dbweights');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores external user mappings. Note: extuser/extuserid are expected to sometimes be NULL, even though they are keyed. (Null values are not taken into account when using indexes).', '0', 'off', NULL, 'extuser');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores information on syndicated accounts like feed URI, readership, polling, etc.', '0', 'off', NULL, 'syndicated');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores list of ESN notification class types.', '0', 'off', NULL, 'notifytypelist');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores list of different admin privileges that users can have.', '1', 'replace', NULL, 'priv_list');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores list of possible metadata for ESN subscriptions. Unlike most other *proplist tables, this one is auto-populated by the LiveJournal application.', '0', 'off', NULL, 'subsproplist');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores list of possible metadata for comments.', '1', 'replace', NULL, 'talkproplist');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores list of possible metadata for journal entries.', '1', 'replace', NULL, 'logproplist');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores list of possible metadata for polls.', '0', 'off', NULL, 'pollproplist2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores list of possible metadata for user-to-user messages.', '0', 'off', NULL, 'usermsgproplist');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores list of possible metadata on users.\n\r\nAllows for having userprops stored globally for indexing; and, by way of the multihomed column, on a cluster as \"multihomed userprops\", for easy access on user profile pages and such.', '1', 'replace', NULL, 'userproplist');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores log of viewings of individual [dbtable[faq]]s by logged-in users.', '0', 'off', NULL, 'faquses');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores metadata on Support requests.', '0', 'off', NULL, 'supportprop');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores new S2 layer sources, and those lazily migrated from [dbtable[s2source]].\n\r\nCreated to do a live migration from the old MyISAM table ([dbtable[s2source]]) to this new InnoDB table without requiring downtime.', '0', 'off', NULL, 's2source_inno');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores open HTTP proxies data. Site administrators can set open proxy lookup sources using the @LJ::RBL_LIST site variable.', '0', 'off', NULL, 'openproxy');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores partialstats calculation times.', '0', 'off', NULL, 'partialstats');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores per-cluster partialstats data.', '0', 'off', NULL, 'partialstatsdata');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores per-user backup status.', '0', 'off', NULL, 'backupdirty');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores record of when [dbtable[user]]s did certain things.', '0', 'off', NULL, 'userusage');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores shared secret (authaction ID + authcode pair) data. When authenticating certain actions, the server generates an authaction along with some random characters (the authcode) and e-mails the aaid+authcode to the user to confirm they actually got it.', '0', 'off', NULL, 'authactions');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores special \"include\" file contents used in sections of the site (like the \"known issues\" box in Support). Useful for keeping clusters of web servers in sync easier.', '0', 'off', NULL, 'includetext');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores start/completion of a user move, by moveucluster script, between database clusters. Future mass cleanings can be made during scheduled downtime using this log of where undeleted data is. It is also noted in this table if the user is to be expunged (\'purged\'); a note is made in the [dbtable[expunged_users]] table when the user and its data has been expunged.', '0', 'off', NULL, 'clustermove');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores stock answers for Support system. Answers are viewable by those with the \"supporthelp\" priv, and editable by people who have the ability to grant privileges in their category.', '0', 'off', NULL, 'support_answers');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores the data of which accounts are marked as underage.', '0', 'off', NULL, 'underage');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores the debug logging of LJ::NotificationMethod::DebugLog, when that\'s used to replace an officialpost notification method (such as Inbox or Email).', '0', 'off', NULL, 'debug_notifymethod');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores the different interests listed, and the number of users listing each interest. Please see also [dbtable[comminterests]].', '0', 'off', NULL, 'interests');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores the different rate-limited actions a user can make.\n\r\nUsed for rate-limiting infrastructure: denying fast failed logins (password brute-forcing), user-to-user messaging, rate-limiting on friend additions, etc.', '1', 'replace', NULL, 'ratelist');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores the results of a Directory Search query.', '0', 'off', NULL, 'dirsearchres2');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores the special links (\"reluser relationships\") between accounts, such as community maintainers/moderators.\n\r\nA relationship \"type\" is a single character. Please see also [dbtable[reluser2]].', '0', 'off', NULL, 'reluser');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores user Support points data. Used for speedier querying for htdocs/support/highscores.bml.', '0', 'off', NULL, 'supportpointsum');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores user account transitions data (e.g. \"free\" to \"plus\", or whatever site-specific capability classes exist).', '0', 'off', NULL, 'usertrans');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores user activity data. A maintenance task (clean_caches) summarizes the clustered [dbtable[active_user]] tables data here. It is indexed by year, month, day, hour, to allow multiple rows per clusterid, per hour. Only used if memcached servers are available.', '0', 'off', NULL, 'active_user_summary');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores user e-mail addresses, which were historically stored in the [dbtable[user]] table.', '0', 'off', NULL, 'email');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores user login passwords, which were historically stored in the [dbtable[user]] table.', '0', 'off', NULL, 'password');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores user-owned domain names, and which journals they map to when pointed at the LiveJournal installation\'s IP address.', '0', 'off', NULL, 'domains');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores worker(s) result storage status.', '0', 'off', NULL, 'jobstatus');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Table required by DBI::Role for procnotify - the function used to pass a message to all web processes on all clusters.', '0', 'off', NULL, 'procnotify');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Used by the move user cluster script. Both before and after updating a user\'s read-only flag we add the user to this table, which is just an index onto users who - might - be in read-only.\n\r\nA maintenance task will periodically clean those and make sure nobody is stranded in read-only, without resorting to a full tablescan of the [dbtable[user]] table, by checking if users are still locked, removing those that are not from this table, querying the job server (if up) for users that are still locked and unlocking those that can be unlocked.', '0', 'off', NULL, 'readonly_user');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global.', '0', 'off', NULL, 'eventtypelist');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Global. Stores comments when the database cluster of the user making the comment is unavailable.\n\r\nA maintenance task (clean_caches) moves data from here to [dbtable[talkleft]] on clusters.', '0', 'off', NULL, 'talkleft_xfp');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Lookup table for states, countries, languages, etc...', '1', 'replace', NULL, 'codes');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Stores data on valid invite codes and who has used them. The acctinvite table stores the data on why they were made.', '0', 'off', NULL, 'acctcode');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Stores metadata for entries users mark as \"Memories\". Please see also the clustered [dbtable[memorable2]] table.', '0', 'off', NULL, 'memorable');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Stores per-user counters on the global (contrary to the name). These are allocated by the LJ::alloc_user_counter function. Please see also [dbtable[counter]].', '0', 'off', NULL, 'usercounter');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Stores the documentation for the database tables.', '0', 'replace', NULL, 'schematables');
REPLACE INTO schematables (des, public_browsable, redist_mode, redist_where, tablename) VALUES ('Stores the documentation for the individual columns of the database tables.', '0', 'replace', NULL, 'schemacols');
INSERT IGNORE INTO supportcat (allow_screened, basepoints, catkey, catname, hide_helpers, is_selectable, no_autoreply, public_help, public_read, replyaddress, scope, sortorder, user_closeable) VALUES ('1', '1', 'general', 'General/Unknown', '0', '1', '0', '0', '1', NULL, 'general', '2', '1');
UPDATE supportcat SET allow_screened='1',basepoints='1',catname='General/Unknown',hide_helpers='0',is_selectable='1',no_autoreply='0',public_help='0',public_read='1',replyaddress=NULL,scope='general',sortorder='2',user_closeable='1' WHERE catkey='general';
