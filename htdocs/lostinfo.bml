<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=><?_ml .title _ml?>
body<=
<?_code
{
    use strict;
    use vars qw(%POST);

    use POSIX qw(strftime);

    LJ::set_active_crumb('lostinfo');

    my $captcha = DW::Captcha->new( 'lostinfo', %POST );

    my $captcha_error;

    # no post action, just show query form
    unless (LJ::did_post()) {
        my $ret;

        $ret .=  "<?h1 $ML{'captcha.title'} h1?>\n"
            if $captcha->enabled;

        $ret .= "<form action='lostinfo' method='post'>\n";
        $ret .= LJ::form_auth();
        $ret .= $captcha->print;

        $ret .= "<?h1 $ML{'.lostpassword.title'} h1?>\n";
        $ret .= "<?p " . BML::ml( ".lostpassword.text", { sitename => $LJ::SITENAMESHORT } ) ." p?>\n";

        $ret .= "<div class='form-basic form-fix'><div class='tl'><div class='tr'><div class='br'><div class='bl'>\n";
        $ret .= "<fieldset><label>$ML{'.enter_username'}</label>\n";
        $ret .= LJ::html_text({ 'name' => 'user', 'id' => 'userlost', 'size' => 30, 'maxlength' => 25, onkeyup => 'enable_pass();'}) . "</fieldset>\n";
        $ret .= "<fieldset><label>$ML{'.enter_email_optional'}</label>\n";
        $ret .= LJ::html_text({ 'name' => 'email_p', 'size' => 30, 'maxlength' => 50 }) . "</fieldset>\n";
        $ret .= "<div class='btn-set'>\n";
        $ret .= LJ::html_submit('lostpass', $ML{'.btn.proceed'}, { id => 'lostpass' }) . "</div>\n";
        $ret .= "</div></div></div></div></div>\n";

        $ret .= "<?h1 $ML{'.lostusername.title'} h1?>\n";
        $ret .= "<?p $ML{'.lostusername.text'} p?>\n";
        $ret .= "<div class='form-basic form-fix'><div class='tl'><div class='tr'><div class='br'><div class='bl'>\n";
        $ret .= "<fieldset><label>$ML{'.enter_email'}</label>\n";
        $ret .= LJ::html_text({ 'name' => 'email_u', 'id' => 'email_u', 'size' => 30, 'maxlength' => 50, onkeyup => 'enable_user();' }) . "</fieldset>\n";
        $ret .= "<div class='btn-set'>\n";
        $ret .= LJ::html_submit('lostuser', $ML{'.btn.proceed'}, { id => 'lostuser' }) . "</div>\n";
        $ret .= "</div></div></div></div></div>\n";

        $ret .= qq( <script type="text/javascript">
                    function enable_pass () {
                        \$("lostpass").disabled = !\$("userlost").value;
                    }
                    function enable_user () {
                        \$("lostuser").disabled = !\$("email_u").value;
                    }

                    enable_pass();
                    enable_user();
                    </script>
                  );

        $ret .= "</form>\n";

        return $ret;
    }

    # we have a post action
    return LJ::bad_input( LJ::Lang::ml( "error.invalidform" ) ) unless LJ::check_form_auth();

    # note: some lostinfo_do.bml translation strings are used below
    # because the code was once in lostinfo_do.bml, but later
    # was merged into this file

    if ($POST{'lostpass'}) {

        return LJ::bad_input( $captcha_error ) unless
            $captcha->validate( err_ref => \$captcha_error );

        my $email = LJ::trim($POST{'email_p'});

        my $u = LJ::load_user($POST{'user'});
        return LJ::bad_input($ML{'error.username_notfound'})
            unless $u;

        my $err = sub {
            my ($title, $msg) = @_;
            if ($title && ! $msg) {
                $msg = $title;
                $title = $ML{'Error'};
            }
            return "<?h1 $title h1?>\n<?p $msg p?>";
        };

        if ( $u->is_syndicated ) {
            return $err->( $ML{'.error.syndicated'} );
        }

        if ( $u->is_community && ! length $u->password ) {
            # community with no password
            return $err->( $ML{'.error.commnopassword'} );
        }

        if ($u->is_expunged) {
            return $err->( $ML{'.error.purged'} );
        }

        if ($u->is_renamed) {
            return $err->( $ML{'.error.renamed'} );
        }

        return LJ::bad_input($ML{'.error.toofrequent'}) unless $u->rate_log( "lostinfo", 1 );

        # Check to see if they are banned from sending a password
        if (LJ::sysban_check('lostpassword', $u->{'user'})) {
            LJ::Sysban::note( $u->{userid}, "Password retrieval blocked based on user",
                            { user => $u->{user} } );
            return $err->( $ML{'Sorry'}, $ML{'.error.sysbanned'} );
        }

        # check if this email address can receive password reminders
        $email ||= $u->email_raw;
        return LJ::bad_input($ML{'/lostinfo_do.bml.error1.text'})
            unless $u->can_receive_password($email);

        # email address is okay, build email body
        my $encoding = 'utf-8';
        my $subject = $ML{'/lostinfo_do.bml.lostpasswordmail.subject'};

        if ($LJ::BLOCKED_PASSWORD_EMAIL && $email =~ /$LJ::BLOCKED_PASSWORD_EMAIL/) {
            return LJ::bad_input('Invalid email');
        }

        my $body;

        # register an auth action for them to reset their password
        my $aa = LJ::register_authaction($u->{'userid'}, "reset_password", $email);
        $body = BML::ml('/lostinfo_do.bml.lostpasswordmail.reset', {
                            lostinfolink => "$LJ::SITEROOT/lostinfo",
                            sitename => $LJ::SITENAME,
                            username => $u->{user},
                            emailadr => $u->email_raw,
                            resetlink => "$LJ::SITEROOT/changepassword?auth=$aa->{aaid}.$aa->{authcode}",
                        });
        $body .= "\n\n" .BML::ml('/lostinfo_do.bml.lostpasswordmail.part3',
                        { 'remoteip' => BML::get_remote_host() . " (" . BML::get_remote_ip() . ")" });
        $body .= "\n\n";

        LJ::send_mail({
            'to' => $email,
            'from' => $LJ::ADMIN_EMAIL,
            'fromname' => $LJ::SITENAME,
            'charset' => $encoding,
            'subject' => $subject,
            'body' => $body,
        }) or die "Error: couldn't send email";

        return "<?h1 $ML{'/lostinfo_do.bml.password_mailed.title'} h1?>\n" .
               "<?p $ML{'/lostinfo_do.bml.password_mailed.text'} p?>";
    }

    if ($POST{'lostuser'}) {

        return LJ::bad_input( $captcha_error ) unless
            $captcha->validate( err_ref => \$captcha_error );

        my $sendto = "";
        my $email = LJ::trim($POST{'email_u'});
        return LJ::bad_input($ML{'.error.no_email'})
            unless $email;

        my @users;
        foreach my $uid ( LJ::User->accounts_by_email( $email ) ) {
            my $u = LJ::load_userid($uid);
            next if !$u || $u->is_expunged;  # not purged

            # As the idea is to limit spam to one e-mail address, if any of their username's are
            # over the limit, then don't send them any more e-mail.
            return LJ::bad_input($ML{'.error.toofrequent'}) unless $u->rate_log( "lostinfo", 1 );
            push @users, $u->display_name;
        }

        return LJ::bad_input(BML::ml('/lostinfo_do.bml.error.no_usernames_for_email',
                                     { 'address' => LJ::ehtml($email) || 'none' }))
            unless @users;

        # we have valid usernames, build email body
        my $body;
        my $userlist = join "\n          ", @users;
        my $ip = BML::get_remote_host() . "(" . BML::get_remote_ip() . ")";

        $body = LJ::Lang::ml( ".email.body", {
                sitename => $LJ::SITENAME,
                emailaddress  => $email,
                usernames => $userlist,
                remoteip => $ip,
                siteurl => $LJ::SITEROOT
            } );

        LJ::send_mail({
            'to' => $email,
            'from' => $LJ::ADMIN_EMAIL,
            'fromname' => $LJ::SITENAME,
            'charset' => 'utf-8',
            'subject' => LJ::Lang::ml( ".email.subject" ),
            'body' => $body,
        }) or die "Error: couldn't send email";

        return "<?h1 $ML{'/lostinfo_do.bml.username_mailed.title'} h1?>\n" .
               "<?p $ML{'/lostinfo_do.bml.username_mailed.text'} p?>";
    }

    # post, but they didn't press a button?
    return $ML{'error.nobutton'};
}
_code?>
<=body
page?>
