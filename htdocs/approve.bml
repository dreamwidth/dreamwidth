<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?_info
nocache=>1
_info?><?page
title=><?_ml .title _ml?>

body<=
<?_code
{
    use strict;

    my $qs = BML::get_query_string();
    return LJ::bad_input($ML{'.error.invalidargument'})
        unless $qs && $qs =~ /^(\d+)\.(.+)$/;

    my ($aaid, $auth) = ($1, $2);
    my $aa = LJ::is_valid_authaction($aaid, $auth);
    return LJ::bad_input($ML{'.error.invalidargument'})
        unless $aa;
    return LJ::bad_input($ML{'.error.actionperformed'})
        if $aa->{'used'} eq 'Y';

    my $arg = {};
    LJ::decode_url_string($aa->{'arg1'}, $arg);

    ### perform actions according to the action type

    # approve someone joining a community
    if ($aa->{action} eq 'comm_join_request') {
        my $dbh = LJ::get_db_writer();

        # get user we're adding
        my $targetu = LJ::load_userid( $arg->{targetid} );
        return LJ::bad_input($ML{'.error.internerr.invalidaction'}) unless $targetu;

        # add to community
        return "<?h1 $ML{'Error'} h1?><?p $ML{'.error.approving'} p?>"
            unless my $cu = LJ::load_userid( $aa->{userid} );
        return "<?h1 $ML{'Error'} h1?><?p $ML{'.error.approving'} p?>"
            unless $cu->approve_pending_member( $targetu );

        # return success
        return "<?h1 $ML{'.comm.success'} h1?>".
               '<?p ' . BML::ml('.commjoin.text', {
                           user => $targetu->ljuser_display,
                           comm => $cu->ljuser_display,
                           aopts => "href=\"" . $cu->community_manage_members_url . "\"",
                        }) . ' p?>';
    }

    # not other action types right now
    return LJ::bad_input($ML{'.error.unknownactiontype'});
}
_code?>

<=body
page?>
