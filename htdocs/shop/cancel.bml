<?_c

#
# shop/cancel.bml
#
# This page cancels the given order.
#
# Authors:
#      Janine Smith <janine@netrophic.com>
#
# Copyright (c) 2009 by Dreamwidth Studios, LLC.
#
# This program is free software; you may redistribute it and/or modify it under
# the same terms as Perl itself.  For a copy of the license, please reference
# 'perldoc perlartistic' or 'perldoc perlgpl'.
#

_c?><?page
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST);

    return BML::redirect( "$LJ::SITEROOT/" )
        unless LJ::is_enabled( 'payments' );

    my ( $ordernum, $token, $payerid ) = ( $GET{ordernum}, $GET{token}, $GET{PayerID} );
    my ( $cart, $eng );

    # use ordernum if we have it, otherwise use token/payerid
    if ( $ordernum ) {
        $cart = DW::Shop::Cart->get_from_ordernum( $ordernum );
        return $ML{'.error.invalidordernum'}
            unless $cart;

        my $paymentmethod = $cart->paymentmethod;
        my $paymentmethod_class = 'DW::Shop::Engine::' . $DW::Shop::PAYMENTMETHODS{$paymentmethod}->{class};
        $eng = $paymentmethod_class->new_from_cart( $cart );
        return $ML{'.error.invalidcart'}
            unless $eng;
    } else {
        return $ML{'.error.needtoken'}
            unless $token;

        # we can assume paypal is the engine if we have a token
        $eng = DW::Shop::Engine::PayPal->new_from_token( $token );
        return $ML{'.error.invalidtoken'}
            unless $eng;

        $cart = $eng->cart;
        $ordernum = $cart->ordernum;
    }

    # cart must be in open state
    return BML::redirect( "$LJ::SITEROOT/shop/receipt?ordernum=$ordernum" )
        unless $cart->state == $DW::Shop::STATE_OPEN;

    # cancel payment and discard cart
    if ( $eng->cancel_order ) {
        return BML::redirect( "$LJ::SITEROOT/shop?newcart=1" );
    }

    return $ML{'.error.cantcancel'};
}
_code?>
<=body
page?>
