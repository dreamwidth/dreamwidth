<?_c

#
# shop/confirm.bml
#
# The page used to confirm a user's order before we finally bill them.
#
# Authors:
#      Mark Smith <mark@dreamwidth.org>
#      Janine Smith <janine@netrophic.com>
#
# Copyright (c) 2009-2010 by Dreamwidth Studios, LLC.
#
# This program is free software; you may redistribute it and/or modify it under
# the same terms as Perl itself.  For a copy of the license, please reference
# 'perldoc perlartistic' or 'perldoc perlgpl'.
#

_c?><?page
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST $title);

    return BML::redirect( "$LJ::SITEROOT/" )
        unless LJ::is_enabled( 'payments' );

    $title = $ML{'.title'};

    my $err = DW::Shop->remote_sysban_check;
    return $err if $err;

    my ( $ordernum, $token, $payerid ) = ( $GET{ordernum}, $GET{token}, $GET{PayerID} );
    my ( $cart, $eng, $paymentmethod );

    # use ordernum if we have it, otherwise use token/payerid
    if ( $ordernum ) {
        $cart = DW::Shop::Cart->get_from_ordernum( $ordernum );
        return $ML{'.error.invalidordernum'}
            unless $cart;

        $paymentmethod = $cart->paymentmethod;
        my $paymentmethod_class = 'DW::Shop::Engine::' . $DW::Shop::PAYMENTMETHODS{$paymentmethod}->{class};
        $eng = $paymentmethod_class->new_from_cart( $cart );
        return $ML{'.error.invalidcart'}
            unless $eng;
    } else {
        return $ML{'.error.needtoken'}
            unless $token;

        # we can assume paypal is the engine if we have a token
        $eng = DW::Shop::Engine::PayPal->new_from_token( $token );
        return $ML{'.error.invalidtoken'}
            unless $eng;

        $cart = $eng->cart;
        $ordernum = $cart->ordernum;
        $paymentmethod = $cart->paymentmethod;
    }

    # cart must be in open state
    return BML::redirect( "$LJ::SITEROOT/shop/receipt?ordernum=$ordernum" )
        unless $cart->state == $DW::Shop::STATE_OPEN;

    # check email early so we can re-render the form on error
    my ( $email_checkbox, @email_errors );
    if ( LJ::did_post() ) {
        LJ::check_email( $POST{email}, \@email_errors, \%POST, \$email_checkbox );
    }

    # if they didn't post, give them a form
    if ( ! LJ::did_post() || @email_errors ) {
        # set the payerid for later
        $eng->payerid( $payerid )
            if $payerid;

        my $ret = '';
        $ret .= LJ::Widget::ShopCart->render( confirm => 1, cart => $cart );
        $ret .= "<form method='post' action='$LJ::SITEROOT/shop/confirm?ordernum=$ordernum'>\n";
        $ret .= LJ::form_auth();
        if ( $cart->total_cash > 0.00 ) {
            $ret .= "<?p " . BML::ml( '.confirm', { sitename => $LJ::SITENAME, total => '<strong>' . $cart->display_total_cash . '</strong>' } ) . " p?>";
            $ret .= "<?p $ML{\".confirm.$paymentmethod\"} p?>";
        } elsif ( $cart->total_points > 0 ) {
            $ret .= "<?p " . BML::ml( '.confirm.onlypoints', { sitename => $LJ::SITENAME } ) . " p?>";
        }

        # get their email address if they're not logged in
        unless ( $cart->userid ) {
            $ret .= "<?p $ML{'.confirm.email'} p?>";
            $ret .= "<?p $ML{'.confirm.email.label'} " . LJ::html_text( { name => 'email', value => $POST{email} } ) . " p?>";
            if ( @email_errors ) {
                $ret .= "<div class='error-box'><?p " . join( '<br />', @email_errors ) . " p?>";
                if ( $email_checkbox ) {
                    $ret .= "<?p $email_checkbox p?>";
                }
                $ret .= "</div>";
            }
        }

        $ret .= "<?p " . LJ::html_submit( confirm => $ML{'.btn.confirm'} );
        $ret .= " <a href='$LJ::SITEROOT/shop/cancel?ordernum=$ordernum'>$ML{'.btn.cancel'}</a> p?>";
        $ret .= '</form>';
        return $ret;
    }

    # okay, they posted, verify the auth code
    return $ML{'error.invalidauth'}
        unless LJ::check_form_auth();

    if ( $cart->userid ) {
        my $u = LJ::load_userid( $cart->userid );
        $cart->email( $u->email_raw );
    } else {
        # email checked above
        $cart->email( $POST{email} );
    }

    # and now set the state, this has been checked out...
    $cart->state( $DW::Shop::STATE_CHECKOUT );

    # they want to pay us, yippee!
    my $rv = $eng->confirm_order;
    return $eng->errstr
        unless $rv;

    my $ret;

    # advise them the order has been placed and to watch their email
    if ( $rv == 1 ) {
        $ret .= "<?p $ML{\".success.$paymentmethod.immediate\"} p?>";
    } elsif ( $rv == 2 ) {
        my $address = "<?p $LJ::SITECOMPANY<br />Order #" . $cart->id . "<br />$LJ::SITEADDRESS p?>";
        $ret .= "<?p " . BML::ml( ".success.$paymentmethod.processing", { sitecompany => "<strong>$LJ::SITECOMPANY</strong>", address => $address } ) . " p?>";
    }

    $ret .= "<?p <a href='$LJ::SITEROOT/shop/receipt?ordernum=$ordernum'>$ML{'.btn.viewreceipt'}</a><br />";
    $ret .= "<a href='$LJ::SITEROOT/shop'>$ML{'.btn.back'}</a> p?>";

    return $ret;
}
_code?>
<=body
title=><?_code return $title; _code?>
page?>
