<?_c
#!/usr/bin/perl
#
# /shop/gifts.bml
#
# Provides a list of users in your Circle who might want a paid account.
#
# Authors:
#      Denise Paolucci <denise@dreamwidth.org>
#
# Copyright (c) 2009 by Dreamwidth Studios, LLC.
#
# This program is free software; you may redistribute it and/or modify it under
# the same terms as Perl itself.  For a copy of the license, please reference
# 'perldoc perlartistic' or 'perldoc perlgpl'.
#
_c?><?page
body<=
<?_code
{
    use strict;
    use vars qw/ %GET %POST $title /;


    # translated/custom page title can go here
    $title = LJ::Lang::ml( '.title', { sitename => $LJ::SITENAMESHORT } );

    # for pages that require authentication
    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my ( $ret, @free, @expired, @expiring, @paid, @seed );

    my $circle = LJ::load_userids( $remote->circle_userids );

    foreach my $target ( values %$circle ) {

        if ( ( $target->is_person || $target->is_community ) && $target->is_visible ) {
            my $paidstatus = DW::Pay::get_paid_status( $target );

            # account was never paid if it has no paidstatus row:
            push @free, $target unless defined $paidstatus;

            if ( defined $paidstatus ) {
                if ( $paidstatus->{permanent} ) {
                    push @seed, $target;
                } else {
                    # account is expired if the expiration date has passed:
                    push @expired, $target unless $paidstatus->{expiresin} > 0;

                    # account is expiring soon if the expiration time is
                    # within the next month:
                    push @expiring, $target if $paidstatus->{expiresin} < 2592000
                                            && $paidstatus->{expiresin} > 0;

                    # account is expiring in more than one month:
                    push @paid, $target if $paidstatus->{expiresin} >= 2592000;
                }
            }
        }
    }


    # now that we have the lists, sort them alphabetically by display name:
    my $display_sort = sub { $a->display_name cmp $b->display_name };
    @free     = sort $display_sort @free;
    @expired  = sort $display_sort @expired;
    @expiring = sort $display_sort @expiring;
    @paid     = sort $display_sort @paid;
    @seed     = sort $display_sort @seed;

    # and we've got our lists. the only thing left is to format them
    # for human display, so we:

    # define a subroutine for formatting each list item:
    my $list_item = sub {
        my ( $person, %opts ) = @_;
        my $ret = '';

        $ret .= "<li>" . $person->ljuser_display . ": " . $person->name_html;
        $ret .= ", " . $person->last_updated;

        unless ( $opts{no_paid_time} ) {
            $ret .= " [<a href='" . $person->gift_url . "'>";
            $ret .= LJ::Lang::ml( '.buy.gift' ) . "</a>]";
        }

        if ( $person->is_personal ) {
            $ret .= " [<a href='" . $person->gift_points_url . "'>";
            $ret .= LJ::Lang::ml( '.buy.points' ) . "</a>]";
        }

        if ( $person->is_personal && ! $person->equals( $remote ) ) {
            $ret .= " [<a href='" . $person->transfer_points_url . "'>";
            $ret .= LJ::Lang::ml( '.buy.points.transfer' ) . "</a>]";
        }
        $ret .= "</li>\n";

        return $ret;
    };

    # build a list of free users in the circle, formatted with
    # the display username and a buy-a-gift link:
    # sort into two lists depending on whether it's a personal or community account
    my ( $freeusers, $freecommunities ) = ( '', '' );
    foreach my $person ( @free ) {
        my $linked = $list_item->( $person );
        if ( $person->is_personal ) {
            $freeusers .= $linked;
        } else {
            $freecommunities .= $linked;
        }
    }

    # build a list of expiring-soon users in the circle, formatted with
    # the display username and a buy-a-gift link:
    my $expusers = join '', map { $list_item->( $_ ) } @expiring;

    # do the same with the expired users
    my $lapsedusers = join '', map { $list_item->( $_ ) } @expired;

    # do the same with the paid users
    my $paidusers = join '', map { $list_item->( $_ ) } @paid;

    # do the same with seed users
    my $seedusers = join '', map { $list_item->( $_, no_paid_time => 1 ) } @seed;

    # and, now we build the page.
    $ret .= "<p>";
    $ret .= LJ::Lang::ml( '.about', { sitename => $LJ::SITENAMESHORT } );
    $ret .= "</p>";

    unless ( $freeusers || $freecommunities || $expusers || $lapsedusers ) {
        my $none = $paidusers ? '.none.free.text' : '.none.text';
        $ret .= "<p>";
        $ret .= LJ::Lang::ml( $none, { sitename => $LJ::SITENAMESHORT,
                                       aopts => "href='$LJ::SITEROOT/shop/'" } );
        $ret .= "</p>";
    }

    if ( $freeusers || $freecommunities ) {
        $ret .= "<h2>" . LJ::Lang::ml( '.free.header' ) . "</h2>\n";
        $ret .= "<p>";
        $ret .= LJ::Lang::ml( '.free.about',
                { aopts => "href='$LJ::SITEROOT/support/faqbrowse?faqid=153'" } );
        $ret .= "</p>";

        #build different lists for personal and community accounts
        if ( $freeusers ) {
            $ret .= "<h3>" . LJ::Lang::ml( '.free.header.personal' ) . "</h3>\n";
            $ret .= "<ul> " . $freeusers . "</ul><br />";
        }
        if ( $freecommunities ){
            $ret .= "<h3>" . LJ::Lang::ml( '.free.header.communities' ) . "</h3>\n";
            $ret .= "<ul> " . $freecommunities . "</ul>";
        }
        $ret .= "<br />";
    }

    if ( $lapsedusers ) {
        $ret .= "<h2>" . LJ::Lang::ml( '.paid.header.lapsed' ) . "</h2>\n";
        $ret .= "<p>" . LJ::Lang::ml( '.paid.lapsed.about' ) . "</p>";
        $ret .= "<ul> " . $lapsedusers . "</ul>";
        $ret .= "<br />";
    }

    if ( $expusers ) {
        $ret .= "<h2>" . LJ::Lang::ml( '.paid.header.soon' ) . "</h2>\n";
        $ret .= "<p>" . LJ::Lang::ml( '.paid.soon.about' ) . "</p>";
        $ret .= "<ul> " . $expusers . "</ul>";
        $ret .= "<br />";
    }

    if ( $paidusers ) {
        $ret .= "<h2>" . LJ::Lang::ml( '.paid.header.other' ) . "</h2>\n";
        $ret .= "<p>" . LJ::Lang::ml( '.paid.other.about' ) . "</p>";
        $ret .= "<ul> " . $paidusers . "</ul>";
        $ret .= "<br />";
    }

    if ( $seedusers ) {
        $ret .= "<h2>" . LJ::Lang::ml( '.seed.header' ) . "</h2>\n";
        $ret .= "<p>" . LJ::Lang::ml( '.seed.about' ) . "</p>";
        $ret .= "<ul> " . $seedusers . "</ul>";
    }

    return $ret;
}
_code?>
<=body
title=><?_code return $title; _code?>
page?>
