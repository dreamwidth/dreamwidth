<?_c
#
# shop/creditcard_wait.bml
#
# This page is a fairly simple "please wait while we try to charge you" page that
# refreshes every 5 seconds until we have gotten a result.
#
# Authors:
#      Mark Smith <mark@dreamwidth.org>
#
# Copyright (c) 2010 by Dreamwidth Studios, LLC.
#
# This program is free software; you may redistribute it and/or modify it under
# the same terms as Perl itself. For a copy of the license, please reference
# 'perldoc perlartistic' or 'perldoc perlgpl'.
#
_c?><?page
body<=
<?_code
{
    use strict;
    use vars qw/ %GET $title $head /;

    return BML::redirect( "$LJ::SITEROOT/" )
        unless LJ::is_enabled( 'payments' );

    $head = '';
    $title = $ML{'.title'};

    # this page uses new style JS
    LJ::need_res( 'stc/shop.css' );
    LJ::set_active_resource_group( 'jquery' );

    # see they got here ok
    my $onum = $GET{ordernum};
    my $cctransid = $GET{cctransid}+0;

    # get their shop/cart
    my $cart = DW::Shop::Cart->get_from_ordernum( $onum );
    return $ML{'.error.nocart'}
        unless $cart;

    # establish the engine they're trying to use
    my $eng = DW::Shop::Engine->get( creditcard => $cart );
    return $ML{'.error.invalidpaymentmethod'}
        unless $eng;

    # get the row
    my $row = $eng->get_transaction( $cctransid );
    die "Row not for cart, that's no good!\n" # trying to spoof us?
        unless $row && $row->{cctransid} == $cctransid &&
               $row->{cartid} == $cart->id;

    # if it failed, redirect back to the cart, but print
    # a different error message if it was flagged as a duplicate
    if ( $row->{jobstate} eq 'failed' ) {
        my $errtype = $row->{responsetext} =~ /^Duplicate transaction /
                      ? 'duplicate' : 'failed';
        return BML::redirect( "$LJ::SITEROOT/shop/cart?$errtype=1" );
    }

    # if we're still queued, set the refresh
    $head = q{<meta http-equiv="refresh" content="3" />}
        if $row->{jobstate} eq 'queued';

    # looks good, see what status things are in...
    $title = $ML{'.title.' . $row->{jobstate}} || $ML{'Error'};
    return $ML{'.state.' . $row->{jobstate}}
        if $row->{jobstate} =~ /^(?:paid|queued|internal_failure)$/;

    # another state??
    die "Sorry, unknown state: $row->{jobstate}.\n";
}
_code?>
<=body
title=><?_code return $title; _code?>
head=><?_code return $head; _code?>
page?>
