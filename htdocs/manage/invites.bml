<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=><?_ml .title2 _ml?>
body<=
<?_code
{
    use strict;
    use vars qw(%POST);

    my $remote = LJ::get_remote();
    return "<?needlogin?>"
        unless $remote;

    LJ::need_res('stc/invites.css');

    # for now, assume we're operating on $remote.  maybe in the future we'll be able to
    # manage other P type accounts, but we can't yet
    my $u = $remote;

    return $LJ::MSG_READONLY_USER
        if $u->is_readonly;

    # always have links at top
    my $ret;

    # get pending invites
    my $pending = $u->get_pending_invites || [];

    # short out?
    return "<?p $ML{'.none.body'} p?>"
        unless @$pending;

    # load communities and maintainers
    my @ids;
    push @ids, ($_->[0], $_->[1]) foreach @$pending;
    my $us = LJ::load_userids(@ids);

    # all possible attributes
    my @allattribs = ('member', 'post', 'preapprove', 'moderate', 'admin');

    # see if they posted and if we should take actions
    if (LJ::did_post()) {
        return "<?h2 $ML{'Error'} h2?><?p $ML{'error.invalidform'} p?>"
            unless LJ::check_form_auth();

        my (@accepted, @rejected, @undecided);
        foreach my $invite (@$pending) {
            my ($commid, $maintid, $date, $argline) = @$invite;
            my $args = {};
            LJ::decode_url_string($invite->[3], $args);

            # now take actions?
            if ($POST{"pending_$commid"} eq 'yes') {
                my $rval = $u->accept_comm_invite( $us->{$commid} );
                push @accepted, [ $commid, $args ] if $rval;
            } elsif ($POST{"pending_$commid"} eq 'no') {
                my $rval = $u->reject_comm_invite( $us->{$commid} );
                push @rejected, $commid if $rval;
            } else {
                push @undecided, $commid;
            }
        }
        $ret .= "<?h1 $ML{'.success.head'} h1?>";
        # communities they've joined
        if (@accepted) {
            $ret .= "<?h2 $ML{'.accepted.title'} h2?><?p $ML{'.accepted.body2'} p?><dl>";
            foreach my $row (@accepted) {
                $ret .= "<dd>" . LJ::ljuser($us->{$row->[0]}, { type => 'C' }) . ": ";
                foreach my $attrib (@allattribs) {
                    $ret .= "$ML{\".label.$attrib\"}, " if $row->[1]{$attrib};
                }
                chop $ret; chop $ret;
                $ret .= "</dd>\n";
            }
            $ret .= "</dl><br />";
        }

        # communities they rejected
        if (@rejected) {
            $ret .= "<?h2 $ML{'.rejected.title'} h2?><?p $ML{'.rejected.body2'} p?><dl>";
            $ret .= "<dd>" . LJ::ljuser($us->{$_}, { type => 'C' }) . "</dd>\n" foreach @rejected;
            $ret .= "</dl><br />";
        }

        # now print out undecided results
        if (@undecided) {
            $ret .= "<?h2 $ML{'.undecided.title'} h2?><?p $ML{'.undecided.body2'} p?><dl>";
            $ret .= "<dd>" . LJ::ljuser($us->{$_}, { type => 'C' }) . "</dd>\n" foreach @undecided;
            $ret .= "</dl><br />";
        }
        $ret .= "<?p $ML{'.success.fromhere'} p?>";
        $ret .= "<ul>";
            if (@undecided) {
                $ret .= "<li><a href='$LJ::SITEROOT/manage/invites'>$ML{'.success.manageinvites'}</a></li>";
            }
        $ret .= "<li><a href='" . $u->journal_base . "/read'>$ML{'.success.readingpage'}</a></li>";
        $ret .= "<li><a href='$LJ::SITEROOT/manage/circle/edit'>$ML{'.success.managecircle'}</a></li>";
        $ret .= "<li><a href='$LJ::SITEROOT/communities/list'>$ML{'.success.managecomm'}</a></li>";
        $ret .= "</ul>";
        return $ret;
    }

    # prepare table
    $ret .= "<?p $ML{'.pending.body'} p?><br />";
    $ret .= "<form method='post'>\n<div align='center'><table id='invites-list' cellspacing='0' cellpadding='0'>";
    $ret .= LJ::form_auth();
    $ret .= "<thead><tr><th>$ML{'.community.title'}</th><th>$ML{'.abilities.title2'}</th>";
    $ret .= "<th colspan='2'>$ML{'.answer.title'}</th>";
    $ret .= "</tr></thead>";

    # now list memberships
    my $rc = 0;
    foreach my $invite (@$pending) {
        # get variables we'll need for HTML generation
        my $rstyle = ($rc++ & 1) ? "even" : "odd";
        my $cu = $us->{$invite->[0]};
        my $key = "pending_$invite->[0]";
        my @tags = ();
        my $args = {};
        LJ::decode_url_string($invite->[3], $args);
        foreach (@allattribs) {
            push @tags, $ML{".label.$_"} if $args->{$_};
        }
        my $ename = LJ::ehtml($cu->{name});
        my $date = LJ::mysql_time($invite->[2]);

        # now generate HTML
        $ret .= "<tr class='$rstyle'><td class='invite-info'>" . LJ::ljuser($cu, { type => 'C' });
        $ret .= "<br />$ename</br />";
        $ret .= "<span class='invite-from'>";
        $ret .= BML::ml('.from', { user => LJ::ljuser($us->{$invite->[1]}, { type => 'P' }) });
        $ret .= "<br />" . BML::ml('.date', { date => $date });
        $ret .= "</span></td>";
        $ret .= "<td>" . join(', ', @tags) . "</td>";
        $ret .= "<td class='invite-accept'>" . LJ::html_check({ type => 'radio', name => $key, id => "yes$key", value => 'yes' });
        $ret .= " <label for='yes$key'>$ML{'.accept'}</label></td>\n";
        $ret .= "<td class='invite-decline'>" . LJ::html_check({ type => 'radio', name => $key, id => "no$key", value => 'no' });
        $ret .= " <label for='no$key'>$ML{'.decline'}</label></td>";
        $ret .= "</tr>";
    }

    # all done
    $ret .= "</table><br />";
    $ret .= "<div class='action-box'><ul class='nostyle inner'><li>" . LJ::html_submit('submit', $ML{'.submit2'}) . "</li></ul></div><div class='clear-floats'></div>";
    $ret .= "</div></form>";

    return $ret;

} _code?>
<=body
page?>
