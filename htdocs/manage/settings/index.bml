<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST $title $windowtitle $headextra @errors @warnings);

    BML::set_language_scope('/manage/settings/index.bml');

    LJ::need_res("stc/tabs.css", "stc/settings.css", "js/settings.js");
    LJ::set_active_crumb('manage');

    my $remote = LJ::get_remote();
    my $authas;
    my $u;

    if ($remote) {
        $authas = $GET{authas} || $remote->user;
        $u = LJ::get_authas_user($authas);
        return LJ::bad_input($ML{'error.invalidauth'})
            unless $u;
    }

    my @cats_order = qw(
        account
        display
        notifications
        mobile
        privacy
        history
        othersites
    );

    # the different navigation categories and their settings
    my %cats_with_settings = (
        account => {
            name => $ML{'.cat.account'},
            visible => 1,
            disabled => !$u ? 1 : 0,
            form => 0,
            desc => $ML{'.cat.account.desc'},
            settings => [qw(
                DW::Setting::Display::AccountLevel
                LJ::Setting::Display::AccountStatus
                LJ::Setting::Display::Email
                LJ::Setting::Display::Password
                LJ::Setting::Display::DomainMapping
            )],
        },
        display => {
            name => $ML{'.cat.display'},
            visible => 1,
            disabled => 0,
            form => 1,
            desc => $ML{'.cat.display.desc'},
            settings => [qw(
                LJ::Setting::TimeZone
                DW::Setting::TimeFormat
                LJ::Setting::ImagePlaceholders
                LJ::Setting::EmbedPlaceholders
                DW::Setting::CutDisable
                DW::Setting::CutInbox
                LJ::Setting::EmailFormat
                LJ::Setting::EntryEditor
                DW::Setting::JournalEntryStyle
                DW::Setting::JournalIconsStyle
                DW::Setting::ViewEntryStyle
                DW::Setting::ViewIconsStyle
                DW::Setting::ViewJournalStyle
                LJ::Setting::NavStrip
                LJ::Setting::NCTalkLinks
                LJ::Setting::StyleMine
                DW::Setting::DisplayEchi
                LJ::Setting::CtxPopup
                LJ::Setting::AdultContent
                DW::Setting::AdultContentReason
                LJ::Setting::ViewingAdultContent
                LJ::Setting::SafeSearch
                DW::Setting::GoogleAnalytics
                DW::Setting::ExcludeOwnStats
                DW::Setting::StickyEntry
                LJ::Setting::SiteScheme
            )],
        },
        notifications => {
            name => $ML{'.cat.notifications'},
            visible => 1,
            disabled => !$u || $u->is_community ? 1 : 0,
            form => 1,
            desc => BML::ml( '.cat.notifications.desc', { aopts => "href='$LJ::SITEROOT/manage/circle/edit'" } ),
            settings => [],
        },
        mobile => {
            name => $ML{'.cat.mobile'},
            visible => 1,
            disabled => !$u || $u->is_community ? 1 : 0,
            form => 1,
            desc => $ML{'.cat.mobile.desc'},
            settings => [qw(
                LJ::Setting::EmailPosting
                DW::Setting::TxtMsgSetup
            )],
        },
        privacy => {
            name => $ML{'.cat.privacy'},
            visible => 1,
            disabled => !$u ? 1 : 0,
            form => 1,
            desc => $ML{'.cat.privacy.desc'},
            settings => [qw(
                DW::Setting::EmailAlias
                DW::Setting::ContactInfo
                LJ::Setting::UserMessaging
                LJ::Setting::MinSecurity
                DW::Setting::SynLevel
                LJ::Setting::SearchInclusion
                LJ::Setting::EnableComments
                LJ::Setting::CommentScreening
                LJ::Setting::CommentCaptcha
                DW::Setting::Captcha
                LJ::Setting::CommentIP
                LJ::Setting::Display::BanUsers
                DW::Setting::AllowVgiftsFrom
                DW::Setting::RandomPaidGifts
                DW::Setting::GlobalSearch
                DW::Setting::AllowSearchBy
                DW::Setting::CommunityPromo
            )],
        },
        history => {
            name => $ML{'.cat.history'},
            visible => 1,
            disabled => !$u || $u->is_community ? 1 : 0,
            form => 0,
            desc => $ML{'.cat.history.desc'},
            settings => [qw(
                LJ::Setting::Display::Logins
                LJ::Setting::Display::Emails
                LJ::Setting::Display::EmailPosts
                LJ::Setting::Display::Orders
                DW::Setting::Display::OpenIDClaim
            )],
        },
        othersites => {
            name => $ML{'.cat.othersites'},
            visible => 1,
            disabled => !$u || $u->is_community ? 1 : 0,
            form => 1,
            desc => $ML{'.cat.othersites.desc'},
            settings => [qw(
                DW::Setting::XPostAccounts
             )],

        },
    );

    LJ::Hooks::run_hook("settings_extra_cats", \@cats_order, \%cats_with_settings, user => $u);

    my $given_cat = $GET{cat};
    if ($u) {
        $given_cat = "account"
            unless defined $cats_with_settings{$given_cat} &&
                   $cats_with_settings{$given_cat}->{visible} &&
                   !$cats_with_settings{$given_cat}->{disabled};
    } else {
        $given_cat = "display";
    }

    my @settings = @{$cats_with_settings{$given_cat}->{settings}};

    # remove any settings that don't exist for this category
    my $remove_setting = sub {
        my $el_ref = shift;

        splice(@settings, $$el_ref, 1);
        $$el_ref--;
    };
    for (my $i = 0; $i < scalar @settings; $i++) {
        my $setting = $settings[$i];

        if (eval "use $setting; 1;") {
            $remove_setting->(\$i) unless $setting->should_render($u);
        } else {
            $remove_setting->(\$i);
        }
    }

    my $save_rv;
    my $submit_msg;
    if (LJ::did_post()) {
        return LJ::bad_input($ML{'error.invalidform'})
            unless LJ::check_form_auth();

        if ( $given_cat eq "notifications" && $POST{deleteinactive} ) {
            $u->delete_all_inactive_subscriptions;
            $submit_msg .= "<?errorbar $ML{'.success.deleteinactive2'} errorbar?><br />";
        } elsif ( $given_cat eq "notifications" ) {
            my @notif_errors;

            # do they want to add or edit subscriptions?
            next unless $POST{mode} eq 'save_subscriptions';

            my @sub_edit;
            my @to_consider;
            my @to_activate;

            foreach my $postkey (keys %POST) {
                my $subscr;
                my $old_postkey = $postkey;
                my $old = $postkey =~ /-old$/;

                # are there other options for this pending subscription? if so, process those not this one
                next if $postkey =~ /\.arg\d/;

                $subscr = LJ::Subscription->thaw($postkey, $u, \%POST) or next;

                if ($subscr->pending) {
                    push @to_consider, $subscr;
                } else {
                    push @to_activate, $subscr if !$old && !$subscr->active;
                }

                # remove old string
                $postkey =~ s/-old// if $old;

                next unless $old;

                my $oldvalue = $POST{$old_postkey};
                my $checked = $POST{$postkey};

                push @sub_edit, [
                                 $subscr,
                                 $checked,
                                 $oldvalue,
                                 ];
            }

            # first process deletions
            foreach my $edit_info (@sub_edit) {
                my ($subscr, $checked, $oldvalue) = @$edit_info;

                if (!$checked && $oldvalue && $subscr->method->configured_for_user($u)) {
                    # if it's not checked and is currently a real subscription, deactivate it
                    # unless we disabled it for them (disabled checkboxes don't POST)
                    $subscr->deactivate;
                }
            }

            # then process new subs and activations
            foreach my $subscr (@to_activate) {
                my @inbox_subs = grep { $_->active && $_->enabled } $u->find_subscriptions(method => 'Inbox');

                if ((scalar @inbox_subs) >= $u->max_subscriptions) {
                    # too many, sorry
                    push @notif_errors, LJ::errobj("Subscription::TooMany", subscr => $subscr, u => $u);
                } else {
                    # all is good, reactivate it
                    $subscr->activate;
                }
            }

            # Define limits
            my $paid_max = LJ::get_cap('paid', 'subscriptions');
            my $u_max  = $u->max_subscriptions;
            # max for total number of subscriptions (generally it is $paid_max)
            my $system_max  = $u_max > $paid_max ? $u_max : $paid_max;

            my $inbox_ntypeid = LJ::NotificationMethod::Inbox->ntypeid;
            my @other_ntypeid_to_consider;

            # process new inbox subs
            foreach my $subscr (@to_consider) {
                # if this is not an inbox sub, check it
                if ($subscr->ntypeid != $inbox_ntypeid) {
                    push @other_ntypeid_to_consider, $subscr;
                } else {
                    # this is an inbox subscription, save it
                    my @all_subs = $u->find_subscriptions(method => 'Inbox');
                    my @active_subs = grep { $_->active && $_->enabled } @all_subs;

                    if (@active_subs >= $u_max) {
                        push @notif_errors, LJ::errobj("Subscription::TooMany", subscr => $subscr, u => $u);
                    } elsif (@all_subs >= $system_max) {
                        push @notif_errors, LJ::errobj("Subscription::TooManySystemMax", subscr => $subscr, u => $u, max => $system_max);
                    } else {
                        # save this for consideration after we've processed all inbox subscriptions first
                        $subscr->commit;
                    }
                }
            }

            # process all other new subs
            foreach my $subscr (@other_ntypeid_to_consider) {
                my %inbox_sub_params = $subscr->sub_info;
                # don't save a subscription if there is no corresponding inbox sub for it
                $inbox_sub_params{ntypeid} = $inbox_ntypeid;
                delete $inbox_sub_params{flags};

                my ($inbox_sub) = $u->has_subscription(%inbox_sub_params);

                # If Inbox is always on, then act like an Inbox sub exists
                my $always_checked = $subscr->event_class->always_checked ? 1 : 0;
                next if (!$always_checked && !($inbox_sub && $inbox_sub->active && $inbox_sub->enabled));

                my @all_subs = $u->find_subscriptions(method => $subscr->method);
                my @active_subs = grep { $_->active && $_->enabled } @all_subs;

                if (@active_subs >= $u_max) {
                    push @notif_errors, LJ::errobj("Subscription::TooMany", subscr => $subscr, u => $u);
                    next;
                } elsif (@all_subs >= $system_max) {
                    push @notif_errors, LJ::errobj("Subscription::TooManySystemMax", subscr => $subscr, u => $u, max => $system_max);
                    next;
                }

                $subscr->commit;
            }

            delete $u->{_subscriptions};

            return BML::redirect($POST{ret_url}) if $POST{ret_url} && !scalar @notif_errors;

            # save the LJ::Setting notifications too
            unless ($POST{post_to_settings_page}) {
                $save_rv = LJ::Setting->save_all($u, \%POST, \@settings);
            }

            if (scalar @notif_errors || LJ::Setting->save_had_errors($save_rv)) {
                $submit_msg .= LJ::error_list(@notif_errors) . "<br />";
            } else {
                $submit_msg .= "<?warningbar $ML{'.success'} warningbar?><br />";
            }
        } else {
            $save_rv = LJ::Setting->save_all($u, \%POST, \@settings);

            if (LJ::Setting->save_had_errors($save_rv)) {
                $submit_msg .= "<?errorbar $ML{'.errors'} errorbar?><br />";
            } else {
                $submit_msg .= "<?warningbar $ML{'.success'} warningbar?><br />";
            }
        }
    }

    if ($given_cat eq "notifications") {
        # look for deletions from GET
        my $deleted_subs = 0;
        foreach my $subscr ($u->subscriptions) {
            my $id = $subscr->id;
            next unless $id;

            if ($GET{"deletesub_$id"}) {
                $subscr->delete;
                $deleted_subs = 1;
            }
        }
        $submit_msg .= "<?warningbar $ML{'.success'} warningbar?><br />"
            if $deleted_subs;
    }

    my $ret = "<div id='settings_page'>";

    my ($getextra, $getsep) = ("", "?");
    $title = $windowtitle = $ML{'.title.self'};
    if ($u && $authas ne $remote->user) {
        $getextra = "?authas=$authas";
        $getsep = "&";
        $title = BML::ml('.title.comm', { user => $u->ljuser_display });
        $windowtitle = BML::ml('.title.comm', { user => $u->display_username });
    }

    if ($u) {
        $ret .= "<div id='authas_select'>";
        $ret .= "<form action='$LJ::SITEROOT/manage/settings/' method='get'>";
        $ret .= LJ::make_authas_select( $remote, { authas => $GET{authas}, showall => ( $given_cat eq "account" ) } );
        $ret .= LJ::html_hidden( cat => $given_cat );
        $ret .= "</form>";
        $ret .= "</div>";
    }

    # if they're working as a community, reproduce the community management linkbar:
    if ( $u && $u->is_community ) {
        my $linkbar;
        $linkbar = $u->maintainer_linkbar( "settingsaccount" );
        $ret .= "<p class='intro'>" . $linkbar . "</p>";
    }

    $ret .= "<p class='intro'>" . BML::ml('.intro3', { aopts1 => "href='$LJ::SITEROOT/manage/profile/$getextra'", aopts2 => "href='$LJ::SITEROOT/customize/$getextra'" }) . "</p>"
        if $u;

    $ret .= $submit_msg;

    $ret .= "<div id='settings_left'>";

    $ret .= "<ul class='tablist' id='settings_nav'>";
    foreach my $cat (@cats_order) {
        next unless $cats_with_settings{$cat}->{visible};

        if ($cats_with_settings{$cat}->{disabled}) {
            $ret .= "<li class='tab disabled'>$cats_with_settings{$cat}->{name}</li>";
        } else {
            my $active_class = $cat eq $given_cat ? " class='active'" : "";
            $ret .= "<li class='tab'><a href='$LJ::SITEROOT/manage/settings/$getextra${getsep}cat=$cat'$active_class>$cats_with_settings{$cat}->{name}</a></li>";
        }
    }
    $ret .= "</ul>";

    $ret .= "<div id='settings_nav_title' class='tab-header'><p>";
    $ret .= $cats_with_settings{$given_cat}->{desc};
    $ret .= "</p></div>";

    if ($cats_with_settings{$given_cat}->{form}) {
        my $confirm_msg = LJ::ejs($ML{'.form.confirm1'});
        $ret .= "<script>Settings.confirm_msg = \"$confirm_msg\";</script>";
        $ret .= "<form class='table-form' id='settings_form' action='$LJ::SITEROOT/manage/settings/$getextra${getsep}cat=$given_cat' method='post'>";
        $ret .= LJ::form_auth();
    }
    $ret .= "<div class='settings_content'>";
    $ret .= "<div class='$given_cat'>";

    if ($given_cat eq "notifications") {

        LJ::set_active_resource_group( 'jquery' );
        LJ::need_res( { group => 'jquery' }, 'js/notifications.js' );

        $ret .= "<div id='settings_save' class='action-bar'>";
        $ret .= $cats_with_settings{$given_cat}->{form} ? LJ::html_submit($ML{'.btn.save'}) : "&nbsp;";
        $ret .= "&nbsp;";
        my $del_conf = LJ::ejs( $ML{'.confirm.deleteinactive2'} );
        $ret .= LJ::html_submit( 'deleteinactive', $ML{'.btn.deleteinactive2'},
                                 {
                                   class => 'btn',
                                   title => $ML{'.btn.deleteinactive2'},
                                   onClick => "return confirm( '$del_conf' )"
                                 } );
        $ret .= "</div>";

        my $my_account_extra = LJ::Hooks::run_hook('subscriptions_manage_my_account_extra', $u);

        # set up default subscriptions for users that have not managed ESN stuff
        if (!$u->prop('esn_has_managed') && !$u->subscription_count) {
            $u->set_prop( esn_has_managed => 1 );

            my @default_subscriptions = (
                LJ::Subscription::Pending->new($u,
                    event => 'OfficialPost',
                ),
            );

            push @default_subscriptions, $my_account_extra
                if $my_account_extra;

            if ($u->prop('opt_gettalkemail') ne 'N') {
                push @default_subscriptions, (
                    LJ::Subscription::Pending->new($u,
                        event => 'JournalNewComment',
                        journal => $u,
                        method => 'Inbox',
                    ),

                    LJ::Subscription::Pending->new($u,
                        event => 'JournalNewComment',
                        journal => $u,
                        method => 'Email',
                    ),
                );
            }

            $_->commit foreach @default_subscriptions;
        }

        # Transalte legacy pre-ESN notifs to ESN notifs
        {
            my @pending_subscriptions;
            if ( $u->prop('opt_gettalkemail') ne 'X' ) {
                if ( $u->prop('opt_gettalkemail') eq 'Y' ) {
                    push @pending_subscriptions, map { (
                        # FIXME(dre): Remove when ESN can bypass inbox
                        LJ::Subscription::Pending->new($u,
                            event => 'JournalNewComment::Reply',
                            method => 'Inbox',
                            arg2 => $_,
                        ),
                        LJ::Subscription::Pending->new($u,
                            event => 'JournalNewComment::Reply',
                            method => 'Email',
                            arg2 => $_,
                        ),
                    ) } ( 0, 1 );
                }
                $u->update_self( { 'opt_gettalkemail' => 'X' } );
            }
            if ( $u->prop('opt_getselfemail') ne 'X' ) {
                if ( $u->prop('opt_getselfemail') eq '1' ) {
                    push @pending_subscriptions, (
                        # FIXME(dre): Remove when ESN can bypass inbox
                        LJ::Subscription::Pending->new($u,
                            event => 'JournalNewComment::Reply',
                            method => 'Inbox',
                            arg2 => 2,
                        ),
                        LJ::Subscription::Pending->new($u,
                            event => 'JournalNewComment::Reply',
                            method => 'Email',
                            arg2 => 2,
                        ),
                    );
                }
                $u->update_self( { 'opt_getselfemail' => 'X' } );
            }
            $_->commit foreach @pending_subscriptions;
        }

        my @categories = (
            {
                "My Account" => [
                    LJ::Subscription::Pending->new($u,
                        event => 'OfficialPost',
                    ),
                    LJ::Subscription::Pending->new($u,
                        event => 'JournalNewComment',
                        journal => $u,
                    ),

                    LJ::Subscription::Pending->new($u,
                        event => 'JournalNewComment::Reply',
                        arg2 => 0,
                    ),
                    LJ::Subscription::Pending->new($u,
                        event => 'JournalNewComment::Reply',
                        arg2 => 1,
                    ),
    
                    LJ::Subscription::Pending->new($u,
                        event => 'JournalNewComment::Reply',
                        arg2 => 2,
                    ),

                    LJ::Subscription::Pending->new($u,
                        event => 'PollVote',
                        journal => $u,
                    ),
                    'AddedToCircle',
                    'RemovedFromCircle',
                    LJ::Subscription::Pending->new($u,
                        event => 'XPostSuccess',
                        journal => $u,
                    ),
                    LJ::Subscription::Pending->new($u,
                        event => 'XPostFailure',
                        journal => $u,
                        default_selected => 1,
                    ),
                    LJ::Subscription::Pending->new($u,
                        event => 'UserMessageRecvd',
                        journal => $u,
                        default_selected => 1,
                    ),
                ],
            },
            {
                "Friends and Communities" => [
                    'InvitedFriendJoins',
                    'CommunityInvite',
                    'CommunityJoinRequest',
                    LJ::Subscription::Pending->new($u,
                        event => 'NewUserpic',
                    ),
                    LJ::Subscription::Pending->new($u,
                        event => 'Birthday',
                    ),
                    (LJ::Hooks::run_hook('subscriptions_manage_friend_pending_extra', $u) || ()),
                ],
            },
        );

        unshift @{$categories[0]->{'My Account'}}, $my_account_extra
            if $my_account_extra;

        $ret .= LJ::subscribe_interface($u,
            journal       => $u,
            categories    => \@categories,
            showtracking  => 1,
            settings_page => 1,
            num_per_page  => 250,
            page          => int( $GET{page} || 0 ),
        ) . "<br />";

    } else {
        my $setting_ct = 1;
        $ret .= "<table summary=''>";
        foreach my $setting (@settings) {
            my $errors = $setting->errors_from_save($save_rv);
            my $args = $setting->args_from_save($save_rv);

            my $label = $setting->label;
            my $option = $setting->option($u, $errors, $args, getargs => \%GET );
            my $actionlink = $setting->actionlink($u);
            my $helpicon = LJ::help_icon($setting->helpurl($u));
            my $last_class = $setting_ct == scalar @settings ? " last" : "";

            my $row_class = $setting_ct % 2 == 0 ? "even" : "odd";
            $ret .= "<tr class='$row_class'>";
            $ret .= "<th class='${given_cat}_label$last_class'>$label</th>" if $label;
            $ret .= "<td class='${given_cat}_option$last_class'>" . ($option ? $option : "&nbsp;") . "</td>";
            $ret .= "<td class='${given_cat}_actionlink$last_class'>" . ($actionlink ? $actionlink : "&nbsp;") . "</td>";
            $ret .= "<td class='help$last_class'>" . ($helpicon ? $helpicon : "&nbsp;") . "</td>";
            $ret .= "</tr>";

            $setting_ct++;
        }
        $ret .= "</table>";

        if ($given_cat eq "account") {
            my $account_stats = LJ::Hooks::run_hook("settings_account_stats", $u);
            if ($account_stats) {
                $ret .= "<div class='account_stats'>";
                $ret .= $account_stats;
                $ret .= "</div>";
            }
        }
    }

    $ret .= "</div>";
    $ret .= "</div>";

    $ret .= "<div id='settings_save' class='action-bar'>";
    $ret .= $cats_with_settings{$given_cat}->{form} ? LJ::html_submit($ML{'.btn.save'}) : "&nbsp;";
    if ( $given_cat eq "notifications" ) {
        $ret .= "&nbsp;";
        my $del_conf = LJ::ejs( $ML{'.confirm.deleteinactive2'} );
        $ret .= LJ::html_submit( 'deleteinactive', $ML{'.btn.deleteinactive2'}, {
            class => 'btn',
            title => $ML{'.btn.deleteinactive2'},
            onClick => "return confirm( '$del_conf' )"
            } );
    }
    $ret .= "</div>";
    $ret .= "</form>" if $cats_with_settings{$given_cat}->{form};

    $ret .= "</div>";

    $ret .= "</div>";

    return $ret;
}
_code?>
<=body
title=><?_code return $title; _code?>
windowtitle=><?_code return $windowtitle; _code?>
head<=
<?_code return $headextra; _code?>
<=head
page?>
