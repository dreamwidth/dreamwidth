<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
body<=
<?_code
{
    use strict;
    use vars qw (%POST %GET $body $title $headextra);
    use Carp qw(croak);
    use LJ::NotificationMethod;
    use LJ::Event;

    $title = 'Manage Message Settings';

    return "Not ready" unless LJ::is_enabled('esn');

    BML::decl_params(
                     lj_form_auth => qr/./,
                     journal      => 'word',
                     _default     => qr/./,
                     );

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $journal = LJ::load_user($GET{journal}) or return LJ::bad_input("No journal specified");

    return BML::redirect("$LJ::SITEROOT/manage/settings/?cat=notifications") if $remote->equals( $journal );

    # what classes to display on this page
    my $cat_title = 'Track User';
    my $categories = [ { $cat_title => [ ] }, ];

    push @{ @$categories[0]->{$cat_title} },
        LJ::Subscription::Pending->new( $remote,
            event   => "JournalNewEntry",
            arg1    => '?',
            journal => $journal,
            flags   => LJ::Subscription::TRACKING,
        ),
        LJ::Subscription::Pending->new( $remote,
            event   => "JournalNewEntry",
            journal => $journal,
            flags   => LJ::Subscription::TRACKING,
        ) if $journal->is_visible;

    push @{ @$categories[0]->{$cat_title} },
        LJ::Subscription::Pending->new( $remote,
            event   => "UserExpunged",
            journal => $journal,
            flags   => LJ::Subscription::TRACKING,
        ) unless LJ::User->is_protected_username( $journal->user );

    push @{ @$categories[0]->{$cat_title} },
        LJ::Subscription::Pending->new( $remote,
            event   => "JournalNewComment",
            journal => $journal,
            flags   => LJ::Subscription::TRACKING,
        ) if $remote->can_track_all_community_comments( $journal )
            && $journal->is_visible;

    push @{ @$categories[0]->{$cat_title} },
        LJ::Subscription::Pending->new( $remote,
            event    => "NewUserpic",
            journal  => $journal,
            flags    => LJ::Subscription::TRACKING,
            disabled => ! $remote->can_track_new_userpic,
        ),
        LJ::Subscription::Pending->new( $remote,
            event   => "Birthday",
            journal => $journal,
            flags   => LJ::Subscription::TRACKING,
        ) if $journal->is_visible;

    # validate referer for ret_url
    my $referer = BML::get_client_header('Referer');
    $referer = $LJ::SITEROOT . $referer if $referer =~ /^\//;
    if ( DW::Controller::validate_redirect_url( $referer ) ) {
        # validate args
        my ( $url, $args ) = ( $referer =~ /^(.*)\?(.*)$/ );
        if ( $url && $args ) {
            my %args = map { split( /=/, $_ ) } split( /&/, $args );
            $args = LJ::viewing_style_args( %args );
            $referer = $args ? "$url?$args" : $url;
        }
    } else {
        $referer = undef;  # invalid redirect
    }

    return LJ::subscribe_interface( $remote,
        categories => $categories,
        journal    => $journal,
        ret_url    => $referer,
        post_to_settings_page => 1,
    );

}
_code?>
<=body
title=><?_code return $title; _code?>
head<=
<?_code return $headextra; _code?>
<=head
<=body
page?>

