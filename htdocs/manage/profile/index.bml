<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=><?_code return $ML{'.title'}; _code?>
body<=
<?_code
{
    use strict;
    use vars qw(%POST %GET $headextra @errors);
    use LJ::Setting;

    LJ::set_active_crumb('editprofile');
    LJ::need_res( { priority => $LJ::OLD_RES_PRIORITY }, 'stc/lj_settings.css' );

    my $remote = LJ::get_remote()
        or return "<?needlogin?>";

    my $authas = $GET{'authas'} || $remote->{'user'};
    my $u = LJ::get_authas_user($authas);
    return LJ::bad_input("You could not be authenticated as the specified user.")
        unless $u;

    return $LJ::MSG_READONLY_USER if $u->readonly;

    # create $iscomm to help with community-specific translation strings
    my $iscomm = $u->is_community ? '.comm' : '';

    # extra arguments for get requests
    my $getextra = $authas ne $remote->{'user'} ? "?authas=$authas" : '';
    my $getsep = $getextra ? "&" : "?";

    ### user is now authenticated ###

    # The settings used on this page
    my @settings = ();
    push @settings, "LJ::Setting::FindByEmail" if LJ::is_enabled('opt_findbyemail');
    push @settings, "DW::Setting::ProfileEmail";
    push @settings, "DW::Setting::TxtMsgSetup";

    my $dbr = LJ::get_db_reader();
    my $sth;

    # list the userprops that are handled explicitly by code on this page
    # props in this list will be preloaded on page load and saved on post
    my @uprops = qw/
        opt_whatemailshow comm_theme
        ao3 aolim delicious diigo etsy ffnet google_talk icq jabber
        last_fm_user msn pinboard plurk ravelry skype tumblr twitter yahoo
        url urlname gender
        opt_hidefriendofs opt_hidememberofs
        sidx_bdate sidx_bday
        opt_showmutualfriends
        opt_showbday opt_showlocation opt_showljtalk
        opt_sharebday opt_showonlinestatus
    /;

    # load user props
    $u->preload_props( { use_master => 1 }, @uprops );

    # to store values before they undergo normalisation
    my %saved = ();
    $saved{'name'} = $u->{'name'};

    # clean userprops
    foreach (values %$u) { LJ::text_out(\$_); }

    # load and clean bio
    my $bio = $u->bio;
    $saved{bio} = $bio;
    LJ::EmbedModule->parse_module_embed( $u, \$bio, edit => 1 );
    LJ::text_out( \$bio, "force" );

    # load interests: $interests{name} = intid
    my %interests = %{ $u->interests( { forceids => 1 } ) };

    # determine what the options in "Show to:" dropdowns should be, depending
    #  on user or community

    my %showtoopts;
    if ( $iscomm ) {
        $showtoopts{A} = $ML{'.security.visibility.everybody2'};
        $showtoopts{R} = $ML{'.security.visibility.regusers'};
        $showtoopts{F} = $ML{'.security.visibility.members'};
        $showtoopts{N} = $ML{'.security.visibility.admins'};
    } else {
        $showtoopts{A} = $ML{'.security.visibility.everybody2'};
        $showtoopts{R} = $ML{'.security.visibility.regusers'};
        $showtoopts{F} = $ML{'.security.visibility.access'};
        $showtoopts{N} = $ML{'.security.visibility.nobody'};
    }

    ###
    ### no post, show edit form
    ###
    unless ( LJ::did_post() ) {

        my $ret;

        $ret .= "<div>";
        # user switcher
        $ret .= "<form method='get' action='./'>\n";
        $ret .= LJ::make_authas_select($remote, { 'authas' => $GET{'authas'} });
        $ret .= "</form>\n\n";

        # if they're working as a community, reproduce the community management linkbar:
        if ( $iscomm ) {
            my $linkbar;
            $linkbar = $u->maintainer_linkbar( "profile" );
            $ret .= "<p class='intro'>" . $linkbar . "</p>";
        }

        $ret .= "<div style='margin: 1em 0;'> ";
        $ret .= BML::ml( ".intro1$iscomm", { aopts1 => "href='$LJ::SITEROOT/manage/settings/$getextra${getsep}cat=privacy'",
                                     aopts2 => "href='$LJ::SITEROOT/manage/settings/$getextra${getsep}cat=display'" } );
        $ret .= "</div>";

        $ret .= qq {
<h2> $ML{'.jumpto'} <a href='#identity'>$ML{'.section.id'}</a> |
    <a href='#contact'>$ML{'.section.contact'}</a> |
    <a href='#bio'>$ML{'.section.bio2'}</a> |
    <a href='#interests'>$ML{'.section.interests'}</a> |
    <a href='#display'>$ML{'.section.display'}</a>
</h2>
        };

        $ret .= "</div>\n";

        $ret .= "<div class='ljclear'></div>\n";

        $ret .= "<form method='post' action='./$getextra'>\n";
        $ret .= LJ::form_auth();

        $ret .= "<table summary='' width='100%' style='margin: 1em 0;'>\n";

        # personal information
        $ret .= qq {
    <tr class='section_head'><td width='75%' colspan=2>
    <a name='identity'></a>$ML{'.section.id'}
    </td><td class='view_options'>
    $ML{'.showto'}</td></tr>

        };

        my $stripe = 0;  # two columns
        my $zebra_row = sub { return $stripe++ % 2 ? ' even' : ' odd' };


        ### Picture Settings
        $ret .= "<tr class='field_block" . $zebra_row->() . "' ><td class='field_name'>$ML{'.fn.userpic2'}</td>\n";
        $ret .= "<td>";
        $ret .= "<div style='width: 100px; height: 100px; float: left; text-align: center; border: 1px solid #ddd'>";
        if ( $u->{'defaultpicid'} ) {
            my $icon = $u->userpic;
            $ret .= $icon->imgtag;
        } else {
            $ret .= "<br /><i>($ML{'.userpic.none'})</i>";
        }
        $ret .= "</div><div style='margin-left: 110px'>\n";
        $ret .= "<span class='helper'>" . $ML{".userpic$iscomm"} . "</span>";
        $ret .= LJ::help_icon('upic_keywords');
        $ret .= "<?p <a href='$LJ::SITEROOT/editicons$getextra'>$ML{'.userpic.change'}</a> p?>\n";
        $ret .= "</td>";

        $ret .= "<td>";
        $ret .= "<?p <i> $ML{'.security.visibility.everybody2'} </i> p?>";
        $ret .= "</td></tr>\n";

        # name
        $ret .= "<tr class='field_block" . $zebra_row->() . "'><td class='field_name'>$ML{'.fn.name2'}</td>\n";
        $ret .= "<td>";
        if (LJ::text_in($saved{'name'})) {
            $ret .= "<div style='float: left'>";
            $ret .= LJ::html_text( { name => 'name', value => $u->name_orig,
                                     title => $ML{'.fn.name2'},
                                     size => '35', maxlength => '50' } );
            $ret .= "&nbsp; </div><div class='helper'>$ML{'.name'}</div>";
        } else {
            $ret .= LJ::html_hidden( 'name_absent', 'yes' );
            $ret .= "<?inerr " . BML::ml( '.error.invalidname2', {'aopts' => "href='$LJ::SITEROOT/utf8convert'"} ) . " inerr?>";
        }

        $ret .= "</td>\n<td class='selectvis'>";
        $ret .= "<?p <i> $ML{'.security.visibility.everybody2'} </i> p?>";
        $ret .= "</td></tr>\n";

        if ( $u->is_individual ) {
            # gender
            $ret .= "<tr class='field_block" . $zebra_row->() . "'><td class='field_name'>$ML{'.fn.gender1'}</td>\n";
            $ret .= "<td>";
            # strip HTML out of title
            $ret .= LJ::html_select( { name => 'gender', title => LJ::strip_html( $ML{'.fn.gender1'} ),
                                       selected => $u->prop( 'gender' ) || 'U' },
                                     F => $ML{'.gender.female'},
                                     M => $ML{'.gender.male'},
                                     O => $ML{'.gender.other'},
                                     U => $ML{'.gender.unspecified'}, );
            $ret .= "</td>\n<td class='selectvis'>";
            $ret .= "<?p <i> $ML{'.security.visibility.nobody'} </i> p?>";
            $ret .= "</td></tr>\n";
        }

        # birthday
        $ret .= "<tr class='field_block" . $zebra_row->() . "'><td class='field_name'>$ML{'.fn.birthday'}</td>\n";
        $ret .= "<td>";
        my %bdpart;
        if ($u->{'bdate'} =~ /^(\d\d\d\d)-(\d\d)-(\d\d)$/) {
            ($bdpart{'year'}, $bdpart{'month'}, $bdpart{'day'}) = ($1, $2, $3);
            if ($bdpart{'year'} eq "0000") { $bdpart{'year'} = ""; }
            if ($bdpart{'day'} eq "00") { $bdpart{'day'} = ""; }
        }

        $ret .= LJ::html_select( { name => 'month', title => $ML{'.fn.birthday.month'},
                                 selected => int( $bdpart{'month'} ) },
                                '', '',
                                map { $_, LJ::Lang::month_long_ml($_) } (1..12) );
        $ret .= " ";
        $ret .= LJ::html_text( { name => 'day', value => $bdpart{'day'},
                                 size => '3', maxlength => '2',
                                 title => $ML{'.fn.birthday.day'} } );
        $ret .= " ";
        $ret .= LJ::html_text( { name => 'year', value => $bdpart{'year'},
                                 size => '5', maxlength => '4',
                                 title => $ML{'.fn.birthday.year'} } );

        $ret .= "<div style=\"padding-top: .5em;\">\n";
        $u->{'opt_showbday'} = "D" unless $u->{'opt_showbday'} =~ m/^(D|F|N|Y)$/;
        $ret .= LJ::html_select( { name => 'opt_showbday',
                                   title => $ML{'.fn.birthday.level'},
                                   selected => $u->{'opt_showbday'} },
                                 N => $ML{'.show.birthday.nothing2'},
                                 D => $ML{'.show.birthday.day2'},
                                 Y => $ML{'.show.birthday.year2'},
                                 F => $ML{'.show.birthday.full2'} );
        $ret .= "</div>\n";

        $ret .= "</td>\n<td class='selectvis'>";
        my $opt_sharebday = ( $u->opt_sharebday =~ m/^(A|F|N|R)$/ ) ? $u->opt_sharebday : 'F';
        $ret .= LJ::html_select( { name => 'opt_sharebday',
                                   title => BML::ml( '.privacy.title',
                                            { name => $ML{'.fn.birthday'} } ),
                                   selected => $opt_sharebday },
                                   %showtoopts );
        $ret .= "</td></tr>\n";

        #location
        $ret .= "<tr class='field_block" . $zebra_row->() . "'><td class='field_name'>$ML{'.fn.location'}</td>\n";
        $ret .= "<td>";
        $ret .= LJ::Widget::Location->render( skip_timezone => 1, minimal_display => 1 );

        $ret .= "</td><td class='selectvis'>";
        $ret .= LJ::html_select( { name => 'opt_showlocation',
                                   title => BML::ml( '.privacy.title',
                                            { name => $ML{'.fn.location'} } ),
                                   selected => $u->opt_showlocation },
                                   %showtoopts );
        $ret .= "</td></tr>\n";

        ## CONTACT INFO
        $ret .= qq {
    <tr class='section_head'><td width='75%' colspan=2>
    <a name='contact'></a>$ML{'.section.contact2'}</td>
    <td class='view_options'> $ML{'.showto'}</td></tr>

    <tr class='section_subhead'><td colspan=3>
    $ML{'.subsection.web'}</td></tr>
        };

        # url
        $ret .= "<tr class='field_block'><td class='field_name'>\n";
        $ret .= "$ML{'.fn.link2'}</td><td>";
        $ret .= LJ::html_text( { name => 'url', value => $u->{'url'},
                                 title => $ML{'.fn.link2'},
                                 size => '45', maxlength => '255' } );
        $ret .= "</td><td class='selectvis'>";
        $ret .= "<?p <i> $ML{'.security.visibility.everybody2'} </i> p?>";
        $ret .= "</td></tr>\n";

        # urlname
        $ret .= "<tr class='field_block'><td class='field_name'>\n";
        $ret .= "$ML{'.fn.sitename2'}</td><td>";
        $ret .= LJ::html_text( { name => 'urlname', value => $u->{'urlname'},
                                 title => $ML{'.fn.sitename2'},
                                 size => '45', maxlength => '255' } );
        $ret .= "</td><td class='selectvis'>";
        $ret .= "<?p <i> $ML{'.security.visibility.everybody2'} </i> p?>";
        $ret .= "</td></tr>\n";

        # email
        my $curr_privacy = $iscomm ?
            { Y => $ML{'.security.visibility.everybody2'},
              R => $ML{'.security.visibility.regusers'},
              F => $ML{'.security.visibility.members'},
              N => $ML{'.security.visibility.admins'},
            }->{$u->opt_showcontact}
            :
            { Y => $ML{'.security.visibility.everybody2'},
              R => $ML{'.security.visibility.regusers'},
              F => $ML{'.security.visibility.access'},
              N => $ML{'.security.visibility.nobody'},
            }->{$u->opt_showcontact};

        $ret .= qq{
    <tr class='section_subhead'><td colspan=2>$ML{'.subsection.messaging'}
    </td><td class='view_options'>
    <a href='$LJ::SITEROOT/manage/settings/$getextra${getsep}cat=privacy'>
    $ML{'.fn.privacy'}: $curr_privacy</a></td></tr>\n
        };

        my $u_email_raw = $u->email_raw;
        $stripe = 0;  # reset for next block

        $ret .= qq {
    <tr class='field_block} . $zebra_row->() . qq{'><td class='field_name'>
    $ML{'.fn.email.system'}</td><td style='vertical-align: middle'>
    <b>$u_email_raw</b> &nbsp; <a href='$LJ::SITEROOT/changeemail$getextra'>
    $ML{'.email.change.system'}</a></td><td>\n};

        # opt_whatemailshow
        my $cur = $u->opt_whatemailshow;
        # drop BVL values that govern site alias; we input that below instead
        $cur =~ tr/BVL/AAN/;  # D reset later
        $ret .= LJ::html_select( { name => 'opt_whatemailshow',
                                   title => BML::ml( '.display.title',
                                            { name => $ML{'.fn.email.system'} } ),
                                   selected => $cur },
                                 A => $ML{'.security.visibility.privacy'},
                                 N => $ML{'.security.visibility.noshow'} );
        $ret .= "</td></tr>\n";

        $ret .= "<tr class='field_block" . $zebra_row->() . "'><td class='field_name'> $ML{'.fn.email.display'}</td>\n";
        $ret .= "<td>";

        $ret .= DW::Setting::ProfileEmail->option( $u );
        $ret .= "<br /><span class='helper'>$ML{'.email.profile'}</span>";

        $ret .= "</td><td>";
#        $ret .= "<?p <i> $ML{'.security.visibility.same'} </i> p?>";

        $ret .= "</td></tr>\n";

        if ( $u->can_have_email_alias && ! $u->prop( "no_mail_alias" ) ) {
            $ret .= "<tr class='field_block" . $zebra_row->() . "'><td class='field_name'>";
            $ret .= BML::ml( '.fn.email.site', { siteabbrev => $LJ::SITENAMEABBREV } );
            $ret .= "</td><td style='vertical-align: middle'>\n";
            $ret .= $u->site_email_alias;
            $ret .= "</td><td class='selectvis'>";
            # this is where we get BVL back
            my $checked = ( $u->opt_whatemailshow =~ /[BVL]/ ) ? 'Y' : 'N';
            $ret .= LJ::html_select
                    (
                        {
                            name => 'opt_usesite',
                            title => BML::ml( '.display.title',
                                { name => BML::ml( '.fn.email.site', { siteabbrev => $LJ::SITENAMEABBREV } ) } ),
                            selected => $checked
                        },
                        Y => $ML{'.security.visibility.privacy'},
                        N => $ML{'.security.visibility.noshow'}
                    );
            $ret .= "</td></tr>\n";
        }

        if ( $u->is_person ) {

            if ( LJ::is_enabled( 'ljtalk' ) ) {
                $ret .= "<tr class='field_block" . $zebra_row->() . "'><td class='field_name'>";
                $ret .= BML::ml( '.fn.ljtalk.address', { siteabbrev => $LJ::SITENAMEABBREV } );
                $ret .= "</td><td style='vertical-align: middle'>" . $u->ljtalk_id;
                # Don't show LJ Talk field? (opt_showljtalk)
                $ret .= "</td><td class='selectvis'>";
                $ret .= LJ::html_select
                    (
                        {
                            name => 'opt_showljtalk',
                            id => 'opt_showljtalk',
                            title => BML::ml( '.display.title',
                                { name => BML::ml( '.fn.ljtalk.address', { siteabbrev => $LJ::SITENAMEABBREV } ) } ),
                            selected => $u->hide_ljtalk ? 'N' : 'Y'
                        },
                        Y => $ML{'.security.visibility.privacy'},
                        N => $ML{'.security.visibility.noshow'}
                    );
                $ret .= "</td></tr>\n";

                my $jabber_title = LJ::Hooks::run_hook("jabber_title") || $ML{'/manage/settings/index.bml.jabber.title'};
                $ret .= "<tr class='field_block" . $zebra_row->() . "'><td class='field_name'>";
                $ret .= BML::ml( '.fn.ljtalk.status', { siteabbrev => $LJ::SITENAMEABBREV } );
                $ret .= "</td><td>$ML{'.fn.showljtalk'}<br />";
                $ret .= "<span class='helper'>" . BML::ml('/manage/settings/index.bml.jabber.text', {'jabbertitle' => $jabber_title}) . "</span>";
                # Jabber Online Status
                $ret .= "</td><td class='selectvis'>";
                $ret .= LJ::html_select
                    (
                        {
                            name => 'opt_showonlinestatus',
                            id => 'opt_showonlinestatus',
                            title => BML::ml( '.privacy.title',
                                { name => BML::ml( '.fn.ljtalk.status', { siteabbrev => $LJ::SITENAMEABBREV } ) } ),
                            selected => $u->opt_showonlinestatus
                        },
                        Y => $ML{'.security.visibility.everybody2'},
                        F => $ML{'.security.visibility.access'},
                        N => $ML{'.security.visibility.nobody'}
                    );
                $ret .= "</td></tr>\n";
            }

            # opt_findbyemail
            if ( LJ::is_enabled( 'opt_findbyemail' ) ) {
                $ret .= "<tr class='field_block" . $zebra_row->() . "'><td class='field_name'>";
                $ret .= LJ::Setting::FindByEmail->label . "</td>";
                $ret .= "<td><span class='helper'>";
                $ret .= BML::ml( 'settings.findbyemail.helper', {
                    sitename => $LJ::SITENAMESHORT,
                    siteabbrev => $LJ::SITENAMEABBREV } );
                $ret .= "</span></td>\n<td class='selectvis'>";
                $ret .= LJ::Setting::FindByEmail->as_html( $u, undef, { minimal_display => 1, helper => 0 } );
                $ret .= "</td></tr>\n";
            }

            # opt_usermsg
            if ( LJ::is_enabled( 'user_messaging' ) ) {
                $ret .= "<tr class='field_block" . $zebra_row->() . "'><td class='field_name'>";
                $ret .= BML::ml( 'setting.usermessaging.label', { siteabbrev => $LJ::SITENAMEABBREV } );
                $ret .= "</td><td><span class='helper'>";
                $ret .= BML::ml( 'settings.usermessaging.obsolete' );
                $ret .= "</span></td>\n<td class='selectvis'>";
                $ret .= "</td></tr>\n";
            }

        } # end is_person check

        if ( $u->can_use_textmessaging ) {

            $ret .= "<tr class='field_block" . $zebra_row->() . "'><td class='field_name'>$ML{'.section.textmsg'}</td>\n";
            $ret .= "<td>";

            $ret .= DW::Setting::TxtMsgSetup->option( $u, undef, { info_only => 1 } );
            $ret .= "</td>\n<td class='selectvis'>";
            $ret .= DW::Setting::TxtMsgSetup->option( $u, undef, { vis_only => 1 } );

            $ret .= "</td></tr>\n";
        }

        if ( $u->is_person ) {

            # chat thingies

            $ret .= qq{
    <tr class='section_subhead'><td colspan=2>$ML{'.subsection.other'}
    </td><td class='view_options'>
    <a href='$LJ::SITEROOT/manage/settings/$getextra${getsep}cat=privacy'>
    $ML{'.fn.privacy'}: $curr_privacy</a></td></tr>\n
        };

            $ret .= "<tr><td colspan=3><table summary=''>";
            my $oddeven = 0;

            foreach my $p (
                           ["ao3", $ML{ '.services.ao3' }, 40],
                           ["aolim", $ML{'.chat.aolim'}, 28],
                           ["delicious", $ML{ '.services.delicious' }, 40],
                           ["diigo", $ML{ '.services.diigo' }, 16],
                           ["etsy", $ML{ '.services.etsy' }, 20],
                           ["ffnet", $ML{ '.services.ffnet' }, 30],
                           ["google_talk", $ML{'.chat.googletalk'}, 60],
                           ["icq", $ML{'.chat.icquin'}, 12],
                           ["jabber", $ML{'.chat.jabber'}, 60],
                           ["last_fm_user", $ML{'.services.last_fm'}, 255],
                           ["msn", $ML{'.chat.msnusername'}, 60],
                           ["pinboard", $ML{'.services.pinboard'}, 30],
                           ["plurk", $ML{ '.services.plurk' }, 255],
                           ["ravelry", $ML{ '.services.ravelry' }, 40],
                           ["skype", $ML{'.chat.skype'}, 40],
                           ["tumblr", $ML{ '.services.tumblr' }, 255],
                           ["twitter", $ML{ '.services.twitter' }, 40],
                           ["yahoo", $ML{'.chat.yahooid'}, 33],
                          )

            {
                $oddeven = !$oddeven;
                $ret .= "<tr class='field_block'>" if $oddeven;
                $ret .= "<td class='field_name' width='20%'>$p->[1]</td><td width='30%'>";
                $ret .= LJ::html_text( { name => $p->[0],
                                         value => $u->{$p->[0]},
                                         title => $p->[1],
                                         size => '20',
                                         maxlength => $p->[2] } );
                $ret .= "</td>\n";
                $ret .= "</tr>" unless $oddeven;
            }

            $ret .= "<td></td><td></td></tr>" if $oddeven;
            $ret .= "</table></td></tr>\n";

        } # end is_person check

        $ret .= "</table>\n";

        ## BIO

        $ret .= "<div class='section_head'><a name='bio'></a>$ML{'.section.bio2'}</div>";
        if ( LJ::text_in( $saved{'bio'} ) ) {
            $ret .= $u->is_identity ? $ML{'.fn.bio.openid'} : 
                $ML{".fn.bio$iscomm"};
            $ret .= "<br />\n";
            $ret .= LJ::html_textarea( { name => 'bio',
                                         title => $ML{'.section.bio2'},
                                         rows => '10', cols => '50',
                                         wrap => 'soft',
                                         style => "width: 90%",
                                         value => $bio } );
        } else {
            $ret .= LJ::html_hidden('bio_absent', 'yes');
            $ret .= "<?p <?inerr " . BML::ml('.error.invalidbio', {'aopts' => "href='$LJ::SITEROOT/utf8convert'"}) . " inerr?> p?>\n";
        }

        ## INTERESTS

        $ret .= "<div class='section_head'><a name='interests'></a>$ML{'.section.interests'}</div>\n";

        if ( $u->is_community ) {
            $ret .= $ML{'.fn.commdescription2'} . "<br />";
            $ret .= LJ::html_text( { name => 'comm_theme',
                                     title => $ML{'.fn.commdesc'},
                                     value => $u->{comm_theme},
                                     size => '50', maxlength => '100' } );
            $ret .=  "<br /><br />";
        }

        my @eintsl;
        foreach ( sort keys %interests ) {
            push @eintsl, $_ if LJ::text_in( $_ );
        }

        $ret .= $ML{".fn.interests$iscomm"};
        $ret .= LJ::html_textarea( { name => 'interests',
                                     title => $ML{'.section.interests'},
                                     value => join(", ", @eintsl),
                                     rows => '10', cols => '50', wrap => 'soft',
                                     style => "width: 90%" } );

        ## CIRCLE
        $ret .= "<table summary='' width='100%' style='margin: 1em 0;'>";
        $ret .= "<tr class='section_head'><td width='75%' colspan=3>";
        $ret .= "<a name='display'></a>";
        $ret .= $u->is_community ? $ML{'.section.display.members'} : $ML{'.section.display.circle'};
        $ret .= "</td></tr>\n";

        # opt_showmutualfriends
        unless ( $u->is_community ) {
            $ret .= "<tr class='field_block'><td class='field_name'>";
            $ret .= "$ML{'.fn.mutualfriends3'}</td><td width='10px'>";
            $ret .= LJ::html_check( { type => 'check', name => 'opt_showmutualfriends',
                                      id => 'opt_showmutualfriends', selected => $u->{'opt_showmutualfriends'} } );
            $ret .= "</td><td style='vertical-align: middle'>";
            $ret .= "<label for='opt_showmutualfriends'>$ML{'.mutualfriends3'}</label>";
            $ret .= "</td></tr>\n";
        }

        # opt_hidefriendofs
        $ret .= "<tr class='field_block'><td class='field_name' width='15%'>";
        $ret .= $u->is_community ? $ML{'.fn.subscriberof'} : $ML{'.fn.friendof3'};
        $ret .= "</td><td width='10px'>";
        $ret .= LJ::html_check( { type => 'check', name => 'opt_hidefriendofs',
                                  id => 'opt_hidefriendofs', selected => ! $u->{'opt_hidefriendofs'} } );
        $ret .= "</td><td style='vertical-align: middle'><label for='opt_hidefriendofs'>";
        $ret .= $u->is_community ? $ML{'.subscriberof'} : $ML{'.friendof3'};
        $ret .= "</label></td></tr>\n";

        # opt_hidememberofs
        unless ( $u->is_community ) {
            $ret .= "<tr class='field_block'><td class='field_name'>";
            $ret .= "$ML{'.fn.comms'}</td><td width='10px'>";
            $ret .= LJ::html_check( { type => 'check', name => 'opt_hidememberofs',
                                      id => 'opt_hidememberofs', selected => ! $u->{'opt_hidememberofs'} } );
            $ret .= "</td><td style='vertical-align: middle'>";
            $ret .= "<label for='opt_hidememberofs'>$ML{'.comms2'}</label></td></tr>\n";
        }

        $ret .= "</table>\n";

        $ret .= LJ::Hooks::run_hook("profile_settings_extra", $u);

        # ending submit block
        $ret .= "<?standout " . LJ::html_submit(undef, $ML{'.save_button'}) . " standout?>\n";
        $ret .= "</form>\n";

        return $ret;
    }


    ###
    ### we have a post, process edits
    ###

    if ( LJ::did_post() ) {
        return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>" unless LJ::check_form_auth();

        return "<?badinput?>" unless LJ::text_in(\%POST);

        # name
        unless (LJ::trim($POST{'name'}) || defined($POST{'name_absent'})) {
            push @errors, $ML{'.error.noname'};
        }

        # name is stored in an 80-char column
        if (length $POST{'name'} > 80) {
            push @errors, $ML{'.error.name.toolong'};
        }
        # birthday
        my $this_year = (localtime())[5]+1900;

        if ($POST{'year'} && $POST{'year'} < 100) {
            push @errors, $ML{'.error.year.notenoughdigits'};
        }

        if ($POST{'year'} && $POST{'year'} >= 100 && ($POST{'year'} < 1890 || $POST{'year'} > $this_year)) {
            push @errors, $ML{'.error.year.outofrange'};
        }

        if ($POST{'month'} && ($POST{'month'} < 1 || $POST{'month'} > 12)) {
            push @errors, $ML{'.error.month.outofrange'};
        }

        if ($POST{'day'} && ($POST{'day'} < 1 || $POST{'day'} > 31)) {
            push @errors, $ML{'.error.day.outofrange'};
        }

        if (@errors == 0 && $POST{'day'} > LJ::days_in_month($POST{'month'}, $POST{'year'})) {
            push @errors, $ML{'.error.day.notinmonth'};
        }

        if ($POST{'LJ__Setting__FindByEmail_opt_findbyemail'} && !$POST{'LJ__Setting__FindByEmail_opt_findbyemail'} =~ /^[HNY]$/) {
            push @errors, $ML{'.error.findbyemail'};
        }

        # bio
        if (length($POST{'bio'}) >= LJ::BMAX_BIO) {
            push @errors, $ML{'.error.bio.toolong'};
        }

        # FIXME: validation AND POSTING are handled by widgets' handle_post() methods
        # (introduce validate_post() ?)
        my $save_search_index = $POST{'opt_showlocation'} =~ /^[YR]$/;
        LJ::Widget->handle_post(\%POST, 'Location' => {save_search_index => $save_search_index});

        return LJ::error_list( @errors ) if @errors;

        ### no errors

        my $dbh = LJ::get_db_writer();

        $POST{'url'} =~ s/\s+$//; $POST{'url'} =~ s/^\s+//;
        if ($POST{'url'} && $POST{'url'} !~ /^https?:\/\//) {
            $POST{'url'} =~ s/^http\W*//;
            $POST{'url'} = "http://$POST{'url'}";
        }

        my $newname = defined $POST{'name_absent'} ? $saved{'name'} : $POST{'name'};
        $newname =~ s/[\n\r]//g;
        $newname = LJ::text_trim($newname, LJ::BMAX_NAME, LJ::CMAX_NAME);

        my $newbio = defined($POST{'bio_absent'}) ? $saved{'bio'} : $POST{'bio'};
        my $has_bio = ($newbio =~ /\S/) ? "Y" : "N";
        # setup what we're gonna update in the user table:
        my %update = (
                      'name' => $newname,
                      'bdate' => sprintf("%04d-%02d-%02d", $POST{'year'}, $POST{'month'}, $POST{'day'}),
                      'has_bio' => $has_bio,
                      'allow_getljnews' => $POST{'allow_getljnews'} ? "Y" : "N",
                      );

        if ($POST{'allow_contactshow'}) {
            $update{'allow_contactshow'} = $POST{'allow_contactshow'} if $POST{'allow_contactshow'} =~ m/^[NRYF]$/;
        }

        if (defined $POST{'oldenc'}) {
            $update{'oldenc'} = $POST{'oldenc'};
        }

        my $save_rv = LJ::Setting->save_all( $u, \%POST, \@settings );

        $u->update_self( \%update );

        ### change any of the userprops ?
        {
            # opts
            $POST{'opt_showmutualfriends'} = $POST{'opt_showmutualfriends'} ? 1 : 0;
            $POST{'opt_hidefriendofs'} = $POST{'opt_hidefriendofs'} ? 0 : 1;
            $POST{'opt_hidememberofs'} = $POST{'opt_hidememberofs'} ? 0 : 1;
            $POST{'gender'} = 'U' unless $POST{'gender'} =~ m/^[UMFO]$/;
            $POST{'opt_sharebday'} = undef unless $POST{'opt_sharebday'} =~ m/^[AFNR]$/;
            $POST{'opt_showbday'} = 'D' unless $POST{'opt_showbday'} =~ m/^[DFNY]$/;
            # undefined means show to everyone, "N" means don't show
            $POST{'opt_showlocation'} = undef unless $POST{'opt_showlocation'} =~ m/^[NRYF]$/;
            # Does the user want to show the LJ Talk field?  Y=Yes, N=No
            # In this case, the question is actually if they want to hide
            # it, hence looking for a value of 'N' before 'Y'.
            $POST{'opt_showljtalk'} = $POST{'opt_showljtalk'} ? 'N' : 'Y';
            $POST{'opt_showonlinestatus'} = '' unless $POST{'opt_showonlinestatus'} =~ m/^[YFN]$/;
            # change value of opt_whatemailshow based on opt_usesite and
            # $u->profile_email (changed above by DW::Setting::ProfileEmail)
            $POST{'opt_whatemailshow'} =~ tr/A/D/ if $u->profile_email;
            $POST{'opt_whatemailshow'} =~ tr/ADN/BVL/ if $POST{'opt_usesite'} eq 'Y';

            # for the directory.
            $POST{'sidx_bdate'} = undef;
            $POST{'sidx_bday'}  = undef;

            # if they share their birthdate publically
            if ($POST{'opt_sharebday'} =~ /^[AR]$/) {
                # and actually provided a birthday
                if ($POST{'month'} > 0 && $POST{'day'} > 0) {
                    # and allow the entire thing to be displayed
                    if ($POST{'opt_showbday'} eq "F" && $POST{'year'}) {
                        $POST{'sidx_bdate'} = sprintf("%04d-%02d-%02d", map { $POST{$_} } qw(year month day));
                    }

                    # or allow the date portion to be displayed
                    if ($POST{'opt_showbday'} =~ /^[FD]$/) {
                        $POST{'sidx_bday'} = sprintf("%02d-%02d", map { $POST{$_} } qw(month day));
                    }
                }
            }

            # set userprops
            my %prop;
            foreach my $uprop (@uprops) {
                my $eff_val = $POST{$uprop};   # effective value, since 0 isn't stored
                $eff_val = "" unless $eff_val;
                $prop{$uprop} = $eff_val;
            }
            $u->set_prop( \%prop, undef, { skip_db => 1 } );

            # location or bday could've changed... (who cares about checking exactly)
            $u->invalidate_directory_record;

            # bday might've changed
            $u->set_next_birthday;
        }

        # update their bio text
        LJ::EmbedModule->parse_module_embed($u, \$POST{'bio'});
        $u->set_bio($POST{'bio'}, $POST{'bio_absent'});

        # update interests
        unless ($POST{'interests_absent'}) {
            my $maxinterests = $u->count_max_interests;

            my @ints = LJ::interest_string_to_list($POST{'interests'});
            my $intcount = scalar(@ints);
            my @interrors = ();

            # Don't bother validating the interests if there are already too many
            return LJ::bad_input( BML::ml('error.interest.excessive2',
                                  { intcount => $intcount,
                                    maxinterests => $maxinterests } ) )
                if $intcount > $maxinterests;

            # Clean interests, and make sure they're valid
            my @valid_ints = LJ::validate_interest_list(\@interrors, @ints);
            if (@interrors > 0) {
                return LJ::bad_input( map { BML::ml(@$_) } @interrors );
            }

            $u->set_interests( \@valid_ints );
        }

        LJ::Hooks::run_hooks('profile_save', $u);
        LJ::Hooks::run_hook('set_profile_settings_extra', $u, \%POST);

        # tell the user all is well
        my $base = $u->journal_base;
        my $profile_url = $u->profile_url;
        if ($u->is_community) {
            return "<?h1 $ML{'.success.header'} h1?>\n" .
                 "<?p " . BML::ml( '.success.text.comm', 
                    {commname => LJ::ljuser($u->{user}) } ) . " p?>" .
                 "<?p $ML{'.success.gonext'} p?>" .
                 "<ul><li><a href='$profile_url'>$ML{'.success.viewprofile.comm'}</a></li>" .
                 "<li><a href='$LJ::SITEROOT/manage/profile/$getextra'>$ML{'.success.editprofile.comm'}</a></li>" .
                 "<li><a href='$LJ::SITEROOT/editicons$getextra'>$ML{'.success.editicons.comm'}</a></li></ul>";
        } else {
            return "<?h1 $ML{'.success.header'} h1?>\n" .
                 "<?p $ML{'.success.text'} p?>" .
                 "<?p $ML{'.success.gonext'} p?>" .
                 "<ul><li><a href='$profile_url'>$ML{'.success.viewprofile'}</a></li>" .
                 "<li><a href='$LJ::SITEROOT/manage/profile/$getextra'>$ML{'.success.editprofile'}</a></li>" .
                 "<li><a href='$LJ::SITEROOT/editicons$getextra'>$ML{'.success.editicons'}</a></li></ul>";
        }
    }

    # should never happen
    return "<?h1 $ML{'Error'} h1?><?p $ML{'error.unknownmode'} p?>";

}
_code?>
<=body
bodyopts=><?_code return "id='page_manageprofile' class='self_wrap'" _code?>
<?_comment head=><?_code return $headextra; _code?> _comment?>
page?>
