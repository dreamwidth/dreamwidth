<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST $title $headextra @errors @warnings);

    $title = $ML{'.title'};

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $authas = $GET{authas} || $remote->user;
    my $u = LJ::get_authas_user($authas);
    return LJ::bad_input($ML{'error.invalidauth'})
        unless $u;

    my $getextra = $authas ne $remote->user ? "?authas=$authas" : "";

    my $submit_msg;
    my %editvals;

    if (LJ::did_post()) {
        return LJ::bad_input($ML{'error.invalidform'})
            unless LJ::check_form_auth();

        # check to see if we're doing a note edit instead
        foreach ( keys %POST ) {
            my ( $euid ) =  /^edit_ban_(\d+)$/;
            if ( defined $euid && $POST{"edit_ban_$euid"} ) {
                my $eu = LJ::load_userid( $euid );
                last unless $eu;
                %editvals = (
                    user => $eu->user,
                    note => $u->ban_note( $eu )->{$euid},
                );
                last;  # stop searching keys
            }
        }

        my $dbh = LJ::get_db_writer();

        # unban users before banning users so that in the case of a collision (i.e. a particular
        # user is being banned and unbanned at the same time), that user is left banned

        # unban users
        if ( $POST{unban_user} && !%editvals ) {
            # first remove any users from the list that are not valid users
            my @unbanlist = split(/\0/, $POST{unban_user});
            my $unbanus = LJ::load_userids(@unbanlist);
            for (my $i = 0; $i < scalar @unbanlist; $i++) {
                unless ($unbanus->{$unbanlist[$i]}) {
                    splice(@unbanlist, $i, 1);
                    $i--;
                }
            }

            # now unban the users
            $u->unban_user_multi(@unbanlist) if @unbanlist;
        }

        # ban users
        if ( %editvals ) {
            $submit_msg = "<?warningbar $ML{'.editmsg'} warningbar?>";
        } elsif ( $POST{ban_list} ) {
            # first remove any users from the list that are not valid users
            # FIXME: we need load_user_multiple
            my @banlist_orig = split(/,/, $POST{ban_list});
            my @banlist;
            foreach my $banusername (@banlist_orig) {
                my $banu = LJ::load_user_or_identity($banusername);
                push @banlist, $banu->id if $banu;
            }

            # make sure the user isn't over the max number of bans allowed
            my $banned = LJ::load_rel_user($u, 'B') || [];
            if (scalar @$banned >= ($LJ::MAX_BANS || 5000)) {
                $submit_msg = "<?errorbar $ML{'.error.toomanybans'} errorbar?>";
            } else {
                # now ban the users
                $u->ban_user_multi(@banlist) if @banlist;
            }

            if ( $POST{ban_note} || $POST{ban_note_previous} ) {
                $u->ban_note( \@banlist, "$POST{ban_note}\n$POST{ban_note_previous}" );
            }
        }

        $submit_msg = "<?warningbar $ML{'.success'} warningbar?>" unless $submit_msg;
    }

    my $ret;

    $ret .= "<form action='$LJ::SITEROOT/manage/banusers' method='get'>";
    $ret .= LJ::make_authas_select($remote, { authas => $GET{authas} });
    $ret .= "</form>";

    $ret .= "<div style='margin-top: 20px;'>$submit_msg</div>";

    $ret .= "<form action='$LJ::SITEROOT/manage/banusers$getextra' method='post' name='ban_users_form'>";
    $ret .= LJ::form_auth();

    # ban users
    $ret .= "<h2 style='margin-top: 20px;'>$ML{'.header.ban'}</h2>";
    $ret .= $u->is_community ? "<p>$ML{'.intro.ban.comm'}</p>" : "<p>$ML{'.intro.ban.self'}</p>";
    $ret .= LJ::html_textarea({
        name => "ban_list",
        rows => 3,
        cols => 50,
        value => $editvals{user},
    });

    # add note if desired
    $ret .= "<h2 style='margin-top: 20px;'>$ML{'.header.bannote'}</h2>";
    $ret .= $u->is_community ? "<p>$ML{'.intro.bannote.comm'}</p>" : "<p>$ML{'.intro.bannote.self'}</p>";
    $ret .= "<p>$ML{'.editwarn'}</p>";

    # because we may have input from multiple community admins
    # separate the old note from the new note;
    # community admins can still edit the existing notes
    my $separate_add_from_edit = $u->is_community && defined $editvals{note};

    $ret .= LJ::html_textarea({
        name => "ban_note",
        rows => 3,
        cols => 50,
        value => $separate_add_from_edit ? "" : $editvals{note},
    });

    if ( $separate_add_from_edit ) {
        $ret .= "<br />" . LJ::labelfy( "ban_note_add", $ML{'.note.previous'} ) . "<br />";
        $ret .= LJ::html_textarea({
            name => "ban_note_previous",
            id   => "ban_note_previous",
            rows => 3,
            cols => 50,
            value => $editvals{note},
        });
    }

    # unban users
    $ret .= "<h2 style='margin-top: 20px;'>$ML{'.header.unban'}</h2>";
    my $banned = $u->banned_userids;
    if ($banned && @$banned) {
        my $us = LJ::load_userids(@$banned);
        my $notes = $u->ban_note( $banned );

        $ret .= $u->is_community ? "<p>$ML{'.intro.unban.comm'}</p>" : "<p>$ML{'.intro.unban.self'}</p>";
        $ret .= "<table class='userslist-table' cellspacing=0 cellpadding=0><thead><tr><th>";
        $ret .= LJ::html_check({ id => 'all', name => 'all', onchange =>
                "var inputs=document.ban_users_form.getElementsByTagName('input');
                for (var i = 0; i < inputs.length; i++) {
                    if (inputs[i].type == 'checkbox' && inputs[i].getAttribute('id') !== 'all') {
                        inputs[i].checked = this.checked;
                    }
                }",
	            onclick=>
                "var inputs=document.ban_users_form.getElementsByTagName('input');
                for (var i = 0; i < inputs.length; i++) {
                    if (inputs[i].type == 'checkbox' && inputs[i].getAttribute('id') !== 'all') {
                        inputs[i].checked = this.checked;
                    }
               }", selected => 0 });
        $ret .= "</th><th>$ML{'/community/members.bml.key.user'}";
        $ret .= "</th><th colspan='2'>$ML{'.note'}";
        $ret .= "</th></tr></thead>\n";

		my $rc = 0;

        foreach my $banuid (@$banned) {
            my $bu = $us->{$banuid};
            next unless $bu;
            my $note = $notes->{$banuid} || '';
            LJ::CleanHTML::clean_subject( \$note );
            $note = LJ::html_newlines( $note );

            # sets the class for alternating rows
            my $rclass = ($rc++ & 1) ? 'even' : 'odd';
            $ret .= "<tr class='$rclass'>";
            $ret .= "<td>" . LJ::html_check({
                name => "unban_user",
                value => $banuid,
            }) . "</td>";
            $ret .= "<td>" . $bu->ljuser_display . "&nbsp;&nbsp;</td>";
            $ret .= "<td>$note</td><td>";
            if ( $note ) {
                # encourage the user to edit the existing note
                $ret .= LJ::html_submit( "edit_ban_$banuid" => $ML{'.btn.edit'});
            }
            $ret .= "</td></tr>\n";
        }
        $ret .= "</table>";
    } else {
        $ret .= $u->is_community ? "<p>$ML{'.intro.unban.comm.none'}</p>" : "<p>$ML{'.intro.unban.self.none'}</p>";
    }

    $ret .= "<p>" . LJ::html_submit($ML{'.btn.banunban'}) . "</p>";
    $ret .= "</form>";

    return $ret;
}
_code?>
<=body
title=><?_code return $title; _code?>
head<=
<?_code return $headextra; _code?>
<=head
page?>
