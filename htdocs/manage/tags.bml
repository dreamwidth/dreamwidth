<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
body<=
<?_code
{
    use strict;
    use vars qw(%POST %GET $headextra);

    LJ::set_active_crumb('managetags');

    return "<?h1 $ML{'Error'} h1?><?p $ML{'/edittags.bml.disabled'} p?>"
        unless LJ::is_enabled('tags');

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    LJ::need_res( "js/tags.js" );
    LJ::need_res( { priority => $LJ::OLD_RES_PRIORITY }, "stc/tags.css" );

   $headextra = <<HEAD;
<script type="text/javascript">
    var ml = new Object();

    ml.counts_label = "$ML{'.label.counts'}";
    ml.public_label = "$ML{'.label.public'}";
    ml.private_label = "$ML{'.label.private'}";
    ml.trusted_label = "$ML{'.label.trusted'}";
    ml.filters_label = "$ML{'.label.filters'}";
    ml.total_label = "$ML{'.label.total'}";
    ml.security_label = "$ML{'.label.security'}";
    ml.na_label = "$ML{'.label.notapplicable'}";
    ml.rename_btn = "$ML{'.button.rename'}";
    ml.merge_btn = "$ML{'.button.merge'}";

</script>
HEAD

    my $authas = $GET{'authas'} || $remote->{'user'};
    my $u = LJ::get_authas_user($authas);
    return LJ::bad_input($ML{'error.invalidauth'})
        unless $u;
    my $ret;

    # do user requested changes
    my $add_text = $ML{'.addnew'};
    if (LJ::did_post()) {
        return "<b>$ML{'Error'}</b> $ML{'error.invalidform'}" unless LJ::check_form_auth();

        # Adding new tags
        $POST{add} = 1 if $POST{'add.x'} or $POST{'add.y'}; # image submit
        if ($POST{add} or ($POST{'add_field'} && $POST{'add_field'} ne $add_text)) {
            my $tagerr = "";
            my $rv = LJ::Tags::create_usertag($u, $POST{'add_field'}, { display => 1, err_ref => \$tagerr });
            $ret .= "<?errorbar $tagerr errorbar?>" unless $rv;
        }

        # Deleting tags
        if ($POST{delete}) {
            foreach my $id (split /\0/, $POST{tags}) {
                $id =~ s/_.*//;
                LJ::Tags::delete_usertag( $u, 'id', $id );
            }
        }

        if ($POST{rename}) {
            my @tagnames = map { s/\d+_//; $_; } split /\0/, $POST{tags};
            my $new_tag = LJ::trim($POST{rename_field});
            if ( $new_tag =~ /,/ ) {
                $ret .= "<?errorbar $ML{'.error.rename.multiple'} errorbar?>";
            } else {
                my $tagerr = "";
                my $rv = LJ::Tags::rename_usertag( $u, 'name', $tagnames[0], $new_tag, \$tagerr );
                $ret .= "<?errorbar $tagerr errorbar?>" unless $rv;
            }
        }

        if ( $POST{merge} ) {
            my @tagnames = map { s/\d+_//; $_; } split /\0/, $POST{tags};

            # get the new name for the tags
            my $new_tagname = LJ::trim( $POST{merge_field} );

            if ( $new_tagname =~ /,/ ) {
                $ret .= "<?errorbar $ML{'.error.rename.multiple'} errorbar?>";
            } else {
                my $tagerr = "";
                my $rv = LJ::Tags::merge_usertags( $u, $new_tagname, \$tagerr, @tagnames );
                $ret .= "<?errorbar $tagerr errorbar?>" unless $rv;
            }
        }

        if ($POST{'show posts'}) {
            # this should do some cute ajax display later.
            my $tags = LJ::Tags::get_usertags( $u ); # we redirect, so we don't double load anyway
            my $taglist = LJ::eurl(join ',', map { $tags->{$_}->{name} } map { /^(\d+)_/; $1; } split /\0/, $POST{tags});
            BML::redirect( $u->journal_base . "/tag/$taglist" );
        }

        if ($POST{'save_levels'}) {
            my $add = $POST{"add_level"};
            my $control = $POST{"control_level"};

            if ( $add =~ /^(?:private|public|protected|author_admin|group:\d+)$/
                && $control =~ /^(?:private|public|protected|group:\d+)$/ ) {

                $u->set_prop("opt_tagpermissions", "$add,$control");
            } else {
                $ret .= "<?errorbar $ML{'.error.invalidsettings'} errorbar?>";
            }
        }
    }

    # get tags list!
    my $tags = LJ::Tags::get_usertags( $u );
    my $tagcount = scalar keys %$tags;

    # create histogram usage levels from 'uses' counts
    # for 'cell bars' icon display
    if ($tagcount) {
        my (
            @data,
            $groups,
            $max, $min,
            $width,
            %range,
        );

        $groups = 5;

        # order by use
        @data = map { [ $_, $tags->{$_}->{uses} ] }
          sort { $tags->{$a}->{uses} <=> $tags->{$b}->{uses} } keys %$tags;

        # get min use, max use, and group 'width'
        $max = $data[-1]->[1];
        $min = $data[0]->[1];
        $width  = ($max - $min) / $groups || 1;

        # pre calculate ranges for groups
        for (1..$groups) {
             $range{$_} = [];
             @{$range{$_}}[0] = $min + ($_ - 1) * $width;  # low
             @{$range{$_}}[1] = $min + ($_ * $width);      # high
        }

        # iterate through sorted data, adding
        # histogram group to the tags data structure.
        foreach (@data) {
            my ($id, $use) = (@$_);
            GROUP:
            for (1..$groups) {
                if ($use >= @{$range{$_}}[0] && $use <= @{$range{$_}}[1]) {
                    $tags->{$id}->{histogram_group} = $_;
                    last GROUP;
                }
            }
        }
    }

    # button titles (mouseovers)
    my $mo = {
        create => $ML{'.hint.create'},
        rename => $ML{'.hint.rename'},
        delete => $ML{'.hint.delete'},
        entries => $ML{'.hint.entries'},
        merge => $ML{'.hint.merge'},
    };

    my $sp = '&nbsp;&nbsp;';

    # user switcher
    $ret .= "<form method='GET'>\n";
    $ret .= LJ::make_authas_select($remote, { authas => $u->{user} });
    $ret .= "</form>\n";

    $ret .= "<?p $ML{'.intro'} p?>";

    # convert tags data structure to javascript array for quick prop display.
    # this is temporary, we'll eventually do a smarter
    # xml-rpc call instead of requiring this.
    $ret .= "\n<script type='text/javascript'>\n";
    $ret .= "var tags = new Array();\n";

    foreach (sort keys %$tags) {
        my $tag = $tags->{$_};
        my $sec = $tag->{security};
        my ($pub, $pri, $fr, $tot) =
                ($sec->{public}, $sec->{private},
                 $sec->{protected}, $tag->{uses});
        my $grp = $tot - ($pub+$pri+$fr);
        $ret .= "tags[$_] = [ '" . LJ::ejs($tag->{name}) . "', '$tag->{security_level}', $pub, $pri, $fr, $grp, $tot ];\n";
    }
    $ret .= "</script>\n";

    my $formauth = LJ::form_auth();
    # the extra 'padding' div is a workaround for how
    # IE incorrectly renders fieldsets.
    $ret .= qq{
    <form method="POST" name="tagform" id="tagform">
    $formauth
    <table summary='' id="table_managetags" cellpadding="0" cellspacing="0" align="center">
    <tr><td valign="top">
        <fieldset>
            <legend>};
    $ret .= BML::ml( '.label.yours', { tagnum => $tagcount, tagmax => $u->count_tags_max } );
    $ret .= qq(</legend>\n            <div style="padding-top: 6px;">);

    my $tagsort = sub {
        $GET{sort} eq 'use' ?
            $tags->{$b}->{uses} <=> $tags->{$a}->{uses} :
            $tags->{$a}->{name} cmp $tags->{$b}->{name};
    };

    if ($tagcount) {
        $ret .= "<select name='tags' id='tags' multiple='multiple' class='multiple-select tagbox' " .
                "onChange='tagselect(this)'>";
        foreach (sort { $tagsort->() } keys %$tags) {
            my $tag = $tags->{$_};
            my $etag = LJ::ehtml( $tag->{name} );

            # keep id and value for both JS and perl
            my $value = $_ . '_' . $etag;

            $ret .= "<option class='level$tag->{histogram_group}' ";
            $ret .= "value='$value'>$etag</option>";
        }
        $ret .= "</select>\n                ";
        $ret .= "<div class='tagsort'>";
        $ret .= $GET{sort} eq 'use' ? BML::ml('.sort.a', { aopts => "href='$LJ::SITEROOT/manage/tags?authas=$u->{user}&sort=alpha'" }) :
                                      BML::ml('.sort.b', { aopts => "href='$LJ::SITEROOT/manage/tags?authas=$u->{user}&sort=use'" });
        $ret .= '</div>';
    } else {
        $ret .= "<div class='taginfo'>$ML{'.none'}</div>"
    }

    $ret .= '<div style="margin-top: 10px">';
    $ret .= LJ::html_text(
        {
            name  => 'add_field',
            size  => 20,
            style => 'width: 260px',
            class => 'tagfield',
            value => LJ::did_post() ? "" : $add_text,
            onClick => "reset_field(this, '$add_text')",
        }
    );
    $ret .= '&nbsp;';
    $ret .= "<input type='image' name='add' src='/img/rte/post_button_text_larger.gif'
                    border='0' align='middle' title='$mo->{create}'
                    onClick='return validate_input(this, \"add_field\", \"$add_text\")'>";

    $ret .= '
                </div>
            </div>
        </fieldset>
    </td>
    <td valign="top">';

    if ($tagcount) {
        $ret .= "<fieldset><legend>$ML{'.label.tags'}</legend>";
        $ret .= '<div style="padding-top: 6px;">';
        $ret .= "<div id='selected_tags'>&nbsp;</div>";

        $ret .= "<div style='white-space: nowrap'>";
        $ret .= LJ::html_text(
            {
                name    => 'rename_field',
                size    => 30,
                class   => 'tagfield',
                onClick => 'reset_field(this)',
            }
         );
        $ret .= $sp;
        $ret .= LJ::html_submit(
            'rename', $ML{'.button.rename'},
            {
                class   => 'btn',
                title   => $mo->{rename},
                onClick => 'return validate_input(this, "rename_field")',
             }
         );
        $ret .= '<br /><br />';

        $ret .= LJ::html_text(
            {
                 name    => 'merge_field',
                 size    => 30,
                 class   => 'tagfield',
                 onClick => 'reset_field(this)',
             }
          );
         $ret .= $sp;
         my $merge_conf = LJ::ejs( $ML{'.confirm.merge'} );
         $ret .= LJ::html_submit(
             'merge', $ML{'.button.merge'},
             {
                 class   => 'btn',
                 title   => $mo->{merge},
                 onClick => "return confirm('$merge_conf')",
              }
          );

         $ret .= '<br /><br />';

        my $del_conf = LJ::ejs( $ML{'.confirm.delete'} );
        $ret .= LJ::html_submit(
            'delete', $ML{'.button.delete'},
            {
                class => 'btn',
                title => $mo->{delete},
                onClick => "return confirm('$del_conf')",
            }
          ) . $sp;
         $ret .= LJ::html_submit(
            'show posts', $ML{'.button.show'},
            {
                class => 'btn',
                title => $mo->{entries},
            }
          );

        $ret .= '</div><br /><div id="tag_props">&nbsp;</div>';

        $ret .= '
            </div>
            </fieldset>
        </td></tr>';
    } else {
        $ret .= '&nbsp;</td></tr>';
    }

    $ret .= '<tr><td colspan="2"><br /><fieldset><legend>' . $ML{'.label.settings'}. '</legend>';
    $ret .= '<div style="padding-top: 6px;">';

    my @control_groups = ("public", $ML{'.setting.public'});

    if ($u->is_person) {
        push @control_groups, ("protected", $ML{'.setting.trusted'});
        push @control_groups, ("private", $ML{'.setting.private'});
    } else {
        push @control_groups, ("protected", $ML{'.setting.members'});
        push @control_groups, ("private", $ML{'.setting.maintainers'});
    }

    my @add_groups = @control_groups;
    push @add_groups, ( "author_admin", $ML{'.setting.author_admin'} )
        if $u->is_community;

    my @grouplist = $u->trust_groups;
    my @custom_groups;
    push @custom_groups, map { "group:" . $_->{groupnum}, $_->{groupname} } @grouplist;

    push @control_groups, @custom_groups;
    push @add_groups, @custom_groups;

    my $security = LJ::Tags::get_permission_levels($u);

    $ret .= "<div class='tagsec'> "
        . LJ::html_select({ name => 'control_level', selected => $security->{control} }, @control_groups)
        . " $ML{'.setting.desc.control2'} </div>";

    $ret .= "<div class='tagsec'>"
            . LJ::html_select({ name => 'add_level', selected => $security->{add} }, @add_groups)
            . " $ML{'.setting.desc.add'} </div>";

    $ret .= "<div align='center'>";
    $ret .= LJ::html_submit(
         'save_levels', $ML{'.button.save'},
         {
             class   => 'btn',
             title   => 'Save',
         });

    $ret .= '</div></div></fieldset></td></tr>';

    $ret .= '</table></form>';



    return $ret;

} _code?>
<=body
bodyopts=>onLoad="initTagPage()"
title=><?_code return $ML{'.title2'}; _code?>
head<=
<?_code return $headextra; _code?>
<=head
page?>
