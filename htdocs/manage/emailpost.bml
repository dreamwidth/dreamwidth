<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=><?_ml .title _ml?>
head<=
    <style type="text/css">

    fieldset
    {
        border: 1px solid #cdcdcd;
        margin-bottom: 15px;
    }

    legend
    {
        padding: 2px 10px 2px 10px;
        border: 1px solid #cdcdcd;
        font-size: 14px;
        font-weight: bold;
    }

    .settings td
    {
        padding: 3px;
    }

    </style>
<=head
body<=
<?_code
{
    use strict;
    use vars qw(%POST %GET);
    use DW::API::Key;

    return $ML{'.error.sitenotconfigured'} unless $LJ::EMAIL_POST_DOMAIN;

    my $u = LJ::get_remote();
    return "<?needlogin?>" unless $u;
    return $LJ::MSG_READONLY_USER if $u->is_readonly;
    my @props =
      qw/
      emailpost_pin emailpost_allowfrom
      emailpost_userpic emailpost_security
      emailpost_comments emailpost_gallery
      /;

    my ($mode, $type) = ($GET{mode}, $GET{type});
    if ($u) {
        $u->preload_props( @props );
    } else {
        $mode = 'help';
    }

#--------------------------------------------------------------------------

    # Help text
    if ($mode eq 'help') {

        my $ret;
        my $user = $u ? $u->{user} : $ML{'.help.exampleusername'};
        my $community = $ML{'.help.examplecommunity'};
        my $user_hyphen = $ML{'.help.exampleuserhyphen'};
        my $comm_hyphen = $ML{'.help.examplecommhyphen'};
        my $need_login = (! $u && ! $GET{mode}) ? 1 : 0;

        my @address  = split(/\s*,\s*/, $u->{emailpost_allowfrom});
        my $addr     = $address[0] || $ML{'.help.allowedsenderemail'};
        $addr =~ s/\(\w\)$//;
        my $pin          = $u->{emailpost_pin} || $ML{'.help.pin'};
        my $to           = BML::ml('.help.to', {'email' => $user . '@' . $LJ::EMAIL_POST_DOMAIN}) . '<br />';
        my $to_pin       = BML::ml('.help.to', {'email' => "$user+$pin" . '@' . $LJ::EMAIL_POST_DOMAIN}) . '<br />';
        my $to_pin_bold  = BML::ml('.help.to', {'email' => "$user<b>+$pin</b>" . '@' . $LJ::EMAIL_POST_DOMAIN}) . '<br />';
        my $to_community = BML::ml('.help.to', {'email' => "$user.<b>$community</b>+$pin" . '@' . $LJ::EMAIL_POST_DOMAIN}) . '<br />';
        my $to_hyphens   = BML::ml('.help.to', {'email' => "<b>$user_hyphen.$comm_hyphen</b>+$pin" . '@' . $LJ::EMAIL_POST_DOMAIN}) . '<br />';
        my $subject      = BML::ml('.help.subject', {'pin' => ''}) . '<br /><br />';
        my $subject_pin  = BML::ml('.help.subject', {'pin' => "<b>+$pin</b>"}) . '<br /><br />';
        my $from         = BML::ml('.help.from', {'email' => $addr}) . '<br />';
        my $body         = $ML{'.help.body'};

        if ($need_login) {
            $ret .= "<?h1 $ML{'.error.notloggedin.header'} h1?>";
            $ret .= "<?p " . LJ::error_noremote() . " p?>";
        }

        my @topics = (
            {
                name  => 'pin',
                title => $ML{'.help.pinusage.header'},
                url   => '?mode=help&type=pin',
                text  => qq{
                    <?h1 $ML{'.help.pinusage.header'} h1?><br />

                    <fieldset><legend>$ML{'.help.pinusage.inemail.header'}</legend>
                    <?emailex
                    $to_pin_bold
                    $from
                    $subject
                    $body
                    emailex?></fieldset>

                    <fieldset><legend>$ML{'.help.pinusage.insubject.header'}</legend>
                    <?emailex
                    $to
                    $from
                    $subject_pin
                    $body
                    emailex?></fieldset>

                    <fieldset><legend>$ML{'.help.pinusage.inbody.header'}</legend>
                    <?emailex
                    $to
                    $from
                    $subject
                    <b>+$pin</b> $body
                    emailex?></fieldset>
                }
            },

            {
                name  => 'optional',
                title => $ML{'.help.optionalfeatures.header'},
                url   => '?mode=help&type=optional',
                text  => qq{
                    <?h1 $ML{'.help.optionalfeatures.header'} h1?><br />

                    <fieldset><legend>$ML{'.help.optionalfeatures.posttocommunity.header'}</legend>
                    <?p $ML{'.help.optionalfeatures.posttocommunity.text'} p?>
                    <?emailex
                    $to_community
                    $from
                    $subject
                    $body
                    emailex?></fieldset>

                    <fieldset><legend>$ML{'.help.optionalfeatures.removetext.header'}</legend>
                    <?p } . BML::ml('.help.optionalfeatures.removetext.text', {'dashes' => "--", 'underscores' => "__"}) . qq{ p?>
                    <?emailex
                    $to_pin
                    $from
                    $subject
                    $body
                    <br />--<br />
                    <font color='red'>
                    $ML{'.help.optionalfeatures.removetext.example'}
                    </font>emailex?></fieldset>

                    <fieldset><legend>$ML{'.help.optionalfeatures.hyphens.header'}</legend>
                    <?p $ML{'.help.optionalfeatures.hyphens.text'} p?>
                    <?emailex
                    $to_hyphens
                    $from
                    $subject
                    $body
                    emailex?></fieldset>
                }
            },

            {
                name  => 'headers',
                title => BML::ml( '.help.headers.header2' ),
                url   => '?mode=help&type=headers',
                text  => qq{
                    <?h1 } . BML::ml( '.help.headers.header2' ) . qq{ h1?><br />

                    <fieldset><legend>$ML{'.help.headers.options.header'}</legend>
                    <?p $ML{'.help.headers.options.text'} p?>
                    <?emailex
                    $to_pin
                    $from
                    $subject
                    <b>post-icon:</b> $ML{'.help.headers.options.userpic.example'}<br />
                    <b>post-format:</b> $ML{'.help.headers.options.format.example'}<br />
                    <b>post-tags:</b> $ML{'.help.headers.options.tags.example'}<br />
                    <b>post-mood:</b> $ML{'.help.headers.options.mood.example'}<br />
                    <b>post-music:</b> $ML{'.help.headers.options.music.example'}<br />
                    <b>post-location:</b> $ML{'.help.headers.options.location.example'}<br />
                    <b>post-comments:</b> } . BML::ml('.help.headers.options.comments.example', {'off' => 'off', 'noemail' => 'noemail'}) . qq{<br />
                    <br />
                    $body
                    emailex?></fieldset>

                    <fieldset><legend>$ML{'.help.headers.security.header'}</legend>
                    <?p } . BML::ml('.help.headers.security.text', {'header' => 'post-security'}) . qq{ p?>
                    <div style="margin-left:40px">
                    <b>post-security:</b> public<br />
                    <div style="margin-left:40px">$ML{'.help.headers.security.public.desc'}</div><br />
                    </div>
                    <div style="margin-left:40px">
                    <b>post-security:</b> private<br />
                    <div style="margin-left:40px">$ML{'.help.headers.security.private.desc'}</div><br />
                    </div>
                    <div style="margin-left:40px">
                    <b>post-security:</b> access (or friends)<br />
                    <div style="margin-left:40px">$ML{'.help.headers.security.friends.desc'}</div><br />
                    </div>
                    <div style="margin-left:40px">
                    <b>post-security:</b> $ML{'.help.headers.security.group.word'}<br />
                    <div style="margin-left:40px">$ML{'.help.headers.security.group.desc'}
                    <br />} . BML::ml('.help.headers.security.group.example', {'header' => 'post-security:'}) . qq{</div><br />
                    </div></fieldset>

                    <fieldset><legend>$ML{'.help.headers.compat.header'}</legend>
                    <?p } . BML::ml( '.help.headers.compat.text', { 'sitename' => $LJ::SITENAME } ) . qq{ p?>
                    </fieldset>
                }
            }
        );

        # index by name, record order
        my %topics_by_name;
        my $ct = 0;
        foreach my $t (@topics) {
            $t->{order} = $ct;
            $topics_by_name{$t->{name}} = $t;
            $ct++;
        }
        my $topic = $topics_by_name{$type};

        if (! $type) {
            $ret .= "<?h1 $ML{'.help.header'} h1?>";
            $ret .= "<?p " . BML::ml('.help.text1', {'plus' => "<b>+</b>"}) . " p?>";
            $ret .= "<?p $ML{'.help.text2'} p?>";
        }

        # list of topics
        $ret .= '<ul>';
        foreach (@topics) {
            $ret .= '<li>';
            if ($type eq $_->{name}) {
                $ret .= "<b>$_->{title}</b>";
            } else {
                $ret .= "<a href='$_->{url}'>$_->{title}</a>";
            }
            $ret .= '</li>';
        }
        $ret .= "<li><a href='emailpost'>$ML{'.help.manage.header'}</a></li>";
        $ret .= '</ul>';
        $ret .= '<hr /><br />' if $type;

        # content
        $ret .= $topic->{text} if $topic;
        $ret .= "<br />";

        # next/last links
        if ($topic->{order} && $topics[$topic->{order} - 1]) {
            my $lastt = $topics[$topic->{order} - 1];
            $ret .= "[ &lt;&lt; <a href='$lastt->{url}'>$lastt->{title}</a> ] &nbsp; ";
        }
        if ($topics[$topic->{order} + 1]) {
            $topic->{order} = -1 if ! $type;
            my $nextt = $topics[$topic->{order} + 1];
            $ret .= "[ <a href='$nextt->{url}'>$nextt->{title}</a> &gt;&gt; ]";
        }

        return $ret;
    }

#--------------------------------------------------------------------------

    # Update settings
    if (LJ::did_post() && $POST{"save"}) {	    
        my @errors;

        return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>"
             unless LJ::check_form_auth();

        my $addresses = $POST{addresses};
        my $pin = $POST{pin};

        $pin =~ s/\s+//g;
        push @errors, BML::ml('.error.invalidpin', {'num' => 4})
            unless $pin =~ /^([a-z0-9]){4,20}$/i or $pin eq '';

        push @errors, BML::ml('.error.invalidpinaccount', {'sitename' => $LJ::SITENAMESHORT})
            if $pin eq $u->user;

        # Check email, add flags if needed.
        my %allowed;
        my $addrcount = 0;
        my @send_helpmessage;

        foreach (split(/\0/, $addresses)) {
            s/\s+//g;
            next unless $_;
            next if length > 80;
            $_ = lc;
            push @errors, BML::ml('.error.invalidemail', {'email' => LJ::ehtml($_)}) unless /\@/;
            $allowed{$_} = {};
            $allowed{$_}->{'get_errors'} = 1 if $POST{"check_$addrcount"};
            push @send_helpmessage, $_ if $POST{"help_$addrcount"};
            $addrcount++;
        }

        return LJ::bad_input(@errors) if @errors;

        LJ::Emailpost::Web::set_allowed_senders( $u, \%allowed );
        foreach my $prop (@props) {
            next if $prop =~ /emailpost_(allowfrom|pin)/;
            next if $u->{'prop'} eq $POST{$prop};
            if ($POST{$prop} && $POST{$prop} ne 'default') {
                $POST{$prop} = undef if $prop eq 'emailpost_gallery' &&
                                        $POST{$prop} eq 'LJ_emailpost';
                $u->set_prop( $prop, $POST{$prop} );
            } else {
                $u->set_prop( $prop, undef );
            }
        }
        $u->set_prop( "emailpost_pin", $pin );
        LJ::Setting::EmailPosting->email_helpmessage( $u, $_ )
            foreach @send_helpmessage;

        my $ret;
        $ret .= "<?h1 $ML{'.success.header'} h1?>";
        $ret .= "<?p $ML{'.success.saved'} p?>";
        $ret .= "<?p " . BML::ml('.success.info', {'aopts' => "href='$LJ::SITEROOT/manage/emailpost?mode=help'"}) . " p?>";
        $ret .= "<?p $ML{'.success.helpmessage'} p?>" if @send_helpmessage;
        if ($LJ::HELPURL{emailpost}) {
            $ret .= "<?h1 $ML{'.instructions.header'} h1?>";
            $ret .= "<?p FIXME: link to helpurl p?>";
        }
        return $ret;

	}

#--------------------------------------------------------------------------

    my $ret;

    # if we just reset the token, add a header but show the original page still
    if ( LJ::did_post() && $POST{"action:token"}) {

        return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>"
            unless LJ::check_form_auth();

        $ret .= $u->generate_emailpost_auth
                    ? "<div class='highlight-box'>$ML{'.reply.status.success'}</div>"
                    : "<div class='error-box'>$ML{'.reply.status.error'}</div>";
    }

    if ( LJ::did_post() && $POST{"action:apikey"}) {
        
        return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>"
             unless LJ::check_form_auth();

        $ret .= DW::API::Key->new_for_user($u)
                    ? "<div class='highlight-box'>$ML{'.api.status.success'}</div>"
                    : "<div class='error-box'>$ML{'.api.status.error'}</div>";
    }

    if ( LJ::did_post() && $POST{"action:delete"}) {
        
        return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>"
            unless LJ::check_form_auth();

        my $deleted_keys .= $POST{"delete"};
        foreach (split(/\0/, $deleted_keys)) {            
            s/\s+//g;
            next unless $_;
            my $key = DW::API::Key->get_key($_);
            
            if (defined $key) {
                $ret .= $key->delete($u) 
                    ? "<div class='highlight-box'>" . BML::ml('.api.delete.success', {'key' => $key->{keyhash}}) . "</div>"
                    : "<div class='highlight-box'>" . BML::ml('.api.delete.error', {'key' => $key->{keyhash}}) . "</div>";
            }

        }
    }

    # Initial page
    my $addrlist = LJ::Emailpost::Web::get_allowed_senders( $u );
    my (@address, $res);
    push @address, $_ foreach sort keys %$addrlist;

    # get userpics and friendgroups
    $res = LJ::Protocol::do_request(
        "login",
        {
            "ver" => $LJ::PROTOCOL_VER,
            "username"     => $u->{'user'},
#            "friendgroups" => 1,
            "getpickws"    => 1,
        },
        undef,
        { "noauth" => 1, }
    );

    my $apikeys = DW::API::Key->get_keys_for_user($u);
    my @trusted = $u->trust_groups;
    my @groups = map { $_->{'groupname'} } @trusted;
    my @userpics = @{ $res->{'pickws'} };

    $ret .= "<?p " . BML::ml('.intro', {'aopts' => "href='$LJ::SITEROOT/manage/emailpost?mode=help'"}) . " p?><br />";

    unless ( $u->can_emailpost ) {
        $ret .= $ML{'.sorry.acct'};
        return $ret;
    }

    $ret .= "<?h1 $ML{'.addresses.header'} h1?>";
    $ret .= "<?p $ML{'.addresses.text'} p?>";
    $ret .= "<form method='post' action='emailpost'>\n";
    $ret .= LJ::form_auth();
    $ret .= "<div style='margin-left:40px;'>";
    $ret .= "<table border=\"0\"><thead><tr><th>$ML{'.addresses.table.address'}</th>";
    $ret .= "<th>$ML{'setting.emailposting.option.senderrors'}</th>";
    $ret .= "<th>$ML{'setting.emailposting.option.helpmessage'}</th></tr></thead>";
    for(0..2) { # Limited to 3 addresses.
        $ret .= '<tr><td>';
        my $selected = 0;
        $ret .= LJ::html_text({name=>'addresses',
                value=>$address[$_], size=>40, maxlength=>80});
        $ret .= '</td><td>';
        $selected = 1 if $addrlist->{$address[$_]}->{'get_errors'};
        $ret .= '<center>' .
            LJ::html_check({name => "check_$_", selected => $selected})
            . '</center>';
        $ret .= '</td><td>';
        $ret .= '<center>' .
            LJ::html_check( { name => "help_$_", selected => 0 } )
            . '</center>';
        $ret .= '</td></tr>';
    }
    $ret .= '</table></div><br />';

    $ret .= "<?h1 $ML{'.pin.header'} h1?>";
    $ret .= "<?p " . BML::ml('.pin.text', {'num' => 4}) . " p?>";
    $ret .= "<div style='margin-left:40px;'>";
    $ret .= LJ::html_text({name=>'pin', type=>'password', value=>$u->{emailpost_pin}, maxlength=>20});
    $ret .= '</div><br />';

    $ret .= "<h1>$ML{'.reply.header'}</h1>";
    $ret .= "<p>$ML{'.reply.text'}</p>";
    $ret .= "<input type='submit' value='$ML{'.reply.button'}' name='action:token'></input>";

    $ret .= "<h1>$ML{'.api.header'}</h1>";
    $ret .= "<p>$ML{'.api.text'}</p>";
    if (@{ $apikeys }) {
        $ret .= "<table border=\"0\">";
        my $count = 0;
        for my $key (@$apikeys) {
            $ret .= '<tr><td>';
            $ret .= $key->{keyhash};
            $ret .= '</td><td>';
            # TODO: actually support delete
            $ret .= LJ::html_check({ name => 'delete', value => $key->{keyhash} });
            $ret .= '</td></tr>';
            $count++;
        }
        $ret .= '</table><br />';
    } else {
    	$ret .= "<p><b>$ML{ '.api.none'}</b></p>";
    }
    $ret .= "<input type='submit' value='$ML{'.api.button'}' name='action:apikey'></input>";
    $ret .= "<input type='submit' value='$ML{'.api.button.delete'}' name='action:delete'></input>";


    $ret .= "<?h1 $ML{'.settings.header'} h1?>";
    $ret .= "<?p " . BML::ml('.settings.text', {'aopts' => "href='$LJ::SITEROOT/manage/emailpost?mode=help'"}) . " p?>";
    $ret .= "<div style='margin-left:40px;'>";
    $ret .= "<table summary='' cellspacing='0' class='settings'>";

    $ret .= "<tr><td colspan='2'><?h2 $ML{'.settings.entry.header'} h2?></td></tr>";
    $ret .= "<tr><td>$ML{'.settings.entry.userpic'}</td><td>";
    $ret .= LJ::html_select({ name=> 'emailpost_userpic', selected => $u->{'emailpost_userpic'} },
                            'default' => $ML{'.settings.entry.userpic.select.default'},
                            map { $_ => $_ } @userpics);
    $ret .= "</td></tr>";
    $ret .= "<tr><td>$ML{'.settings.entry.security'}</td><td>";
    $ret .= LJ::html_select({ name=> 'emailpost_security', selected => $u->{'emailpost_security'} },
                            'default' => $ML{'.settings.entry.security.select.default'},
                            'public' => $ML{'.settings.entry.security.select.public'},
                            'private' => $ML{'.settings.entry.security.select.private'},
                            'friends' => $ML{'.settings.entry.security.select.friends'},
                            '--------' => '--------',
                            map { $_ => $_ } @groups);
    $ret .= "</td></tr>";
    $ret .= "<tr><td>$ML{'.settings.entry.comments'}</td><td>";
    $ret .= LJ::html_select({ name=> 'emailpost_comments', selected => $u->{'emailpost_comments'} },
                            'default' => $ML{'.settings.entry.comments.select.default'},
                            'noemail' => $ML{'.settings.entry.comments.select.noemail'},
                            'off' => $ML{'.settings.entry.comments.select.off'});
    $ret .= "</td></tr>";

    $ret .= "</table>";
    $ret .= '</div><br />';


    $ret .= qq{<div class='action-box'><ul class='inner nostyle'>};
    $ret .= "<li>" . LJ::html_submit( 'save', $ML{'.save'}, { raw => "action=save"} ) . "</li>";
    $ret .= "</div><div class='clear-floats'></div>";
    $ret .= "</form>";
    $ret .= LJ::Hooks::run_hook('sms_footer');
    return $ret;

} _code?>
<=body
page?>
