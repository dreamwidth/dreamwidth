<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=><?_code return BML::ml('.title', { 'reqid' => $FORM{'id'}+0 }); _code?>
head<=
<?_code return LJ::robot_meta_tags(); _code?>
<=head
body<=

<?_code
{
    use strict;
    use vars qw(%FORM);
    use DW::Template;

    LJ::need_res( { group => "jquery" }, "js/jquery.supportform.js", "stc/simple-form.css" );
    LJ::set_active_resource_group( "jquery" );

    my $spid = $FORM{'id'}+0;
    my $sp = LJ::Support::load_request($spid);
    my $props = LJ::Support::load_props($spid);
    my $cats = LJ::Support::load_cats();
    my $remote = LJ::get_remote();
    LJ::Support::init_remote($remote);

    if ($FORM{'find'}) {
        my $find = $FORM{'find'};
        my $op = '<';
        my $sort = 'DESC';
        if ($find eq 'next' || $find eq 'cnext' || $find eq 'first') {
            $op = '>';
            $sort = 'ASC';
        }
        my $spcatand = '';
        if ($sp && ($find eq 'cnext' || $find eq 'cprev')) {
            my $spcatid = $sp->{_cat}->{'spcatid'} + 0;
            $spcatand = "AND spcatid=$spcatid";
        } else {
            my @filter_cats = LJ::Support::filter_cats($remote, $cats);
            return "<?h1 $ML{'.error'} h1?><?p $ML{'.error.text1'} p?>"
                unless @filter_cats;
            my $cats_in = join(",", map { $_->{'spcatid'} } @filter_cats);
            $spcatand = "AND spcatid IN ($cats_in)";
        }
        my $clause = "";
        $clause = "AND spid$op$spid" unless ($find eq 'first' || $find eq 'last');
        my $dbr = LJ::get_db_reader();
        my ($foundspid) = $dbr->selectrow_array("SELECT spid FROM support WHERE state='open' $spcatand $clause ".
                                                "ORDER BY spid $sort LIMIT 1");
        if ($foundspid) {
            return BML::redirect("see_request?id=$foundspid");
        } else {
            my $extra = $find eq "cnext" || $find eq "cprev" ? "_cat" : "" ;
            my $text = $find eq 'next' || $find eq 'cnext' ? BML::ml('.error.nonext' . $extra) : BML::ml('.error.noprev' . $extra);
            my $goback = $sp ? BML::ml('.goback.text', {request_link=>"href='see_request?id=$spid'", spid=>$spid}) : undef;
            return "<?h1 $ML{'.error'} h1?>" . $text . $goback;
        }
    }

    unless ($sp) { return "<?h1 $ML{'.error'} h1?><?p $ML{'.unknownumber'} p?>"; }
    my $sth;
    my $auth = $FORM{'auth'};

    my $email = $sp->{'reqemail'};

    my $user;
    my $user_url;

    # Get remote username and journal URL, or example user's username and journal URL
    if ( $remote ) {
        $user = $remote->user;
        $user_url = $remote->journal_base;
    } else {
        my $exampleu = LJ::load_user( $LJ::EXAMPLE_USER_ACCOUNT );
        $user = $exampleu
            ? $exampleu->user
            : "<b>[Unknown or undefined example username]</b>";
        $user_url = $exampleu
            ? $exampleu->journal_base
            : "<b>[Unknown or undefined example username]</b>";
    }

    my $u;
    my $clusterdown = 0;
    if ($sp->{'reqtype'} eq "user" && $sp->{'requserid'}) {
        $u = LJ::load_userid($sp->{'requserid'});
        unless ($u) {
            warn "Error: user '$sp->{requserid}' not found in request #$spid";
            return "<?h1 $ML{'.error'} h1?><?p Unknown user p?>";
        }

        # now do a check for a down cluster?
        my $dbr = LJ::get_cluster_reader($u);
        $clusterdown = 1 unless $dbr;

        $email = $u->email_raw if $u->email_raw;
        $u->preload_props( "stylesys", "s2_style", "schemepref" )
            unless $clusterdown;
    }

    my $winner;  # who closed it?
    if ($sp->{'state'} eq "closed") {
        my $dbr = LJ::get_db_reader();
        $sth = $dbr->prepare("SELECT u.user, sp.points FROM useridmap u, supportpoints sp ".
                             "WHERE u.userid=sp.userid AND sp.spid=?");
        $sth->execute($spid);
        $winner = $sth->fetchrow_hashref;
    }

    # get all replies
    my @replies;
    my $dbr = LJ::get_db_reader();
    $sth = $dbr->prepare("SELECT splid, timelogged, UNIX_TIMESTAMP()-timelogged AS 'age', type, faqid, userid, message " .
                         "FROM supportlog WHERE spid=? ORDER BY timelogged");
    $sth->execute($spid);
    while (my $le = $sth->fetchrow_hashref) {
        push @replies, $le;
    }

    # load category this request is in
    my $problemarea = $sp->{_cat}->{'catname'};
    my $catkey = $sp->{_cat}->{'catkey'};

    unless (LJ::Support::can_read($sp, $remote, $auth)) {
        return "<?h1 $ML{'.error'} h1?><?p $ML{'.nothaveprivilege'} p?>";
    }

    # helper variables for commonly called methods
    my $can_close = LJ::Support::can_close($sp, $remote, $auth) ? 1 : 0;
    my $can_reopen = LJ::Support::can_reopen($sp, $remote, $auth) ? 1 : 0;
    my $helper_mode = LJ::Support::can_help($sp, $remote) ? 1 : 0;
    my $stock_mode = LJ::Support::can_see_stocks($sp, $remote) ? 1 : 0;
    my $is_poster = LJ::Support::is_poster($sp, $remote, $auth) ? 1 : 0;

    # fix up the subject if needed
    eval {
        if ($sp->{'subject'} =~ /^=\?(utf-8)?/i) {
            my @subj_data;
            require MIME::Words;
            @subj_data = MIME::Words::decode_mimewords($sp->{'subject'});
            if (scalar(@subj_data)) {
                if (!$1) {
                    $sp->{'subject'} = Unicode::MapUTF8::to_utf8({-string=>$subj_data[0][0], -charset=>$subj_data[0][1]});
                } else {
                    $sp->{'subject'} = $subj_data[0][0];
                }
            }
        }
    };


    ### request info table

    my $ret = "";
    $ret .= "<table summary='' class='support-requesttable'>\n";
    $ret .= "<tr><td valign='bottom' align='right'><b>$ML{'.from'}</b></td><td>";

    if ( $u->{'defaultpicid'} && !$u->is_suspended ) {
        my $userpic_obj = $u->userpic;
        $ret .= "<a href='" . $u->allpics_base . "'>";
        $ret .= $userpic_obj->imgtag;
        $ret .= "</a>";
    }

    # show requester name + email
    {
        my $visemail = $email;
        $visemail =~ s/^.+\@/********\@/;

        my $ename = $sp->{'reqtype'} eq 'user' ? LJ::ljuser($u) : LJ::ehtml($sp->{reqname});

        # we show links to the history page if the user is a helper since
        # helpers can always find this information anyway just by taking
        # more steps.  Show email history link if they have finduser and
        # thus once again could get this information anyway.
        my $has_sh = $remote && $remote->has_priv( 'supporthelp' );
        my $has_fu = $remote && $remote->has_priv( 'finduser' );
        my $has_vs = $remote && $remote->has_priv( 'supportviewscreened' );

        my %show_history = (
                            user  => $has_sh,
                            email => ($has_fu || ($has_sh && !$sp->{_cat}->{public_read})),
                            );

        if ($show_history{user} || $show_history{email}) {
            $ret .= $sp->{reqtype} eq 'user' && $show_history{user} ?
                    "$ename <a href=\"history?user=$u->{user}\">" . LJ::ehtml($u->{name}) . "</a>" :
                    "$ename";

            my $email_string = $has_vs || $has_sh ? " ($visemail)" : "";
            $email_string = " (<a href=\"history?email=" . LJ::eurl($email) . "\">$email</a>)" if $show_history{email};
            $ret .= $email_string;
        } else {
            # default view
            $ret .= $ename;
            $ret .= " ($visemail)" if $has_vs || $has_sh;
        }
    }
    $ret .= "</td></tr>\n";

    # uniq
    if ( $remote && ( $remote->has_priv( 'sysban', 'uniq' ) || $remote->has_priv( 'canview', 'userlog' ) ) ) {
        my $uniq = $props->{'uniq'} || "<i>$ML{'.none'}</i>";
        $ret .= "<tr><td valign='bottom' align='right'><b>$ML{'.uniq'}</b></td><td>$uniq</td></tr>\n";
    }

    # account type
    $ret .= "<tr><td align='right' valign='top'><b><span style='white-space: nowrap'>$ML{'.accounttype'}</span>:</b></td><td>";
    $ret .= LJ::Capabilities::name_caps( $u->{caps} ) || "<i>$ML{'.unknown'}</i>";
    $ret .= "</td></tr>\n";

    if ($u->{'userid'}) {
        $ret .= "<tr valign='top'><td align='right'><b>$LJ::SITENAMESHORT:</b></td><td>";

        if ($u->is_expunged) {
            $ret .= $ML{'.status.deleted.and.purged'} . "<br />";
        } elsif ($clusterdown) {
            $ret .= "<span style='color: red; font-weight: bold;'>" .
               $ML{'.unable.connect'} ."</span><br />";
        }

        if ($u->readonly) {
            $ret .= "<span style='color: red; font-weight: bold;'>" .
               $ML{'.userreadonly'} ."</span><br />";
        }

        $ret .= "$ML{'.username'}: <?ljuserf $u->{'user'} ljuserf?>";
        $ret .= "<br />$ML{'.style'}: ";
        if ($u->{'stylesys'} == 2) {
            $ret .= "(S2) ";
            if ($u->{'s2_style'}) {
                my $s2style = LJ::S2::load_style($u->{'s2_style'});
                my $pub = LJ::S2::get_public_layers(); # cached
                foreach my $lay (sort { $a cmp $b } keys %{$s2style->{'layer'}}) {
                    my $lid = $s2style->{'layer'}->{$lay};
                    unless ($lid) {
                        $ret .= "$lay: none, ";
                        next;
                    }
                    $ret .= "$lay: <a href='$LJ::SITEROOT/customize/advanced/layerbrowse?id=$lid'>";
                    $ret .= (defined $pub->{$lid} ? 'public' : 'custom') . "</a>, ";
                }
            } else {
                $ret .= $ML{'.none'};
            }
        } else {
            $ret .= "(User on S1; why?) ";
        }

        LJ::Hooks::run_hooks("support_see_request_info_rows", {
            'u' => $u,
            'email' => $email,
            'sp' => $sp,
            'retref' => \$ret,
            'remote' => $remote,
        });

        # if the user has siteadmin:users or siteadmin:* show them link to resend validation email?
        my $extraval = sub {
            return '' unless $remote && $remote->has_priv( 'siteadmin', 'users' );
            return " (<a href='$LJ::SITEROOT/register?foruser=$u->{user}'>$ML{'.resend.validation.email'}</a>)";
        };

        $ret .= "<br />" . $ML{'.email.validated'} . " ";
        if ($u->{'status'} eq "A") { $ret .= "<b>$ML{'.yes'}</b>"; }
        if ($u->{'status'} eq "N") { $ret .= "<b>$ML{'.no'}</b>" . $extraval->(); }
        if ($u->{'status'} eq "T") { $ret .= $ML{'.transitioning'} . $extraval->(); }
        $ret .= "<br />";
        $ret .= "$ML{'.cluster'}: <b>" . LJ::DB::get_cluster_description( $u->{clusterid} ) . "</b>; "
            if $u->{clusterid};
        $ret .= "$ML{'.dataversion'}: <b>$u->{dversion}</b>";
        $ret .= "<br />$ML{'.scheme'}: <b>" .
                ( $u->{schemepref} ? $u->{schemepref} : "default" ) . "</b>";

        my $view_history = $remote && $remote->has_priv( 'historyview' );
        my $view_userlog = $remote && $remote->has_priv( 'canview', 'userlog' );

        if ($view_history || $view_userlog) {
            $ret .= "<br />$ML{'.view'}: ";
            $ret .= "<a href='$LJ::SITEROOT/admin/statushistory?user=$u->{user}'>$ML{'.statushistory'}</a> "
                if $view_history;
            $ret .= "<a href='$LJ::SITEROOT/admin/userlog?user=$u->{user}'>userlog</a> "
                if $view_userlog;
        }

        if ( %LJ::BETA_FEATURES
            && LJ::Support::has_any_support_priv( $remote ) ) {
            $ret .= "<br />$ML{'.betatesting'}: ";
            my $betafeatures = join ", ", $u->prop( LJ::BetaFeatures->prop_name );
            $ret .= $betafeatures || $ML{'.no-beta'};
        }

        $ret .= "</td></tr>\n";
    }

    $ret .= "<tr><td align='right' nowrap='nowrap'><b>$ML{'.supportcategory'}:</b></td><td>";
    if (LJ::Support::can_read_cat($sp->{_cat}, $remote)) {
        $ret .= "<a href='$LJ::SITEROOT/support/help?cat=$sp->{_cat}->{'catkey'}'>$problemarea</a>";
        $ret .= " [<a href='$LJ::SITEROOT/support/see_request?id=$sp->{'spid'}&amp;find=cprev'>$ML{'.previous'}</a>|";
        $ret .= "<a href='$LJ::SITEROOT/support/see_request?id=$sp->{'spid'}&amp;find=cnext'>$ML{'.next'}</a>]";
    } else {
        $ret .= $problemarea;
    }
    $ret .= "</td></tr>\n";

    my $timecreate = LJ::time_to_http( $sp->{timecreate} );
    my $age = LJ::diff_ago_text( $sp->{timecreate} );
    $ret .= "<tr><td align='right'><b>$ML{'.timeposted'}:</b></td><td>$timecreate ($age)</td></tr>\n";
    my $state = $sp->{'state'};
    if ($state eq "open") {
        # check if it's still open or needing help or what
        if ($sp->{'timelasthelp'} > ($sp->{'timetouched'}+5)) {
            # open, answered
            $state = $ML{'.answered'};
        } elsif ($sp->{'timelasthelp'} && $sp->{'timetouched'} > $sp->{'timelasthelp'}+5) {
            # open, still needs help
            $state = $ML{'.answered.need.help'};
        } else {
            # default
            $state = "<b><span style='color: #ff0000;'>$ML{'.open'}</span></b>";
        }
    }
    if ($state eq "closed" && $winner && LJ::Support::can_see_helper($sp, $remote)) {
        my $s = $winner->{'points'} > 1 ? "s" : "";
        my $wuser = $winner->{'user'};
        $state .= " (<b>$winner->{'points'}</b> point$s to ";
        $state .= LJ::ljuser($wuser, { 'full' => 1 }) . ")";
    }
    $ret .= "<tr><td align='right'><b>$ML{'.status'}:</b></td><td>$state";
    if ($can_close || $can_reopen) {
        if ($sp->{'state'} eq "open" && $can_close) {
            $ret .= ", <a href='act?close;$sp->{'spid'};$sp->{'authcode'}'><b>$ML{'.close.without.credit'}</b></a>";
        } elsif ($sp->{state} eq 'closed') {
            my $permastatus = LJ::Support::is_locked($sp);
            $ret .= $sp->{'state'} eq "closed" && !$permastatus ?
                    ", <a href='act?touch;$sp->{'spid'};$sp->{'authcode'}'><b>$ML{'.reopen.this.request'}</b></a>" : "";
            if (LJ::Support::can_lock($sp, $remote)) {
                $ret .= $permastatus ?
                    ", <a href='act?unlock;$sp->{spid};$sp->{authcode}'><b>$ML{'.unlock.request'}</b></a>" :
                    ", <a href='act?lock;$sp->{spid};$sp->{authcode}'><b>$ML{'.lock.request'}</b></a>";
            }
        }
    }
    $ret .= "</td></tr>\n";
    $ret .= "<tr><td align='right'><b>$ML{'.summary'}:</b></td><td><span style='font-size: 1.1em'><b>" . LJ::ehtml($sp->{'subject'}) . "</b></span></td></tr>\n";
    $ret .= "</table>\n";

    ### end request info table

    LJ::Hooks::run_hooks("support_see_request_html", {
        'u' => $u,
        'email' => $email,
        'sp' => $sp,
        'retref' => \$ret,
        'remote' => $remote,
    });

    # put in a "this is private!" box if this is a private request and the user viewing
    # this page is the person who opened the request
    if (!$sp->{_cat}->{public_read} && $is_poster) {
        $ret .= "<div style='margin-top: 15px; margin-bottom: 15px; padding: 5px; " .
                "text-align: center; background-color: #ffff00; border: solid 2px red;'>" .
                $ML{'.private.request'}."</div>";
    }

    my @screened;
    my $curlang = BML::get_language();

    ### reply loop
    foreach my $le (@replies)
    {
        my $up = LJ::load_userid( $le->{userid} );
        my $remote_is_up = $remote && $remote->equals( $up );

        next if $le->{type} eq "internal" && ! ( LJ::Support::can_read_internal( $sp, $remote )
                                                 || $remote_is_up );
        next if $le->{type} eq "screened" && ! ( LJ::Support::can_read_screened( $sp, $remote )
                                                 || $remote_is_up );
        next if $le->{type} eq "screened" && $up && !$up->is_visible;

        push @screened, $le if $le->{type} eq "screened";

        my $message = $le->{message};
        my %url;
        my $urlN = 0;

        $message = LJ::ehtml($message);
        $message =~ s/^\s+//;
        $message =~ s/\s+$//;
        $message =~ s/\n( +)/"\n" . "&nbsp;&nbsp;"x length($1)/eg;
        $message =~ s/\n/<br \/>\n/g;
        $message = LJ::auto_linkify($message);

        # special case: original request
        if ($le->{'type'} eq "req") {
            # insert support diagnostics from props
            $message .= "<?hr?><strong>$ML{'.diagnostics'}</strong> " . LJ::ehtml($props->{useragent}) if $props->{useragent};

            $ret .= "<div style='margin-top: 15px;'>\n";
            $ret .= "<b>$ML{'.original.request'}:</b><br />\n";
            $ret .= "<div class='requestdiv'>\n$message\n</div></div>";
            next;
        }

        # print anchor for links to jump here
        $ret .= "<a name='e$le->{splid}'></a>";

        # reply header
        my $header = "";
        if ($up && LJ::Support::can_see_helper($sp, $remote)) {
            my $picid = $up->get_picid_from_keyword( '_support' ) || $up->{defaultpicid};
            my $icon = $picid ? LJ::Userpic->new( $up, $picid ) : undef;
            $header = "<table summary='' style='margin-top: 15px;'><tr valign='bottom'>";
            if ( $icon && !$up->is_suspended ) {
                my $alt = $up->display_name;
                my $src = $icon->url;
                my ( $width, $height ) = $icon->dimensions;
                $header .= "<td><img src='$src' width='$width' height='$height' hspace='3' alt='$alt'/></td>";
            }
            $header .= "<td>" . LJ::ljuser( $up, { full => 1 } );
            $header .= " - " . $up->name_html unless $up->is_suspended;
            $header .= "</td></tr></table>\n"
        }

        my $what = $ML{'.answer'};
        if ($le->{'type'} eq "internal") { $what = $ML{'.internal.comment'}; }
        elsif ($le->{'type'} eq "comment") { $what = $ML{".comment"}; }
        elsif ($le->{'type'} eq "screened") { $what = $ML{'.screened.response'}; }

        my $link = "<a href='$LJ::SITEROOT/support/see_request?id=$spid#e$le->{splid}'>#$le->{splid}</a>";
        $header .= "<span style='font-size: 0.9em;'><b>$what</b> ($link)</span><br />";

        my $timehelped = LJ::time_to_http($le->{'timelogged'});
        my $age = LJ::ago_text($le->{'age'});
        $header .= "<b>$ML{'.posted'}:</b> $timehelped ($age)";
        if ($can_close && $sp->{'state'} eq "open" && $le->{'type'} eq "answer") {
            $header .= ", <a href='act?close;$sp->{'spid'};$sp->{'authcode'};$le->{'splid'}'><b>$ML{'.credit.fix'}</b></a>";
        }
        if ( $helper_mode && $le->{type} eq "screened" ) {
            $header .= " <span class='approve' data-dw-screened='$le->{splid}'></span>";
        }

        my $bordercolor = "default";
        if ($le->{'type'} eq "internal") { $bordercolor = "internal"; }
        if ($le->{'type'} eq "answer")   { $bordercolor = "answer"; }
        if ($le->{'type'} eq "screened") { $bordercolor = "screened"; }

        # reply
        $ret .= "$header<br />\n";
        $ret .= "<table summary='' class='support-requesttable-$bordercolor'>\n";
        $ret .= "<tr><td align='center'>\n";
        if ($le->{faqid}) {
            # faq question
            my $faq = LJ::Faq->load( $le->{faqid}, lang => $curlang );
            $faq->render_in_place;
            $ret .= "<div style='display: table; padding: 3px; margin-left: auto; margin-right: auto;'>\n";
            # whitespace between these two DIVs is necessary for proper
            # rendering in IE 5 for Mac OS < X
            $ret .= "<div class='highlight-box' style='text-align:center;'>";
            $ret .= "<b>$ML{'.faq.reference'}:</b><br /><a href='faqbrowse?faqid=$le->{faqid}&view=full'>" . $faq->question_html . "</a></div></div>\n";
        }
        $ret .= "<p align='left' style='margin-top: 0px; margin-bottom: 0px;'>$message</p>\n";
        $ret .= "</td></tr></table>\n";
    }
    ### end reply loop

    # return if support item is closed
    if ($sp->{'state'} eq "closed") {
        return $ret;
    }

    if ($is_poster) {
        $ret .= "<p style='margin-bottom: 0px;'><b>$ML{'.post.moreinformation'}:</b></p>\n";
    } elsif ($remote) {
        $ret .= "<p style='margin-bottom: 0px;'><b>$ML{'.post.comment'}:</b></p>\n";
    } else {
        $ret .= BML::ml('.mast.login', {loginlink=>"href='$LJ::SITEROOT/login?ret=1'"});
        $ret .= "\n";
        return $ret;
    }

    unless (LJ::Support::can_append($sp, $remote, $auth))
    {
        $ret .= "$ML{'.not.have.access'}\n";
        return $ret;
    }

    my @ans_type = LJ::Support::get_answer_types($sp, $remote, $auth);
    my %ans_type = @ans_type;


    if ( not LJ::Support::can_read_internal( $sp, $remote ) and ( $ans_type{'answer'} || $ans_type{'screened'} ))
    {
        $ret .= "<div class='highlight-box'>";
        $ret .= BML::ml('.important.notes.text2', {
                sitenameshort=>$LJ::SITENAMESHORT,
                supportlink=>"href='$LJ::SITEROOT/doc/guide/support'",
            });
        $ret .= "</div>\n";
    }

    # append_request form

    # FAQ reference
    my @faqlist;
    if ($ans_type{'answer'} || $ans_type{'screened'})
    {
        my $dbr = LJ::get_db_reader();

        my %faqcat;
        my %faqq;
        # FIXME: must refactor that somewhere
        my $deflang = BML::get_language_default();
        my $mll = LJ::Lang::get_lang( $curlang );
        my $mld = LJ::Lang::get_dom( "faq" );
        my $altlang = $deflang ne $curlang;
        $altlang = 0 unless $mld and $mll;
        if ( $altlang ) {
            my $sql = qq{SELECT fc.faqcat, t.text as faqcatname, fc.catorder
                         FROM faqcat fc, ml_text t, ml_latest l, ml_items i
                         WHERE t.dmid=$mld->{'dmid'} AND l.dmid=$mld->{'dmid'}
                             AND i.dmid=$mld->{'dmid'} AND l.lnid=$mll->{'lnid'}
                             AND l.itid=i.itid
                             AND i.itcode=CONCAT('cat.', fc.faqcat)
                             AND l.txtid=t.txtid AND fc.faqcat<>'int-abuse'};
            $sth = $dbr->prepare( $sql );
        } else {
            $sth = $dbr->prepare("SELECT faqcat, faqcatname, catorder FROM faqcat ".
                                 "WHERE faqcat<>'int-abuse'");
        }
        $sth->execute;
        while ($_ = $sth->fetchrow_hashref) {
            $faqcat{$_->{'faqcat'}} = $_;
        }

        foreach my $f ( LJ::Faq->load_all( lang => $curlang ) ) {
            $f->render_in_place( { user => $user, url => $user_url } );
            push @{ $faqq{$f->faqcat} ||= [] }, $f;
        }

        @faqlist = ('0', "(don't reference FAQ)");
        foreach my $faqcat (sort { $faqcat{$a}->{'catorder'} <=> $faqcat{$b}->{'catorder'} } keys %faqcat)
        {
            push @faqlist, ('0', "[ $faqcat{$faqcat}->{'faqcatname'} ]");
            foreach my $faq ( sort { $a->sortorder <=> $b->sortorder }
                                   @{ $faqq{$faqcat} || [] } ) {
                my $q = $faq->question_raw;
                next unless $q;
                $q = "... $q";
                $q =~ s/^\s+//;
                $q =~ s/\s+$//;
                $q =~ s/\n/ /g;
                $q = substr( $q, 0, 75 ) . "..." if length( $q ) > 75;
                push @faqlist, ( $faq->faqid, $q );
            }
        }
    }

    # Prefill an e-mail validation reminder, if needed.
    my $reminder;
    if ( ( $u->{status} eq "N" || $u->{status} eq "T" )
        && ! $u->is_identity
        && ! $is_poster ) {
        $reminder = LJ::load_include( 'validationreminder' );
        $reminder = "\n\n$reminder" if $reminder;
    }

    # add in canned answers if there are any for this category and the user can use them
    my $stocks_html = "";
    if ($stock_mode && ! $is_poster) {
        # if one category's stock answers exactly matches another's
        my $stock_spcatid = $LJ::SUPPORT_STOCKS_OVERRIDE{$sp->{_cat}->{catkey}} || $sp->{_cat}->{spcatid};
        my $rows = $dbr->selectall_arrayref('SELECT subject, body FROM support_answers WHERE spcatid = ? ORDER BY subject',
                                            undef, $stock_spcatid);

        if ($rows && @$rows) {
            $stocks_html .= "<script type='text/javascript'>\n";
            $stocks_html .= "var canned = new Array();\n";
            my $i = 0;
            foreach my $row (@$rows) {
                $stocks_html .= "canned[$i] = '" . LJ::ejs($row->[1]) . "';\n";
                $i++;
            }
            $stocks_html .= "</script>\n";

            $stocks_html .= "<label for='canned'><a href='$LJ::SITEROOT/support/stock_answers?spcatid=$stock_spcatid'>Stock Answers</a>:</label><select id='canned'>\n";
            $stocks_html .= "<option value='-1' selected>( $ML{'.select.canned.to.insert'} )</option>\n";
            $i = 0;
            foreach my $row (@$rows) {
                $stocks_html .= "<option value='$i'>" . LJ::ehtml($row->[0]) . "</option>\n";
                $i++;
            }
            $stocks_html .= "</select>\n";
        }
    }


    my $can_move_touch = LJ::Support::can_perform_actions($sp, $remote) && ! $is_poster;
    $ret .= DW::Template->template_string( 'support/request/form.tt', {
        spid => $spid,
        auth => $auth,

        from => $remote && $remote->{userid} ? $remote->ljuser_display : "(not logged in)",

        faqlist => \@faqlist,
        catlist => [ ('', $sp->{'_cat'}->{'catname'}),

                    map { $_->{'spcatid'}, "---> $_->{'catname'}" }
                        LJ::Support::sorted_cats($cats)
                    ],
        screenedlist => [ ('', ''),

                        map { $_->{'splid'}, "\#$_->{'splid'} (" . LJ::get_username($_->{'userid'}) . ")" }
                            @screened
                    ],

        stock_answers => $stocks_html,

        userfacing_actions_list => [ map { $ans_type{$_} ? ( $_ => $ans_type{$_} ) : () }
                                        qw( screened answer comment ) ],
        internal_actions_list   => [ map { $ans_type{$_} ? ( $_ => $ans_type{$_} ) : () }
                                        qw( internal bounce ) ],
        approve_actions_list => [ "answer" => "as answer", "comment" => "as comment" ],

        can => {
            do_internal_actions => LJ::Support::can_make_internal( $sp, $remote ) && ! $is_poster,

            use_stock_answers => 1, #$stock_mode && ! $is_poster && $stocks_html,
            approve_answers => @screened && $helper_mode,

            change_category => $can_move_touch,
            put_in_queue => $can_move_touch && $sp->{timelasthelp} > ( $sp->{timetouched} + 5 ),
            take_out_of_queue => $can_move_touch && $sp->{timelasthelp} <= ( $sp->{timetouched} + 5 ),

            change_summary => LJ::Support::can_change_summary( $sp, $remote ),
        },

        request => {
            summary => $sp->{subject},
        },

        reply => {
            initial_text => $reminder,
        },

        is_poster => $is_poster,
    } );

    return $ret;
}
_code?>
<?hr?>
<?_code
{
    use strict;
    use vars qw(%FORM);
    return '' if $FORM{'find'};
    LJ::need_res( 'stc/support.css' );

    my $spid = $FORM{'id'}+0;
    my $ret;

    $ret .= BML::ml('.see.preview', {preview_link=>"href='$LJ::SITEROOT/support/see_request?id=$spid&amp;find=prev'"});
    $ret .= BML::ml('.see.next', {next_link=>"href='$LJ::SITEROOT/support/see_request?id=$spid&amp;find=next'"});

    return $ret;
}
_code?>
<br>
<?_code
{
    my $ret;
    $ret .= BML::ml('.help.link', {helplink=>'href="help"'});
    $ret .= BML::ml('.back.link', {backlink=>'href="./"'});

    return $ret;
}
_code?>

<=body
page?>
