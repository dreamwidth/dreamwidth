<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?_info
nocache=>1
_info?><?page

body<=

<?_code

 use strict;
 use vars qw(%POST %GET $title);

 my $ret;
 my $qs = $POST{qs} || BML::get_query_string();
 $title = $ML{'.title'};

 my $remote = LJ::get_remote();

 return "<?p " . BML::ml('.error.identity_no_email', {'aopts' => "href='$LJ::SITEROOT/changeemail'"}) . " p?>"
     if $remote && $remote->is_identity && !$remote->email_raw;

 my $foruser = $GET{foruser};
 my $foru;
 if ($foruser) {
     $foru = LJ::load_user($foruser);

     return "<?p $ML{'.error.usernonexistent'} p?>"
         unless $foru;

     return "<?p $ML{'.error.noaccess'} p?>"
         unless $remote && $remote->has_priv( "siteadmin", "users" );

     return "<?p $ML{'.error.valid'} p?>"
         if $foru->is_validated;
 }

 my $show_validate = sub {
    my $user = shift;
    return "<?p " . BML::ml('.ask.body', {'email' => $user->email_raw}) . " p?>" .
           "<form action='register' method='post'>" .
           LJ::html_hidden('authas', $user->{'user'}) .
           "<blockquote>" . LJ::html_submit("action:send", "$ML{'.ask.button'}") .
           "</blockquote></form>";
 };

 if ($POST{'action:send'} || $foru) {
     my $u = $foru ? $foru : LJ::get_authas_user($POST{'authas'});
     return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidauth'} p?>"
         unless $u;

     my $aa = LJ::register_authaction($u->{'userid'}, "validateemail", $u->email_raw);

     LJ::send_mail({
         'to' => $u->email_raw,
         'bcc' => $foru ? $remote->email_raw : undef,
         'from' => $LJ::ADMIN_EMAIL,
         'fromname' => $LJ::SITENAME,
         'charset' => 'utf-8',
         'subject' => BML::ml( ".email.subject2", { sitename => $LJ::SITENAME } ),
         'body' => BML::ml('.email.body2',
                           { 'sitename' => $LJ::SITENAME,
                             'siteroot' => $LJ::SITEROOT,
                             'email' => $u->email_raw,
                             'username' => $u->display_name,
                             'conflink' => "$LJ::SITEROOT/confirm/$aa->{'aaid'}.$aa->{'authcode'}" }),
     });

     $ret .= "<?h1 $ML{'.sent.header'} h1?><?p " . BML::ml('.sent.body',{'email'=>$u->email_raw}) . " p?>";

 } elsif ($qs =~ /^(\d+)[;\.](.+)$/) {
     my ($aaid, $auth) = ($1, $2);
     my $aa = LJ::is_valid_authaction($aaid, $auth);

     unless ($aa) {
         return "<?h1 $ML{'Error'} h1?><?p " .
             BML::ml('.error.invalidcode', { aopts => "href='$LJ::SITEROOT/register'" }) . " p?>";
     }

     my $u = LJ::load_userid($aa->{'userid'});

     # verify their email hasn't subsequently changed
     unless ($u->email_raw eq $aa->{arg1}) {
         return "<?h1 $ML{'Error'} h1?><?p " .
             BML::ml('.error.emailchanged', { aopts => "href='$LJ::SITEROOT/register'" }) . " p?>";
     }

     ## if the user is OpenID, prove that he or she is human
     if ( $u->is_identity ) {
        my $captcha = DW::Captcha->new( 'validate_openid', %POST );

        if ( $captcha->has_response ) {
            return LJ::bad_input( "error.invalidform" ) unless LJ::check_form_auth() && $captcha->enabled;
            my $err_ref;
            return LJ::bad_input( $err_ref )
                unless $captcha->validate( err_ref => \$err_ref );
        } else {
            my $ret = "<?h1 $ML{'captcha.title'} h1?>";
            $ret .= "<form method='POST' action='$LJ::SITEROOT/register'><input type='hidden' name='qs' value='$qs'>";
            $ret .= $captcha->print;
            $ret .= LJ::form_auth() if $captcha->enabled;
            $ret .= "<input type='submit' value='$ML{'.form.submit'}' ></form>";
            return $ret;
        }
     }

     $u->update_self( { status => 'A' } );
     $u->update_email_alias;
     LJ::Hooks::run_hook('email_verified', $u);

     if ($u->{'status'} eq "T") {
         $ret .= "<?h1 $ML{'.trans.header'} h1?><?p $ML{'.trans.body'} p?>";
     } else {
         $title = BML::ml('.new.title', {'sitename' => $LJ::SITENAMESHORT});
         $ret .= "<div class='columns-2-r300'>\n";
         $ret .= "<?warningbar " . BML::ml('.new.bodyuser2', {'user'=>LJ::ljuser($u), 'address' => $u->email_raw }) . " warningbar?>";
         $ret .= "<div class='columns-2-left'>";
         $ret .= "<h2 class='widget-header' style='margin-top: 10px;'>" . BML::ml('.new.101.title', {'sitename' => $LJ::SITENAMESHORT}) . "</h2><br />";
         $ret .= "<p><strong><a href='" . $u->journal_base . "/'>$ML{'.new.101.journal.question'}</a></strong><br />";
         $ret .= "$ML{'.new.101.journal.answer'}</p>";
         $ret .= "<p><strong><a href='" . $u->profile_url . "'>$ML{'.new.101.profile.question'}</a></strong><br />";
         $ret .= "$ML{'.new.101.profile.answer'}</p>";
         $ret .= "<p><strong><a href='" . $u->journal_base . "/read'>$ML{'.new.101.reading.question'}</a></strong><br />";

         $ret .= "$ML{'.new.101.reading.answer'}</p>";
         $ret .= "<p><strong><a href='$LJ::SITEROOT/community/search'>$ML{'.new.101.community.question'}</a></strong><br />";
         $ret .= "$ML{'.new.101.community.answer'}</p>";
         $ret .= "</div>";
         $ret .= "<div class='columns-2-right'>";
         # nothing here - R.I.P. CProd
         $ret .= "</div>";
         $ret .= "</div><!-- end .columns-2 -->";
     }

     LJ::Hooks::run_hook('post_email_change',
                  {
                      user     => $u,
                      newemail => $aa->{arg1},
                      suspend  => 1,
                  });
 } else {
     return "<?needlogin?>"
         unless $remote;

     my $authas = $GET{'authas'} || $remote->{'user'};
     my $u = LJ::get_authas_user($authas);
     return LJ::bad_input($ML{'error.invalidauth'})
        unless $u;

     my @authas = $remote->get_authas_list;
     my @list;

     if (@authas > 1) {  # only display if they can auth as anyone other than themselves
         foreach (@authas) {
             my $user = LJ::load_user($_);
             push @list, $_;
             if ($user->{'status'} eq "A") {
                 push @list, $_;
             } else {
                 push @list, BML::ml('.asterisk.name', {'journal' => $_});
             }
         }

         $ret .= "<form method='get' action='register'>\n";
         $ret .= $ML{'.ask.select'} . ": ";
         $ret .= LJ::html_select({ 'name' => 'authas', selected => $GET{'authas'} || $remote->{user} }, @list) . " ";
         $ret .= LJ::html_submit(undef, $ML{'.ask.switch'});
         $ret .= " <span class='helper'>" . $ML{'.asterisk.comment'} . "</span>";
         $ret .= "</form>\n\n";
     }

     if ($u->{'status'} eq "A") {
         $ret .= "<?p " . BML::ml('.error.useralreadyvalidated', {'user' => LJ::ljuser($u)}) . " p?>";
     } else {
         $ret .= $show_validate->($u);
     }
 }

 return $ret;

_code?>

<=body
head=><?_code     LJ::need_res('stc/lj_base.css', 'stc/lj_settings.css'); _code?>
title=><?_code return $title; _code?>
page?>
