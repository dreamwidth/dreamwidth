<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
body<=

<?_code

 use strict;
 use vars qw/ $title /;

 LJ::set_active_crumb('stats');

 my $dbr = LJ::get_db_reader();
 my $sth;

 my $now = time();
 my %stat = ();
 $title = BML::ml( '.title', { sitenameshort => $LJ::SITENAMESHORT } );
 

 $sth = $dbr->prepare("SELECT statcat, statkey, statval FROM stats WHERE statcat IN ('userinfo', 'client', 'age', 'gender', 'account', 'size')");
 $sth->execute;
 while ($_ = $sth->fetchrow_hashref) {
     $stat{$_->{'statcat'}}->{$_->{'statkey'}} = $_->{'statval'};
 }

 unless (%stat) {
     return "<?h1 Sorry... h1?><?p No statistics are available.  If you're the administrator for this site, run <b>ljmaint.pl genstats</b>, or ideally, put it in cron to run nightly. p?>";
 }

 $sth = $dbr->prepare("SELECT c.item, s.statval FROM stats s, codes c WHERE c.type='country' AND s.statcat='country' AND s.statkey=c.code ORDER BY s.statval DESC LIMIT 15");
 $sth->execute;
 while ($_ = $sth->fetchrow_hashref) {
     $stat{'country'}->{$_->{'item'}} = $_->{'statval'};
 }

 $sth = $dbr->prepare("SELECT c.item, s.statval FROM stats s, codes c WHERE c.type='state' AND s.statcat='stateus' AND s.statkey=c.code ORDER BY s.statval DESC LIMIT 15");
 $sth->execute;
 while ($_ = $sth->fetchrow_hashref) {
     $stat{'state'}->{$_->{'item'}} = $_->{'statval'};
 }

 my $total = $stat{'userinfo'}->{'total'}+0;
 my $usedever = $stat{'userinfo'}->{'updated'}+0;
 my $used30 = $stat{'userinfo'}->{'updated_last30'}+0;
 my $used7 = $stat{'userinfo'}->{'updated_last7'}+0;
 my $usedlastday = $stat{'userinfo'}->{'updated_last1'}+0;
 my $allow_getljnews = $stat{'userinfo'}->{'allow_getljnews'}+0;
 my $active = $stat{'size'}->{'accounts_active_30'}+0;

 my $ret = "";
 $ret .= "<p>" . BML::ml( '.description', { aopts => "href='stats/stats.txt'" } ) . "</p>";
 $ret .= "<h1>$ML{'.users.header'}</h1>";
 $ret .= "<p>$ML{'.users.desc'}</p><ul>";
 $ret .= "<li><b>$ML{'.users.total'} </b> $total</li>\n";
 $ret .= "<li><b>$ML{'.users.total.active'} </b> $active</li>\n" if $active;
 $ret .= "<li><b>$ML{'.users.total.everupdate'} </b> $usedever</li>\n";
 $ret .= "<li><b>$ML{'.users.total.last30'} </b> $used30</li>\n";
 $ret .= "<li><b>$ML{'.users.total.last7'} </b> $used7</li>\n";
 $ret .= "<li><b>$ML{'.users.total.last24'} </b> $usedlastday</li>\n";
 $ret .= "</ul> \n";

 $ret .= "<h1>$ML{'.gender.header'}</h1>";
 $ret .= "<p>$ML{'.gender.desc'}</p><ul>";
 {
     my $male   = $stat{ gender }->{ M } + 0;
     my $female = $stat{ gender }->{ F } + 0;
     my $other  = $stat{ gender }->{ O } + 0;
     my $unspec = $stat{ gender }->{ U } + 0;

     my $tot = ($male + $female + $other + $unspec) || 1;

     my $fpc = sprintf( "%0.1f", $female * 100 / $tot );
     my $mpc = sprintf( "%0.1f", $male   * 100 / $tot );
     my $opc = sprintf( "%0.1f", $other  * 100 / $tot );
     my $upc = sprintf( "%0.1f", $unspec * 100 / $tot );

     $ret .= "<li><b>$ML{'.gender.female'} </b> $female ($fpc%)</li>";
     $ret .= "<li><b>$ML{'.gender.male'} </b> $male ($mpc%)</li>";
     $ret .= "<li><b>$ML{'.gender.other'} </b> $other ($opc%)</li>";
     $ret .= "<li><b>$ML{'.gender.unspecified'} </b> $unspec ($upc%)</li>";
 }
     $ret .= "</ul>\n";

 LJ::Hooks::run_hook('statspage', {
     stat => \%stat,
     ret => \$ret,
 });

 if ( LJ::is_enabled('stats-recentupdates') )
 {
     $ret .= "<h1>$ML{'.recent.header'}</h1>";
     # Personal accounts
     $ret .= "<p>$ML{'.recent.desc.personal'}</p><ul>";
     $sth = $dbr->prepare( "SELECT u.userid, uu.timeupdate FROM user u, userusage uu WHERE u.userid=uu.userid AND uu.timeupdate > DATE_SUB(NOW(), INTERVAL 30 DAY) AND u.journaltype = 'P' ORDER BY uu.timeupdate DESC LIMIT 20" );
     $sth->execute;
     my $accounts = $sth->fetchall_arrayref({});

     if ( @$accounts ) {
         my $userobj_for = LJ::load_userids(map { $_->{userid} } @$accounts);
         my $i = 0;

         ACCOUNT:
         foreach my $account (@$accounts) {
             my $u = $userobj_for->{$account->{userid}};

             next ACCOUNT unless $u && $u->is_visible;
             last if $i > 9;

             $ret .= sprintf("<li>%s - %s, %s</li>\n",
                 $u->ljuser_display,
                 $u->name_html,
                 $account->{timeupdate}
             );
             $i++;
         }
     }
     else {
         $ret .= "<li><i>$ML{'.notavailable'}</i></li>";
     }

     $ret .= "</ul>\n";
     # Community accounts
     $ret .= "<p>$ML{'.recent.desc.community'}</p><ul>";
     $sth = $dbr->prepare( "SELECT u.userid, uu.timeupdate FROM user u, userusage uu WHERE u.userid=uu.userid AND uu.timeupdate > DATE_SUB(NOW(), INTERVAL 30 DAY) AND u.journaltype = 'C' ORDER BY uu.timeupdate DESC LIMIT 20" );
     $sth->execute;
     my $accounts = $sth->fetchall_arrayref({});

     if ( @$accounts ) {
         my $userobj_for = LJ::load_userids(map { $_->{userid} } @$accounts);
         my $i = 0;

         ACCOUNT:
         foreach my $account (@$accounts) {
             my $u = $userobj_for->{$account->{userid}};

             next ACCOUNT unless $u && $u->is_visible;
             last if $i > 9;

             $ret .= sprintf("<li>%s - %s, %s</li>\n",
                 $u->ljuser_display,
                 $u->name_html,
                 $account->{timeupdate}
             );
             $i++;
         }
     }
     else {
         $ret .= "<li><i>$ML{'.notavailable'}</i></li>";
     }

     $ret .= "</ul>\n";
     # Feeds
     $ret .= "<p>$ML{'.recent.desc.feeds'}</p><ul>";
     $sth = $dbr->prepare( "SELECT u.userid, uu.timeupdate FROM user u, userusage uu WHERE u.userid=uu.userid AND uu.timeupdate > DATE_SUB(NOW(), INTERVAL 30 DAY) AND u.journaltype = 'Y' ORDER BY uu.timeupdate DESC LIMIT 20" );
     $sth->execute;
     my $accounts = $sth->fetchall_arrayref({});

     if ( @$accounts ) {
         my $userobj_for = LJ::load_userids(map { $_->{userid} } @$accounts);
         my $i = 0;

         ACCOUNT:
         foreach my $account (@$accounts) {
             my $u = $userobj_for->{$account->{userid}};

             next ACCOUNT unless $u && $u->is_visible;
             last if $i > 9;

             $ret .= sprintf("<li>%s - %s, %s</li>\n",
                 $u->ljuser_display,
                 $u->name_html,
                 $account->{timeupdate}
             );
             $i++;
         }
     }
     else {
         $ret .= "<li><i>$ML{'.notavailable'}</i></li>";
     }

     $ret .= "</ul>\n";
 }

 if ( LJ::is_enabled('stats-newjournals') )
 {
     $ret .= "<h1>$ML{'.new.header'}</h1>";
     # Personal accounts
     $ret .= "<p>$ML{'.new.desc.personal'}</p><ul>";
     $sth = $dbr->prepare("SELECT u.userid, uu.timeupdate FROM user u, userusage uu WHERE u.userid=uu.userid AND uu.timeupdate IS NOT NULL AND u.journaltype = 'P' ORDER BY uu.timecreate DESC LIMIT 20");
     $sth->execute;
     my $accounts = $sth->fetchall_arrayref({});

     if ( @$accounts ) {
         my $userobj_for = LJ::load_userids(map { $_->{userid} } @$accounts);
         my $i = 0;

         ACCOUNT:
         foreach my $account (@$accounts) {
             my $u = $userobj_for->{$account->{userid}};

             next ACCOUNT unless $u && $u->is_visible;
             last if $i > 9;

             $ret .= sprintf("<li>%s - %s, %s</li>\n",
                 $u->ljuser_display,
                 $u->name_html,
                 $account->{timeupdate}
             );
             $i++;
         }
     }
     else {
         $ret .= "<li><i>$ML{'.notavailable'}</i></li>";
     }

     $ret .= "</ul>\n";
     # Community accounts
     $ret .= "<p>$ML{'.new.desc.community'}</p><ul>";
     $sth = $dbr->prepare("SELECT u.userid, uu.timeupdate FROM user u, userusage uu WHERE u.userid=uu.userid AND uu.timeupdate IS NOT NULL AND u.journaltype = 'C' ORDER BY uu.timecreate DESC LIMIT 20");
     $sth->execute;
     my $accounts = $sth->fetchall_arrayref({});

     if ( @$accounts ) {
         my $userobj_for = LJ::load_userids(map { $_->{userid} } @$accounts);
         my $i = 0;

         ACCOUNT:
         foreach my $account (@$accounts) {
             my $u = $userobj_for->{$account->{userid}};

             next ACCOUNT unless $u && $u->is_visible;
             last if $i > 9;

             $ret .= sprintf("<li>%s - %s, %s</li>\n",
                 $u->ljuser_display,
                 $u->name_html,
                 $account->{timeupdate}
             );
             $i++;
         }
     }
     else {
         $ret .= "<li><i>$ML{'.notavailable'}</i></li>";
     }

     $ret .= "</ul>\n";
     # Feeds
     $ret .= "<p>$ML{'.new.desc.feeds'}</p><ul>";
     $sth = $dbr->prepare("SELECT u.userid, uu.timeupdate FROM user u, userusage uu WHERE u.userid=uu.userid AND uu.timeupdate IS NOT NULL AND u.journaltype = 'Y' ORDER BY uu.timecreate DESC LIMIT 20");
     $sth->execute;
     my $accounts = $sth->fetchall_arrayref({});

     if ( @$accounts ) {
         my $userobj_for = LJ::load_userids(map { $_->{userid} } @$accounts);
         my $i = 0;

         ACCOUNT:
         foreach my $account (@$accounts) {
             my $u = $userobj_for->{$account->{userid}};

             next ACCOUNT unless $u && $u->is_visible;
             last if $i > 9;

             $ret .= sprintf("<li>%s - %s, %s</li>\n",
                 $u->ljuser_display,
                 $u->name_html,
                 $account->{timeupdate}
             );
            $i++;
         }
     }
     else {
         $ret .= "<li><i>$ML{'.notavailable'}</i></li>";
     }

     $ret .= "</ul>\n";
 }

     $ret .= "<h1>$ML{'.demographics.header'}</h1>";
 {
     $ret .= "<p>$ML{'.demographics.desc.countries'}</p><ul>";
     my $ct;
     foreach my $key (sort { $stat{'country'}->{$b} <=> $stat{'country'}->{$a} }
                      keys %{$stat{'country'}})
     {
         $ret .= "<li><b>$key</b> - $stat{'country'}->{$key}</li>\n";
         $ct++;
     }
     $ret .= "<li><i>$ML{'.notavailable'}</i></li>" unless $ct;
     $ret .= "</ul>\n";
 }

 {
     $ret .= "<p>$ML{'.demographics.desc.states'}</p><ul>";
     my $ct;
     foreach my $key (sort { $stat{'state'}->{$b} <=> $stat{'state'}->{$a} } keys %{$stat{'state'}})
     {
         $ret .= "<li><b>$key</b> - $stat{'state'}->{$key}</li>\n";
         $ct++;
     }
     $ret .= "<li><i>$ML{'.notavailable'}</i></li>" unless $ct;
     $ret .= "</ul> \n";
 }

 # ages
 my %age = ();
 my $maxage = 1;
 my $lowage = 13;
 my $highage = 119;  # given db floor of 1890 (as of 2009)
 foreach my $key (keys %{$stat{'age'}}) {
     $age{$key} = $stat{'age'}->{$key};
     $maxage = $age{$key} if $age{$key} > $maxage;
 }
 my @ages = grep { $_ >= $lowage  && $_ <= $highage } sort { $a <=> $b } keys %age;
 if (@ages) {
     $ret .= "<h1>$ML{'.age.header'}</h1>";
     $ret .= "<p>$ML{'.age.desc'}</p>";
     $ret .= "<table summary=''>\n";
     my $lastage = 0;
     foreach my $age (@ages) {
         my $width = int(400 * $age{$age}/$maxage);
         $ret .= "<tr><td align='right'><b>$age&nbsp;</b></td><td>$age{$age}&nbsp;</td><td><img src=\"/img/bluedot.gif\" height='10' width='$width' /></td></tr>\n";
         $lastage = $_;
     }
     $ret .= "</table>\n";
 }

 # clients (if enabled)
 if ( LJ::is_enabled('clientversionlog') ) {

     ### sum up clients over different versions
     foreach my $c (keys %{$stat{'client'}}) {
         next unless ($c =~ /^(.+?)\//);
         $stat{'clientname'}->{$1} += $stat{'client'}->{$c};
     }

     my $out;
     foreach my $cn (sort { $stat{'clientname'}->{$b} <=> $stat{'clientname'}->{$a} } 
                     keys %{$stat{'clientname'}})
     {
         last unless $stat{'clientname'}->{$cn} >= 50;
         $out .= "<tr valign='top'><td><font size='+1'><b>$stat{'clientname'}->{$cn}</b></font></td>".
                 "<td><b>" . LJ::ehtml($cn) . "</b><br />\n";
         $out .= "<font size='-1'>\n";
         foreach my $c (sort grep { /^\Q$cn\E\// } keys %{$stat{'client'}}) {
             my $count = $stat{'client'}->{$c};
             $c =~ s/^\Q$cn\E\///;
             $out .= LJ::ehtml($c) . " ($count), ";
         }
         chop $out; chop $out;  # remove trailing ", "
         $out .= "</font>\n";
         $out .= "</td></tr>\n";
     }

     if ($out) {
         $ret .= "<h1>$ML{'.client.header'}</h1>";
         $ret .= "<p>$ML{'.client.desc'}</p>";
         $ret .= "<table summary='' cellpadding='3'>\n";
         $ret .= $out;
         $ret .= "</table>\n";
     }
 }


 # return early, since the graphs below are pretty much broken now
 # with index changes.  FIXME: make alternate means to generate stats
 return $ret;

 ### graphs!
 $ret .= "<?h1 Pretty Graphs! h1?><?p These are the most fun, aren't they? p?>";
 
 $ret .= "<?h2 New accounts -- last 60 days h2?><?p How fast are we growing? p?>";
 $ret .= "<p align='center'><img src=\"stats/newbyday.png\" width='520' height='350' /></p>";

 return $ret;

_code?>

<=body
title=><?_code return $title; _code?>
page?>
