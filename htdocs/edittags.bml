<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=><?_code $ML{'.title'} _code?>
body<=
<?_code
{
    use strict;
    use vars qw($GET $POST);

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $err = sub { return "<?h1 $ML{'Error'} h1?><?p $_[0] p?>"; };
    return $err->($ML{'.disabled'}) unless LJ::is_enabled('tags');

    LJ::need_res( "js/tags.js" );
    LJ::need_res( { priority => $LJ::OLD_RES_PRIORITY }, "stc/tags.css" );

    my ($ret, $msg);

    return $err->($ML{'.invalid.link'})
        unless LJ::did_post() || ($GET{journal} && $GET{itemid});

    my $journal = $GET{journal} || $POST{journal};
    my $u = LJ::load_user($journal);
    return $err->($ML{'.invalid.journal'}) unless $u;
    return $err->($ML{'.readonly.journal'}) if $u->is_readonly;
    return $err->($ML{'.invalid.journal'}) unless $u->is_visible;

    my $ditemid = ($GET{itemid} || $POST{itemid})+0;
    my $anum = $ditemid % 256;
    my $jitemid = $ditemid >> 8;
    return $err->($ML{'.invalid.entry'}) unless $jitemid;

    my $logrow = LJ::get_log2_row($u, $jitemid);
    return $err->($ML{'.invalid.entry'}) unless $logrow;
    return $err->($ML{'.invalid.entry'}) unless $logrow->{anum} == $anum;

    my $ent = LJ::Entry->new_from_item_hash( $logrow )
        or die "Unable to create entry object.\n";
    return $err->( $ML{'.invalid.notauthorized'} )
        unless $ent->visible_to( $remote );

    if (LJ::did_post()) {
        return $err->($ML{'.invalid.link'})
            unless LJ::check_form_auth();

        my $tagerr = "";
        my $rv = LJ::Tags::update_logtags($u, $jitemid, {
            set_string => $POST{edittags},
            remote => $remote,
            err_ref => \$tagerr,
        });
        return $err->($tagerr) unless $rv;

        BML::redirect( $ent->url );
        #$msg = "<div class='update_good'>Tags successfully updated.</div>";
    }

    my $lt2 = LJ::get_logtext2($u, $jitemid);
    my ($subj, $evt) = @{$lt2->{$jitemid} || []};
    return $err->($ML{'.error.db'}) unless $evt;

    my (%props, %opts);
    LJ::load_log_props2($u->{userid}, [$jitemid], \%props);
    $opts{'preformatted'} = $props{$jitemid}{'opt_preformatted'};

    LJ::CleanHTML::clean_subject(\$subj);
    LJ::CleanHTML::clean_event(\$evt, \%opts);
    LJ::expand_embedded($u, $ditemid, $remote, \$evt );

    # prevent BML tags interpretation inside post body
    $subj =~ s/<\?/&lt;?/g;
    $subj =~ s/\?>/?&gt;/g;
    $evt =~ s/<\?/&lt;?/g;
    $evt =~ s/\?>/?&gt;/g;

    my $logtags = LJ::Tags::get_logtags($u, $jitemid);
    my $usertags = LJ::Tags::get_usertags($u, { remote => $remote }) || {};
    $logtags = $logtags->{$jitemid} || {};
    my $logtagstr = join ', ', map { LJ::ejs($_) } sort values %$logtags;

    $ret .= "<?p $ML{'.intro'} p?>";
    if ( $ent->prop( 'xpost' ) && $remote->can_post_to( $u ) ) {
        $ret .= "<?p " . BML::ml( 'xpost.notrespected', { aopts => "href='$LJ::SITEROOT/manage/settings/?cat=othersites'" } );
        $ret .= " " . BML::ml( '.xpost.notrespected.editentry', { aopts => "href='$LJ::SITEROOT/editjournal?journal=$journal&amp;itemid=$ditemid'" } );
        $ret .= " p?><br />";
    }

    $ret .= "<script type='text/javascript'> var cur_taglist = '$logtagstr'; </script>";

    $ret .= '<table summary="" class="edittbl" cellpadding="0" cellspacing="0" width="50%">';
    if ( $u->is_community ) {
        $ret .= "<tr><td class='l'>$ML{'.poster'}</td><td>" . $ent->poster->ljuser_display . "</td></tr>";
    }
    $ret .= "<tr><td class='l'>$ML{'.subject'}</td><td>$subj</td></tr>" if $subj;

    $ret .= '<form method="POST" action="/edittags" id="edit_tagform">';
    $ret .= LJ::html_hidden('journal', $journal);
    $ret .= LJ::html_hidden('itemid', $GET{itemid} || $POST{itemid});
    $ret .= LJ::form_auth();

    $ret .= "<tr><td class='l'>$ML{'.current'}</td>";
    $ret .= "<td class='sep'>";

    my $can_add_entry_tags = LJ::Tags::can_add_entry_tags( $remote, LJ::Entry->new($u, ditemid => $ditemid ) );
    if ( $can_add_entry_tags ) {
        $ret .= LJ::html_text(
            {
                name  => 'edittags',
                value => (join ', ', sort values %$logtags),
                size  => 40,
                class => 'tagfield',
                id    => 'tagfield',
            }
        );
        $ret .= '&nbsp;&nbsp;';
        $ret .= LJ::html_submit( 'save', $ML{'.button.save'}, { class => 'btn' });
        $ret .= $msg if $msg;
    } else {
        # no widgets
        $ret .= $ML{'.permissions.none'};
    }
    $ret .= "</td></tr>";

    $ret .= "<tr><td class='l'>" . BML::ml('.users', { user => $u->user }) . "</td><td class='curtags'>";

    if ( scalar keys %$usertags ) {
        $ret .= "<select name='tags' multiple='multiple' class='multiple-select tagbox_nohist' " .
                "onChange='edit_tagselect(this)'>";
        foreach (sort { $a->{name} cmp $b->{name} } values %$usertags) {
            $ret .= "<option value='" . LJ::ehtml($_->{name}) . "'>" . LJ::ehtml($_->{name}) . "</option>";
        }
        $ret .= "</select>";
    } else {
        $ret .= "none"
    }

    $ret .= "<br /><br />";
    $ret .= "$ML{'.permissions.add.yes'}<br />" if $can_add_entry_tags;
    $ret .= "$ML{'.permissions.control.yes'}<br />" if LJ::Tags::can_control_tags($u, $remote);
    $ret .= BML::ml('.view', { aopts => 'href="' . $ent->url . '"' });
    $ret .= "</td></tr>";
    $ret .= '</form>';

    $ret .= "<tr><td class='l'>$ML{'.entry'}</td><td class='sep' style='white-space: normal'>$evt</td></tr>";

    $ret .= '</table>';

    return $ret;
}
_code?>
<=body
page?>
