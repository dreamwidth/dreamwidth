<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?><?_code
{
    use strict;

    my $remote = LJ::get_remote();

    # if we don't have a current user but somebody is logged in, redirect
    # them to their own OPML page
    if ( $remote && $GET{user} eq "" ) {
        return BML::redirect( "$LJ::SITEROOT/tools/opml?user=$remote->{user}" );
    }

    return "No 'user' argument" unless $GET{user};

    my $u = LJ::load_user_or_identity( $GET{user} )
        or return "Invalid user.";

    my @uids;

    # different accounts need different userid loads
    # will use watched accounts for personal accounts
    # and identity accounts
    # and members for communities
    if( $u->is_person || $u->is_identity ) {
        @uids = $u->watched_userids;
    } elsif( $u->is_community ) {
        @uids = $u->member_userids;
    } else {
        return "Invalid account type.";
    }

    my $us  = LJ::load_userids( @uids );

    DW::Stats::increment( 'dw.opml.used', 1 );

    BML::set_content_type( "text/plain" );
    my $x = "<?" . "xml version='1.0'?>
<opml version='1.1'><head>
";

    my $add = sub {
        my ( $e, $v ) = @_;
        return unless $v;
        $x .= "<$e>" . LJ::exml($v) . "</$e>\n";
    };

    $add->( "title", "$u->{user}'s $LJ::SITENAME reading list" );
    $add->( "ownerName", $u->{name} );
    $add->( "ownerEmail", $u->email_visible( $remote ) );

    $x .= "</head><body>\n";

    # currently ordered by user ID; there might be a better way to order this
    # but unless somebody has a strong preference about it there's no point
    foreach my $uid ( sort { $a <=> $b } @uids ) {
        my $w = $us->{$uid} or next;

        # identity accounts do not have feeds
        next if $w->is_identity;
        # filter by account type
        next if $GET{show} && ! ( $GET{show} =~ /[P]/ && $w->is_person
                    || $GET{show} =~ /[C]/ && $w->is_community
                    || $GET{show} =~ /[YF]/ && $w->is_syndicated );

        my $title;

        # use the username + site abbreviation for each feed's title if we have that
        # option set
        if( $GET{title} eq "username" ) {
            $title = $w->display_username . " (" . $LJ::SITENAMEABBREV . ")";
        } else {
            # FIXXME: Should be using a function call instead! But $w->prop( "journaltitle" )
            # returns empty here, though it's used in profile.bml
            $title = $w->{name};
        }

        my $feed;

        if ( $w->is_syndicated ) {
            my $synd = $w->get_syndicated;
            $feed = $synd->{synurl};
        } else {
            $feed = $w->journal_base;

            if( $GET{feed} eq "atom" ) {
                $feed .= "/data/atom";
            } else {
                $feed .= "/data/rss";
            }

            if( $GET{auth} eq "digest" ) {
                $feed .= "?auth=digest";
            }
        }
        $x .= "<outline text=\"" . LJ::exml($title) . "\" xmlUrl=\"" . LJ::exml($feed) . "\" />\n";
    }

    $x .= "</body></opml>\n";
    BML::noparse();
    return $x;
}
_code?>
