<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=><?_ml .title _ml?>
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST);
    my $ret;

    LJ::need_res('js/commentmanage.js');
    LJ::set_active_crumb('managecomments');

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $authas = $GET{'authas'} || $remote->{'user'};
    my $u = LJ::get_authas_user($authas);
    return LJ::bad_input($ML{'error.invalidauth'})
        unless $u;

    my %LJ_cmtinfo = %{ LJ::Comment->info( $u ) };
    $LJ_cmtinfo{form_auth} = LJ::form_auth( 1 );

    my $dbcr = LJ::get_cluster_reader($u);
    return "Error: can't get DB for user" unless $dbcr;

    my $max = $u->count_recent_comments_display;

    # how many comments to display by default
    $GET{show} = $max if $GET{show} > $max;
    $GET{show} = 0 if $GET{show} < 1;
    my $count = $GET{show} || ($max > 25 ? 25 : $max);

    # authas switcher form
    $ret .= "<form method='get' action='/tools/recent_comments'>\n";
    $ret .= LJ::make_authas_select($remote, { 'authas' => $GET{'authas'} }) . "\n";
    $ret .= "</form>\n\n";

    my (@recv, @posted, %talkids);
    my %need_userid;
    $need_userid{$u->{userid}} = 1 if $u->is_community; # Need to load the community for logtext
    my %logrow;  # "jid nodeid" -> $logrow
    my %need_logids;  # hash of "journalid jitemid" => [journalid, jitemid]

    my $now = time();
    my $sth;

    my $jargent ="journal=$u->{'user'}&amp;";

    # Retrieve received
    if ( $u->is_person || $u->is_community ) {
        @recv = $u->get_recent_talkitems($count);
        foreach my $post (@recv) {
            $need_userid{$post->{posterid}} = 1 if $post->{posterid};
            $talkids{$post->{jtalkid}} = 1;
            $need_logids{"$u->{userid} $post->{nodeid}"} = [$u->{userid}, $post->{nodeid}]
                if $post->{nodetype} eq "L";
        }
    }

    # Retrieve posted
    if ($u->is_individual) {
        $sth = $dbcr->prepare("SELECT posttime, journalid, nodetype, nodeid, jtalkid, publicitem ".
                              "FROM talkleft ".
                              "WHERE userid=?  ORDER BY posttime DESC LIMIT $count");
        $sth->execute($u->{'userid'});
        my %jcount;  # jid -> ct
        while (my $r = $sth->fetchrow_hashref) {
            push @posted, $r;
            $need_logids{"$r->{journalid} $r->{nodeid}"} = [$r->{journalid}, $r->{nodeid}]
                if $r->{nodetype} eq "L";
            $need_userid{$r->{journalid}} = 1;
        }
    }

    my $standoutbox = sub {
        # anchors for 'latest received' and  'latest posted', link to Manage Comment Settings
        # options for how many comments to view
        # Turning results into a function, since it's going to be used elsewhere.
        my $anchorname = $_[0];
        my $anchor = $anchorname ? "#$anchorname" : "";
        my $standoutbox = "<div class='action-box' style='text-align: center'><div class='inner'>";
        $standoutbox .= "<a name='$anchorname'></a>";

        my $latest_received = $anchorname eq "received" ? $ML{'.latest.received'} : "<a href='#received'>$ML{'.latest.received'}</a>";
        my $latest_posted = $anchorname eq "posted" ? $ML{'.latest.posted'} : "<a href='#posted'>$ML{'.latest.posted'}</a>";
        $standoutbox .= BML::ml( 'Actionlink', { link => $latest_received } ) . " "
            if $u->is_person || $u->is_community;
        $standoutbox .= BML::ml( 'Actionlink', { link => $latest_posted } ) . " "
            if $u->is_person;
        my $getextra = $authas ne $remote->user ? "?authas=$authas" : "";
        $standoutbox .= BML::ml('Actionlink', { link => "<a href='$LJ::SITEROOT/manage/comments$getextra'>$ML{'.managesettings'}</a>"});

        $standoutbox .= "<br />";
        $standoutbox .= " $ML{ '.view.latest' } [ ";
        my @values = qw(10 25 50 100);
        push @values, $count
            unless grep { $count == $_ } @values;
        push @values, $max
            unless grep { $max == $_ } @values;

        @values = sort { $a <=> $b } @values;

        foreach my $val ( @values ) {
            next if $val > $max;
            if ( $val == $count ) {
                $standoutbox .= " <b>$val</b> ";
            } else {
                $standoutbox .= " <a href='?show=$val$getextra$anchor'>$val</a> ";
            }
        }
        $standoutbox .= "] $ML{ '.comments' } </div></div><div class='clear-floats'></div>";
        # end anchor/standout box.
    };
 
    @recv = sort { $b->{datepostunix} <=> $a->{datepostunix} } @recv;
    my @recv_talkids = map { $_->{'jtalkid'} } @recv;

    my %props;
    LJ::load_talk_props2($u->{'userid'}, \@recv_talkids, \%props);

    my $us = LJ::load_userids(keys %need_userid);

    # setup the parameter to get_posts_raw
    my @need_logtext;
    foreach my $need ( values %need_logids ) {
        my ( $ownerid, $itemid ) = @$need;
        my $ju = $us->{$ownerid} or next;
        push @need_logtext, [ $ju->{clusterid}, $ownerid, $itemid ];
    }

    my $comment_text = LJ::get_talktext2( $u, keys %talkids );
    my $log_data     = LJ::get_posts_raw( { text_only => 1 }, @need_logtext );
    my $log_text     = $log_data->{text};
    my $root = $u->journal_base;

    # Begin "latest received" box. We only want to see this if we're a
    # community or personal account, since OpenID accounts can't
    # post entries and thus can't receive comments:

    if ( $u->is_person || $u->is_community ) {
        $ret .= $standoutbox->( "received" );
        $ret .= "<?h1 $ML{ '.latest.received' } h1?>";
        $ret .= "<?p " . (%talkids ? BML::ml('.last.num.posted.in', {num => $count}) : "$ML{ '.no.comments.posted' }") . " " . LJ::ljuser($u) . " p?>";
        $ret .= "<table summary='' style='width: 100%' cellpadding='5' cellspacing='0'>";
        foreach my $r (@recv) {
            next unless $r->{nodetype} eq "L";
            next if $r->{state} eq "D";

            my $pu = $us->{$r->{posterid}};
            next if $pu && ( $pu->is_expunged || $pu->is_suspended );

            $r->{'props'} = $props{$r->{'jtalkid'}};

            my $lrow = $logrow{"$u->{userid} $r->{nodeid}"} ||= LJ::get_log2_row($u, $r->{'nodeid'});
            my $talkid = ($r->{'jtalkid'} << 8) + $lrow->{'anum'};

            my $ditemid = "$root/$lrow->{ditemid}.html";
            my $commentanchor = LJ::Talk::comment_anchor( $talkid );
            my $talkurl = "$root/$lrow->{ditemid}.html?thread=$talkid$commentanchor";

            my $bgcolor = "transparent";
            my $state = "";
            if ($r->{state} eq "S") {
                $bgcolor = BML::fill_template("screenedbarcolor");
                $state = "Screened";
            } elsif ($r->{state} eq "D") {
                $state = "Deleted";
            } elsif ($r->{state} eq "F") {
                $state = "Frozen";
            }

            my $ljcmt = $LJ_cmtinfo{$talkid} = {};
            $ljcmt->{u} = $pu ? $pu->{user} : "";

            $ret .= "<tr valign='top' id='cmtbar$talkid'><td style='width: 150px; line-height: 1.5em; border-top: 1px solid #999; background-color: $bgcolor' id='cmtbar$talkid'>";
            $ret .= (LJ::isu($pu) ? LJ::ljuser($pu) : $ML{ '.anonymous' }) . "<br />";

            $ret .= LJ::diff_ago_text( $r->{datepostunix}, $now ) . "<br />";
            $ret .= "<div id='state$talkid'>$state</div>" if $r->{state} ne "D";

            unless ($r->{state} eq "D") {
                $ret .= "<a href='/delcomment?${jargent}id=$talkid'>";
                $ret .= LJ::img( "btn_del", "", { align => 'absmiddle', hspace => 2 } ) . "</a>";
                if ($r->{'state'} ne 'F') {
                    $ret .= "<a href='/talkscreen?mode=freeze&amp;${jargent}talkid=$talkid'>";
                    $ret .= LJ::img( "btn_freeze", "", { align => 'absmiddle', hspace => 2 } ) . "</a>";
                }

                if ($r->{'state'} eq 'F') {
                    $ret .= "<a href='/talkscreen?mode=unfreeze&amp;${jargent}talkid=$talkid'>";
                    $ret .= LJ::img( "btn_unfreeze", "", { align => 'absmiddle', hspace => 2 } ) . "</a>";
                }

                if ($r->{'state'} ne 'S') {
                   $ret .= "<a href='/talkscreen?mode=screen&amp;${jargent}talkid=$talkid'>";
                    $ret .= LJ::img( "btn_scr", "", { align => 'absmiddle', hspace => 2 } ) . "</a>";
                }

                if ($r->{'state'} eq 'S') {
                     $ret .= "<a href='/talkscreen?mode=unscreen&amp;${jargent}talkid=$talkid'>";
                     $ret .= LJ::img( "btn_unscr", "", { align => 'absmiddle', hspace => 2 } ) . "</a>";
                 }
            }

            # FIXME: (David?) We'll have to make talk_multi.bml understand jtalkids in multiple posts
            #$ret .= " <nobr><input type='checkbox' name='selected_$r->{jtalkid}' id='s$r->{jtalkid}' />";
            #$ret .= " <label for='s$r->{jtalkid}'>$ML{'/talkread.bml.select'}</label></nobr>";

            $ret .= "</td><td id='" . LJ::Talk::comment_htmlid( $talkid );
            $ret .= "' style='text-align: left; border-top: 1px solid #999; border-left: 1px solid #999'>";

            my $esubject = $log_text->{"$u->{userid}:$r->{nodeid}"}[0];
            LJ::CleanHTML::clean_subject(\$esubject) if $esubject ne "";

            $ret .= "<strong style='float: left; text-decoration: underline'>$esubject</strong> " if $esubject ne "";
            $ret .= "<strong style='float: right'>(<a href='$ditemid'>$ML{ '.entry.link' }</a>)</strong>" unless $lrow->{ditemid} == undef;
            $ret .= "<br /><br />";
            my $csubject = LJ::ehtml($comment_text->{$r->{jtalkid}}[0]);

            if ($csubject && $csubject !~ /^Re:\s*$/) {
                $ret .= "<cite>$csubject</cite><br />";
            }

            my $comment = $comment_text->{$r->{jtalkid}}[1];
            LJ::CleanHTML::clean_comment( \$comment, { preformatted => $r->{props}->{opt_preformatted},
                                                       editor => $r->{props}->{editor},
                                                       anon_comment => LJ::Talk::treat_as_anon( $pu, $u ),
                                                       nocss => 1,
                                                     } );
            BML::ebml(\$comment);

            $ret .= "$comment<br /><br />";

            $ret .= "(<a href='$talkurl'>$ML{ '.comment.link' }</a>) " unless $r->{state} eq "D" || $lrow->{ditemid} == undef;

            my $stylemine = 0;
            my $replyurl = LJ::Talk::talkargs($ditemid, "replyto=$talkid", $stylemine);
            if ($lrow->{ditemid} == undef) {
                $ret .= "<strong>($ML{ '.post.deleted' })</strong>";
            } elsif ($r->{'state'} eq 'F') {
                $ret .= "($ML{'talk.frozen'}) ";
            } elsif ($r->{'state'} eq "D") {
                $ret .= "<strong>($ML{ '.comment.deleted' })</strong>";
            } else {
                $ret .= "(<a href='$replyurl'>$ML{'talk.replytothis'}</a>) ";
            }

            $ret .= "</td></tr>";

        }
        $ret .= "</table>";

        $ret .= "<?p " . BML::ml('/tools/recent_comments.bml.maxnotshown',
                             { 'current' => $max, 'max' => $LJ::TOOLS_RECENT_COMMENTS_MAX }).
                                 " p?>" unless $max >= $LJ::TOOLS_RECENT_COMMENTS_MAX;
    }

    # End "latest received" box.

    if ($u->is_individual) {

        $ret .= $standoutbox->( "posted" );
        $ret .= "<?h1 $ML{ '.latest.posted' } h1?><?p " . BML::ml('.last.num.posted.by', {num => $count, user => LJ::ljuser($u) }) . " p?>";
        my %jcount;  # jid -> ct
        $ret .= "<table style='text-align: left'>";
        $ret .= "<thead><tr><th>$ML{ '.time' }</th><th>&nbsp;$ML{ '.location' }</th><th>&nbsp;$ML{ '.delete' }</th>";
        $ret .= "<th>&nbsp;$ML{ '.edit' }</th>" if $remote->can_edit_comments;
        $ret .= "</tr></thead>";

        foreach my $r (@posted) {
            $jcount{$r->{'journalid'}}++;
            next unless $r->{'nodetype'} eq "L";  # log2 comment

            my $ju = $us->{$r->{journalid}};
            my $lrow = $logrow{"$ju->{userid} $r->{nodeid}"} ||= LJ::get_log2_row($ju, $r->{'nodeid'});
            my $talkid = ($r->{'jtalkid'} << 8) + $lrow->{'anum'};

            my $comment = LJ::Comment->new( $ju, dtalkid => $talkid );

            my $logurl = $ju->journal_base . "/$lrow->{ditemid}.html";
            my $commentanchor = LJ::Talk::comment_anchor( $talkid );
            my $talkurl = "$logurl?thread=$talkid$commentanchor";

            my $hr_ago = LJ::diff_ago_text( $r->{posttime}, $now );
            my $subject;
            my $delete;
            my $editlink;

            if (defined $lrow->{ditemid}) {
                $hr_ago = "<a href='$talkurl'>$hr_ago</a>";
                $subject = $log_text->{"$r->{journalid}:$r->{nodeid}"}[0] || "$lrow->{ditemid}.html";
                LJ::CleanHTML::clean_subject(\$subject);
                $subject = "$subject <a href='$logurl'>(link)</a>";

                # add a sign if the comment has replies
                $subject .= "*" if $comment->has_nondeleted_children;

                # delete link, very helpful for when the user does not have access to that entry anymore
                $delete = $comment->is_deleted ? "&nbsp;$ML{ '.comment.deleted' }" : "&nbsp;<a href='$LJ::SITEROOT/delcomment?journal=$ju->{'user'}&amp;id=$talkid'>$ML{ '.delete.link' }</a>";

                # edit link, if comment can be edited
                $editlink = "&nbsp;<a href='" . LJ::Talk::talkargs( $comment->edit_url ) . "'>$ML{ '.edit.link' }</a>" if $comment->remote_can_edit;


            } else {
                $subject = $ML{ '.post.deleted' };
            }

            $ret .= "<tr><td>$hr_ago</td><td>" . LJ::ljuser($ju->{user}) . ": $subject</td><td>$delete</td>";
            $ret .= "<td>$editlink</td>" if $remote->can_edit_comments;
            $ret .= "</tr>";
        }
        $ret .= "</table>";
    }

    $ret .= $ML{ '.reply' };

    my $js_screen_color = "\"" . LJ::ejs(BML::get_template_def("screenedbarcolor")) . "\"";
    $ret .= "<script>var LJ_cmtinfo = " . LJ::js_dumper(\%LJ_cmtinfo) . ";\n" .
        "function userhook_screen_comment_ARG (talkid) { setStyle('cmtbar'+talkid, 'background', $js_screen_color); setInner('state'+talkid, 'Screened'); }\n".
        "function userhook_unscreen_comment_ARG (talkid) { setStyle('cmtbar'+talkid, 'background', 'transparent'); setInner('state'+talkid, ''); }\n".
        "function userhook_delete_comment_ARG (talkid) { hideElement('cmtbar'+talkid); }\n".
        "var Site; if (!Site) Site = new Object(); Site.imgprefix = \"$LJ::IMGPREFIX\";\n".
        "</script>";

    return $@ || $ret;

}
_code?>
<=body
page?>
