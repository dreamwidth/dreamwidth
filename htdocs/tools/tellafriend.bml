<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?_code

 use strict;
 use vars qw(%GET %POST $title $body);

 BML::decl_params(user         => '.',
                  journal      => '.',
                  itemid       => 'digits',
                  mode         => '.',
                  toemail      => '.',
                  subject      => '.',
                  body         => '.',
                  body_start   => '.',
                  url          => '.',
                  force_spelling => '.',
                  );

 my $user = $POST{'user'} || $GET{'user'};
 my $journal = $POST{'journal'} || $GET{'journal'};
 my $itemid = $POST{'itemid'} || $GET{'itemid'};
 my $toemail = $POST{'toemail'};

 $title = BML::ml( ".title" );
 $body = "";

 my $remote = LJ::get_remote();
 return "<?needlogin?>" unless $remote;

 my $sth;

 unless ( LJ::is_enabled('tellafriend') ) {
     $body .= BML::ml( ".error.disabled" );
     return;
 }

 # Get sender's email address
 my $u = LJ::load_userid($remote->{'userid'});
 $u->{'emailpref'} = $u->email_raw;
 if ( $u->can_have_email_alias ) {
     $u->{'emailpref'} = $u->site_email_alias;
 }

 # Email not validated
 unless ($u->{'status'} eq "A") {
     $body .= "<?h1 " . BML::ml( ".invalidemailpage.title" ) . " h1?><?p " . BML::ml( ".invalidemailpage.body",
                                                                                      { emailaddress => $u->email_raw, siteroot => $LJ::SITEROOT }
                                                                                    ) . " p?>";
     return;
 }

 my $err = sub {
     $title = BML::ml( ".errorpage.title" );
     $body = "<?p " . BML::ml( ".errorpage.body",
                               { errormessage => $_[0] }
                             ) . " p?>";
     return;
 };

 my $msg_footer = BML::ml( ".email.body.footer1", { user => $u->{user}, sitename => $LJ::SITENAME, sitenameshort => $LJ::SITENAMESHORT, domain =>$LJ::DOMAIN } );
 my $custom_msg = "\n\n" . BML::ml( ".email.body.custom", { user => $u->{user} } );

 my $email_checkbox;

 # Tell a friend form submitted
 if ($POST{'mode'} eq "mail")
 {
     my @errors;
     my @emails = split /,/, $toemail;

     push @errors, BML::ml( ".error.noemail" ) unless (scalar @emails);
     foreach my $em ( @emails ) {
        LJ::check_email( $em, \@errors, \%POST, \$email_checkbox );
     }
     # Check for images
     if ($POST{'body'} =~ /<(img|image)\s+src/i) {
         push @errors, BML::ml( ".error.forbiddenimages" );
     }
     # Check for external URLs
     foreach ( LJ::get_urls($POST{'body'}) ) {
         if ( $_ !~ m!^https?://([\w-]+\.)?$LJ::DOMAIN(/.*)?$!i ) {
             push @errors, BML::ml( ".error.forbiddenurl", { sitename => $LJ::SITENAME } );
         }
     }
     push @errors, "<?requirepost?>" unless LJ::did_post();
     push @errors, BML::ml( ".error.maximumemails" ) unless ($u->rate_log('tellafriend', scalar @emails));
     push @errors, BML::ml( ".error.characterlimit" ) if (length($toemail) > 150);
     if (@errors) {
         # This piece left uncommented causes the Error page to have two titles displaying "Error"
         # Without the line, it displays "Tell a friend!" first, then "Error" which seems more helpful.
         # $title = BML::ml( ".errorpage.title" );
         $body = LJ::bad_input(@errors);

         # Fall through and show form below
     } else {
         # All valid, go ahead and send

         my $msg_body = $POST{'body_start'};
         if ($POST{'body'} ne '') {
             $msg_body .= $custom_msg . "\n-----\n" .
                          $POST{'body'} . "\n-----";
         }
         $msg_body .= $msg_footer;

         LJ::send_mail({
             'to' => $toemail,
             'from' => $u->{'emailpref'},
             'fromname' => $u->user . BML::ml( ".via" ) . " $LJ::SITENAMESHORT",
             'charset' => 'utf-8',
             'subject' => $POST{'subject'},
             'body' => $msg_body,
         });

         my $referer = BML::get_client_header('Referer');
         my $tolist = $toemail;
         $tolist =~ s/(,\s*)/<br \/>/g;
         $body .= "<?h1 " . BML::ml( ".sentpage.title" ) . " h1?>";
         $body .= "<?p <a href='$referer'>" . BML::ml( ".sentpage.body.tellanother" ) . "</a> p?>\n";
         $body .= "<?p " . BML::ml( ".sentpage.body.mailedlist" ) . "<br />"
                  . $tolist . " p?>";
         return;
     }
 }

 my @warn;
 # Display form with info filled in
 $body .= "<form method='post' action='tellafriend'>";
 $body .= LJ::html_hidden({ name => 'mode', value => 'mail' });
 $body .= LJ::html_hidden({ name => 'user', value => $user });
 $body .= LJ::html_hidden({ name => 'journal', value => $journal });
 $body .= LJ::html_hidden({ name => 'itemid', value => $itemid });
 $body .= "<table summary='' cellpadding=3 border=0>";

 $body .= "<tr><td align=right nowrap>" . BML::ml( ".email.fromfield" ) . "</td><td>" .
          LJ::ehtml($u->{'name'} || $u->{'user'}) .
          " &lt;$u->{'emailpref'}&gt;</td></tr>\n";

 $body .= "<tr><td align=right valign='top'>" . BML::ml( ".email.recipientfield" ) . "</td>" .
          "<td>" . LJ::html_text({ name => 'toemail',
                                   value => $toemail,
                                   size => 60,
                                   maxlength => 150 }) .
          "<br /><span class='detail'>" . BML::ml( ".email.formatinfo" ) . "</span>";
 if ( $email_checkbox ) {
    $body .= "<br />" . $email_checkbox;
 }
 $body .= "</td></tr>\n";

 my ($subject, $msg);
 $subject = BML::ml( ".email.subject.noentry" );
 if ($itemid =~ /^\d+$/)
 {
     my $uj = LJ::load_user( $journal );
     return $err->(BML::ml( ".error.unknownjournal" )) unless $uj;

     my $jitemid = $itemid + 0;
     $jitemid = int( $jitemid / 256 );
     my $entry = LJ::Entry->new($uj->{'userid'}, jitemid => $jitemid);

     my $entry_subject = $entry->subject_text;
     my $pu = $entry->poster;
     my $url = $entry->url;

     my @errors;
     my $uisjowner = ($pu->{'user'} eq $u->{'user'});
     if ( !$uisjowner && $entry->security ne 'public' ) {
         $err->(BML::ml( ".email.warning.public" ));
         return;
     }
     if ( $uisjowner && $entry->security eq 'private' ) {
         $err->(BML::ml( ".email.warning.private" ));
         return;
     }
     if ( $uisjowner && $entry->security eq 'usemask' ) {
         push @warn, BML::ml( ".email.warning.usemask" );
         $msg_footer = "\n\n" . BML::ml( ".email.usemask.footer", { user => $u->{'user'}, siteroot => $LJ::SITEROOT } ) . "$msg_footer";
     }

     $msg .= BML::ml( ".email.body", { user => $u->{'user'}, sitenameshort => $LJ::SITENAMESHORT } );
     $msg .= BML::ml( ".email.sharedentry.title" ) . " $entry_subject\n" if $entry_subject;
     $msg .= BML::ml( ".email.sharedentry.url" ) . " $url ";

     # email subject
     $subject = $entry_subject
            ? BML::ml( ".email.subject.entryhassubject", { sitenameshort => $LJ::SITENAMESHORT, subject => $entry_subject } )
            : BML::ml( ".email.subject.entrynosubject", { sitenameshort => $LJ::SITENAMESHORT } );
 }

 if ($GET{'user'} =~ /^\w{1,15}$/) {
     my $uj = LJ::load_user($user);
     my $url = $uj->journal_base;

     $subject = BML::ml( ".email.subject.journal" );
     if ($user eq $u->{'user'}) {
         $msg .= BML::ml( ".email.body.yourjournal" );
         $msg .= "   $url ";
     } else {
         $msg .= BML::ml( ".email.body.otherjournal" );
         $msg .= "  $url ";
     }
 }

 my $warnings;
 if (@warn) {
     $warnings .= "<?warningbar ";
     foreach my $w (@warn) {
         $warnings .= "$w<br />";
     }
     $warnings .= " warningbar?>";
     $body = $warnings . $body;
 }
 my $display_msg = $msg . $custom_msg;
 my $display_msg_footer = $msg_footer;
 $display_msg =~ s/\n/<br \/>/gm;
 $display_msg_footer =~ s/\n/<br \/>/gm;
 $body .= LJ::html_hidden({ name => 'subject', value => "$subject" });
 $body .= LJ::html_hidden({ name => 'body_start', value => $msg });
 $body .= "<tr><td valign=top colspan='2'>" . BML::ml( ".email.body.boxtitle" ) . "<br />" .
          "<div class='message'><blockquote>" . $display_msg . "<br />" .
          LJ::html_textarea({ name => 'body', rows => 6, cols => 55, wrap => 'soft', value => $POST{'body'} }) .
          "$display_msg_footer</blockquote></div></td></tr>\n";

 $body .= "<tr><td colspan='2' align='center'><div class='action-box'><div class='inner'>" .
          LJ::html_submit(BML::ml( ".sendbutton" )) . "</div></div><div class='clear-floats'></div></td></tr>\n";
 $body .= "</table>";
 $body .= "</form>";

 return;

_code?><?page
title=><?_code return $title; _code?>
body=><?_code return $body; _code?>
page?>
