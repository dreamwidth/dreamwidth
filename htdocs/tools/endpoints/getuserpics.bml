<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?_code # -*-bml-*-
{
    use strict;
    use JSON;

    use vars qw( %GET );

    my $err = sub {
        my $msg = shift;
        return JSON::objToJson({
            'alert' => $msg,
        });
    };

    my $remote = LJ::get_remote();

    my $alt_u;
    $alt_u = LJ::load_user( $GET{user} )
        if $GET{user} && $remote->has_priv( "supporthelp" );

    # get user
    my $u = ( $alt_u || $remote )
        or return $err->("Sorry, you must be logged in to use this feature.");

    # get userpics
    my @userpics = LJ::Userpic->load_user_userpics($u);

    my %upics = (); # info to return
    $upics{pics} = {}; # upicid -> hashref of metadata

    foreach my $upic (@userpics) {
        next if $upic->inactive;

        my $id = $upic->id;
        $upics{pics}{$id} = {
            url => $upic->url,
            state => $upic->state,
            width => $upic->width,
            height => $upic->height,

            # FIXME: update to a simple . "" conversion when we have a newer JSON version
            #        ( no code ref will be required )
            # we don't want the full version of alttext here, because the keywords, etc
            # will already likely be displayed by the icon

            # We don't want to use ehtml, because we want the JSON converter
            # handle escaping ", ', etc. We just escape the < and > ourselves
            alt => sub { LJ::etags($upic->description) . "" }, # force to string

            comment => sub { LJ::strip_html($upic->comment) . "" } , # force to string

            id => $id,
            keywords => [ map { LJ::strip_html($_) } $upic->keywords],
        };
    }

    $upics{ids} = [sort { $a <=> $b } keys %{$upics{pics}}];
    sleep 1 if $LJ::IS_DEV_SERVER;

    local $JSON::ExecCoderef = 1;
    return JSON::objToJson(\%upics);
}
_code?>
