<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?_code # -*-bml-*-
{
    use strict;
    use vars qw(%GET);
    use LJ::JSON;

    my $err = sub {
        my $msg = shift;
        return to_json({
            content => "Error: $msg",
        });
    };

    # get user
    my $remote = LJ::get_remote()
        or return $err->("Sorry, you must be logged in to use this feature.");

    # log ack
    my $class = $GET{class};
    return $err->("Invalid class: $class")
        unless $class && $class =~ /LJ::CProd::.+/;

    LJ::CProd->mark_acked($remote, $class);

    my %ret;

    # generate content
    my $style = $GET{style} || '';
    if (!$GET{content} || lc $GET{content} eq 'framed') {
        $ret{content} = LJ::CProd->full_box_for($remote, style => $style);
    } elsif(lc $GET{content} eq 'raw') {
        $ret{content} = LJ::CProd->box_for($remote, style => $style);
    } else {
        return $err->("Invalid content request");
    }

    select undef, undef, undef, 0.25 if $LJ::IS_DEV_SERVER;

    BML::set_content_type('text/javascript; charset=utf-8');
    BML::finish();

    return to_json(\%ret);
}
_code?>
