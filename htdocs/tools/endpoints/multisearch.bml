<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?_code
{
    use strict;
    use LJ::JSON;
    use vars qw(%FORM);

    my $max_users = 100;

    my $type    = $FORM{type}   || 'user';
    my $q       = $FORM{q}      || '';
    my $output  = $FORM{output} || 'html';

    BML::set_content_type('text/javascript; charset=utf-8');
    BML::finish();
    BML::noparse();

    return to_json({error => "There is no query provided.",}) unless $q;

    if ($type eq "user" || $type eq "ljtalk") {
        my $user = lc($q);
        $user =~ s!\@$LJ::USER_DOMAIN!!;
        my $what;
        if ($user =~ s!/(\w+)!!) {
            $what = $1;
        }

        $user =~ s/-/_/g;
        $user =~ s/[^\w]//g;

        my $url;

        if ($user) {
            if (my $u = LJ::load_user($user)) {
                if ($what eq "pics") {
                    $url = $u->allpics_base;
                } elsif ($output eq "foaf") {
                    $url = $u->journal_base . '/data/foaf';
                } else {
                    $url = $u->profile_url;
                    $url .= "?mode=full" if $what eq 'full';
                }
            }
        }

        if ($url) {
            my %ret;
            $ret{status} = 'success';
            $ret{result} = '<a href="' . $url . '">' . $user . '</a>';
            return to_json( \%ret );
        } else {
            return to_json({error => "There is no such user.",});
        }
    }

    if ($type eq "email") {
        my $email = lc($q);
        my $dbr = LJ::get_db_reader();
        my @uids;
        my $uid;
        my $uids_ref;

        my $uids_ref = $dbr->selectall_arrayref("SELECT userid FROM user WHERE journaltype='P' AND statusvis='V' ".
                                        "AND email=? LIMIT $max_users", undef);
        # try the email table
        unless (@$uids_ref) {
            $uids_ref = $dbr->selectall_arrayref(qq{
                SELECT e.userid
                FROM user u, email e
                WHERE e.email=? AND e.userid=u.userid AND u.journaltype='P' AND u.statusvis='V'
                LIMIT $max_users
            }, undef, $email);
        }

        my %ret;
        $ret{status} = 'success';
        $ret{result} = '';

        foreach $uid (@$uids_ref) {
            $uid = $uid->[0]; # dereference
            if (my $u = LJ::load_userid($uid)) {
                next unless $u->opt_findbyemail =~ /Y|H/; # The user has allowed to search for it by email
                if ($output eq "foaf") {
                    $ret{result} .= '<a href="' . $u->journal_base . '/data/foaf">' . $u->{user}. '</a>';
                } else {
                    $ret{result} .= '<a href="' . $u->profile_url . '">' . $u->{user}. '</a>';
                }
                $ret{result} .= '&nbsp';
            }
        }
        return to_json( \%ret ) if $ret{result};

        return to_json({error => "No user found",});
    }

    if ($type eq "im" ||
        $type eq "aolim" || $type eq "icq" ||
        $type eq "yahoo" || $type eq "msn" ||
        $type eq "jabber") {

        use LJ::Directory::Constraint::ContactInfo;
        my @uids = LJ::Directory::Constraint::ContactInfo->new(screenname => $q)->matching_uids;

        if (@uids == 1) {
            my $u = LJ::load_userid(shift @uids);
            my %ret;
            $ret{status} = 'success';
            if ($output eq "foaf") {
                $ret{result} = '<a href="' .$u->journal_base . '/data/foaf">' . $u->{user}. '</a>';
            } else {
                $ret{result} = '<a href="' . $u->profile_url . '">' . $u->{user}. '</a>';
            }
            return to_json( \%ret );
        } elsif (@uids > 1) {
            my $us = LJ::load_userids(@uids);

            my %ret;
            $ret{status} = 'success';
            $ret{result} = LJ::user_search_display(
                                                    users      => [ values %$us ],
                                                    timesort   => 1,
                                                    perpage    => 50,
                                                  );
            return to_json( \%ret );
        }

        # If we haven't returned already then the search turned up nothing.
        return to_json({error => "No user found",});
    }

    return to_json({error => "No type parameter",});
}
_code?>
