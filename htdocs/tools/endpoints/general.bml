<?_code # -*-bml-*-
{
    #
    # htdocs/tools/endpoints/general.bml
    #
    # The AJAX endpoint for general calls.
    #
    # Authors:
    #      Mark Smith <mark@dreamwidth.org>
    #
    # Copyright (c) 2009 by Dreamwidth Studios, LLC.
    #
    # This program is free software; you may redistribute it and/or modify it under
    # the same terms as Perl itself.  For a copy of the license, please reference
    # 'perldoc perlartistic' or 'perldoc perlgpl'.
    #

    use strict;
    use LJ::JSON;
    use vars qw/ %GET /;

    my $err = sub {
        return to_json( {
            alert => $_[0],
            error => 1,
        } );
    };

    # make sure we have a user of some sort
    my $remote = LJ::get_remote();
    my $u = LJ::load_user( $GET{user} || $remote->user )
        or return $err->( 'Unable to load user for call.' );

    # in theory, they're passing a mode in the GET arguments
    my $mode = $GET{mode}
        or return $err->( 'No mode passed.' );

    my %ret;

    # gets the list of people that this account subscribes to
    if ( $mode eq 'list_subscriptions' ) {
        $ret{subs} = $u->watch_list;

        my $uobjs = LJ::load_userids( keys %{ $ret{subs} } );
        foreach my $userid ( keys %$uobjs ) {
            $ret{subs}->{$userid}->{username} = $uobjs->{$userid}->user;            
            $ret{subs}->{$userid}->{journaltype} = $uobjs->{$userid}->journaltype;
        }

    # get the list of someone's tags
    } elsif ( $mode eq 'list_tags' ) {
        $ret{tags} = LJ::Tags::get_usertags( $u, { remote => $remote } );
        foreach my $val ( values %{ $ret{tags} } ) {
            delete $val->{security_level};
            delete $val->{security};
            delete $val->{display};
        }

    # problems
    } else {
        return $err->( 'Unknown mode.' );

    }

    return to_json( \%ret );
}
_code?>
