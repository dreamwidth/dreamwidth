<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?_code # -*-bml-*-
{
    use strict;
    use vars qw(%GET);
    use LJ::Auth;
    use LJ::JSON;

    my $err = sub {
        my $msg = shift;
        my %extra = @_;
        return to_json({
            error => "$msg",
            %extra,
        });
    };

    # get user
    my $remote = LJ::get_remote();

    my $get_user = sub {
        # three ways to load a user:

        # username:
        if (my $user = LJ::canonical_username($GET{'user'})) {
            return LJ::load_user($user);
        }

        # identity:
        if (my $userid = $GET{'userid'}) {
            return undef unless $userid =~ /^\d+$/;
            my $u = LJ::load_userid($userid);
            return undef unless $u && $u->identity;
            return $u;
        }

        # based on userpic url
        if (my $upurl = $GET{'userpic_url'}) {
            return undef unless $upurl =~ m!(\d+)/(\d+)!;
            my ($picid, $userid) = ($1, $2);
            my $u = LJ::load_userid($userid);
            my $up = LJ::Userpic->instance($u, $picid);
            return $up->valid ? $u : undef;
        }
    };

    my $u = $get_user->();
    my %ret = $u ? $u->info_for_js : ();
    my $reason = $u ? $u->prop( 'delete_reason' ) : '';
    $reason = $reason ? "Reason given: " . $reason : "No reason given.";

    BML::set_content_type('text/javascript; charset=utf-8');
    BML::finish();

    return $err->("Error: Invalid mode")
        unless $GET{mode} eq 'getinfo';
    return $err->("No such user", noshow => 1)
        unless $u;
    return $err->("This user's account is deleted.<br />" . $reason)
        if $u->is_deleted;
    return $err->("This user's account is deleted and purged.")
        if $u->is_expunged;
    return $err->("This user's account is suspended.")
        if $u->is_suspended;

    # uri for changerelation auth token
    my $uri = '/__rpc_changerelation';

    # actions to generate auth tokens for
    my @actions = ();

    $ret{url_addtrust} = "$LJ::SITEROOT/manage/circle/add?user=" . $u->{user} . "&action=access";
    $ret{url_addwatch} = "$LJ::SITEROOT/manage/circle/add?user=" . $u->{user} . "&action=subscribe";

    my $up = $u->userpic;
    if ($up) {
        $ret{url_userpic} = $up->url;
        $ret{userpic_w}   = $up->width;
        $ret{userpic_h}   = $up->height;
    } else {
        # if it's a feed, make their userpic the feed icon
        if ($u->is_syndicated) {
            $ret{url_userpic} = "$LJ::IMGPREFIX/feed100x100.png";
        } elsif ($u->is_identity) {
            $ret{url_userpic} = "$LJ::IMGPREFIX/identity_100x100.png";
        } else {
            $ret{url_userpic} = "$LJ::IMGPREFIX/nouserpic.png";
        }
        $ret{userpic_w} = 100;
        $ret{userpic_h} = 100;
    }

    if ($remote) {
        $ret{is_trusting}   = $remote->trusts( $u );
        $ret{is_trusted_by} = $u->trusts( $remote );
        $ret{is_watching}   = $remote->watches( $u );
        $ret{is_watched_by} = $u->watches( $remote );
        $ret{is_requester}  = $remote->equals( $u );
        $ret{other_is_identity} = $u->is_identity;
        $ret{self_is_identity} = $remote->is_identity;
        $ret{can_message} = $u->can_receive_message( $remote );
        $ret{url_message} = $u->message_url;
        $ret{can_receive_vgifts} = $u->can_receive_vgifts_from( $remote );
        $ret{url_vgift} = $u->virtual_gift_url;
    }

    $ret{is_logged_in}  = $remote ? 1 : 0;

    if ($u->is_comm) {
        $ret{url_joincomm}   = "$LJ::SITEROOT/community/join?comm=" . $u->{user};
        $ret{url_leavecomm}  = "$LJ::SITEROOT/community/leave?comm=" . $u->{user};
        $ret{is_member} = $remote->member_of( $u ) if $remote;
        $ret{is_closed_membership} = $u->is_closed_membership;

        push @actions, 'join', 'leave';
    }

    # generate auth tokens
    if ($remote) {
        push @actions, 'addTrust', 'addWatch', 'removeTrust', 'removeWatch', 'setBan' , 'setUnban';
        foreach my $action (@actions) {
            $ret{"${action}_authtoken"} = $remote->ajax_auth_token(
                                                                   $uri,
                                                                   target => $u->user,
                                                                   action => $action,
                                                                  );
        }
    }

    sleep(1.5) if $LJ::IS_DEV_SERVER;
    my %extrainfo = LJ::Hooks::run_hook( "ctxpopup_extra_info", $u ) || ();
    %ret = (%ret, %extrainfo) if %extrainfo;

    $ret{is_banned} = $remote->has_banned( $u ) ? 1 : 0 if $remote;

    $ret{success} = 1;
    return to_json( \%ret );
}
_code?>
