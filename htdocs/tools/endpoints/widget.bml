<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?_code # -*-bml-*-
{
    use strict;
    use vars qw(%GET %POST @errors);

    use LJ::Auth;
    use LJ::JSON;
    use LJ::Widget::IPPU;

    my $err = sub {
        my $msg = shift;
        my %extra = @_;
        return to_json({
            error => "$msg",
        });
    };

    BML::set_content_type('text/javascript; charset=utf-8');
    BML::finish();
    BML::noparse();

    return $err->("Sorry widget AJAX is not enabled")
        unless LJ::is_enabled('widget_ajax');

    my $remote = LJ::get_remote();

    my $widget_class = $POST{_widget_class} || $GET{_widget_class};
    return $err->("Invalid widget class $widget_class") unless $widget_class =~ /^(IPPU::)?\w+$/gm;
    $widget_class = "LJ::Widget::$widget_class";

    return $err->("Cannot do AJAX request to $widget_class")
        unless $widget_class->ajax;

    # lame hack to circumvent a bigip/perlbal interaction
    # that sometimes closes keepalive POST requests under
    # certain conditions. accepting GETs makes it work fine
    if (%GET && $widget_class->can_fake_ajax_post) {
        undef %POST;
        $POST{$_} = $GET{$_} foreach keys %GET;
    }

    my $widget_id    = $POST{_widget_id};
    my $widget_ippu  = $POST{_widget_ippu};
    my $doing_post   = delete $POST{_widget_post};

    my %ret = (
               _widget_id    => $widget_id,
               _widget_class => $widget_class,
               );

    # make sure that we're working with the right user
    if ($POST{authas}) {
        if ($widget_class->authas) {
            my $u = LJ::get_authas_user($POST{authas});
            return $err->("Invalid user.") unless $u;
        } else {
            return $err->("Widget does not support authas authentication.");
        }
    }

    if ($doing_post) {
        # just a normal post request, handle it and then return status

        local $LJ::WIDGET_NO_AUTH_CHECK = 1 if
            $remote->check_ajax_auth_token( "/_widget", auth_token => delete $POST{auth_token} );

        my %res;

        eval {
            %res = LJ::Widget->handle_post(\%POST, $widget_class);
        };

        $ret{res} = \%res;

        $ret{errors} = $@ ? [$@] : \@errors;
        $ret{_widget_post} = 1;

        # generate new auth token for future requests if succesfully checked auth token
        $ret{auth_token} = $remote->ajax_auth_token( "/_widget" ) if $LJ::WIDGET_NO_AUTH_CHECK;
    }

    if (delete $POST{_widget_update}) {
        # render the widget and return it

        # remove the widget prefix from the POST vars
        foreach my $key (keys %POST) {
            my $orig_key = $key;
            if ($key =~ s/^Widget\[\w+?\]_//) {
                $POST{$key} = $POST{$orig_key};
                delete $POST{$orig_key};
            }
        }
        $ret{_widget_body} = eval { $widget_class->render_body(%POST); };
        $ret{_widget_body} = "Error: $@" if $@;
        $ret{_widget_update} = 1;
    }

#    sleep(2) if $LJ::IS_DEV_SERVER;

    return to_json( \%ret );
}
_code?>
