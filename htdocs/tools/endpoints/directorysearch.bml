<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?_code # -*-bml-*-
{
    use strict;
    use vars qw(%FORM);
    use LJ::JSON;
    use LJ::Directory::Search;
    use LJ::WorkerResultStorage;
    use Storable;

    my $err = sub {
        my $msg = shift;
        return to_json({
            error => "$msg",
        });
    };

    BML::set_content_type('text/javascript; charset=utf-8');
    BML::finish();
    BML::noparse();

    my %ret;

    if ($FORM{search_handle}) {
        # return status of the search
        my $result_storage = LJ::WorkerResultStorage->new(handle => $FORM{search_handle})
            or return $err->("Error getting search results");

        my %search_status = $result_storage->status;

        if (%search_status) {
            if ($search_status{status} eq 'running') {
                # return the status of the job
                $ret{$_} = $search_status{$_} foreach keys %search_status;
            } elsif ($search_status{status} eq 'error') {
                # return the error
                return $err->($search_status{result});
            } elsif ($search_status{status} eq 'success') {
                # return results
                {
                    my $resultsblob = $search_status{result};
                    my $results = Storable::thaw($resultsblob)
                        or return $err->("Error getting search results");

                    # get update times
                    my $updated = LJ::get_timeupdate_multi(map { $_->userid } $results->users);

                    my @users;
                    foreach my $u ($results->users) {
                        my $updatetime = $updated->{$u->userid};
                        my $updatetimestring = LJ::diff_ago_text( $updatetime );

                        push @users, {
                            lastupdated => $updatetime,
                            $u->info_for_js,
                            lastupdated_string => $updatetimestring,
                        };
                    }

                    $ret{users} = \@users;
                    $ret{search_complete} = 1;
                }
            } else {
                # unknown, perhaps the job hasn't started yet?
                $ret{status} = "unknown";
            }
        } else {
            $ret{status} = "unknown";
        }
    } else {
        # initiate search

        # build list of search constraints from post/get args
        my $constraint_strings = from_json($FORM{constraints}) || [];
        my @constraints;
        foreach my $constraint_string (@$constraint_strings) {
            my @constraint_params = split('&',  $constraint_string);

            my %constraint_args;

            foreach my $constraint_param (@constraint_params) {
                my @constraint_args = map { LJ::durl($_) } grep { $_ } (split('=', $constraint_param));
                %constraint_args = (%constraint_args, @constraint_args);
            }

            push @constraints, LJ::Directory::Constraint->constraints_from_formargs(\%constraint_args);
        }
        foreach my $constraint (@constraints) {
            next unless $constraint->isa('LJ::Directory::Constraint::Interest');
            
            if (LJ::Hooks::run_hook("interest_search_ignore", intid => $constraint->intid)) {
                return $err->("Sorry, we're unable to help you find users matching the interests you've provided.");
            }
        }
        return $err->("No search constraints were specified") unless @constraints;

        my $dir = LJ::Directory::Search->new(page_size => $LJ::MAX_DIR_SEARCH_RESULTS, constraints => \@constraints);
        my $handle = $dir->search_background;

        return $err->("Search is currently unavailable") unless $handle;

        $ret{search_handle} = $handle;
    }

    sleep(1) if $LJ::IS_DEV_SERVER;

    return to_json( \%ret );
}
_code?>
