<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?_code # -*-bml-*-
{
    use strict;
    use vars qw(%POST);
    use LJ::Auth;
    use LJ::JSON;

    my $err = sub {
        my $msg = shift;
        return to_json({
            error => "Error: $msg",
        });
    };

    # get user
    my $remote = LJ::get_remote()
        or return $err->("Sorry, you must be logged in to use this feature.");

    # check auth token
    return $err->("Invalid auth token") unless $remote->check_ajax_auth_token( '/__rpc_changerelation', %POST );

    my $target = $POST{target} or return $err->("No target specified");
    my $action = $POST{action} or return $err->("No action specified");

    # Prevent XSS attacks
    $target = LJ::ehtml($target);
    $action = LJ::ehtml($action);

    my $targetu = LJ::load_user($target) or return $err->("Invalid user $target");

    my $success = 0;

    my %ret = ();

    if ( $action eq 'addTrust' ) {
        my $error;
        return $err->( $error )
            unless $remote->can_trust( $targetu, errref => \$error );

        $success = $remote->add_edge( $targetu, trust => {} );
    } elsif ( $action eq 'addWatch' ) {
        my $error;
        return $err->( $error )
            unless $remote->can_watch( $targetu, errref => \$error );

        $success = $remote->add_edge( $targetu, watch => {} );

        $success &&= $remote->add_to_default_filters( $targetu );
    } elsif ( $action eq 'removeTrust' ) {
        $success = $remote->remove_edge( $targetu, trust => {} );
    } elsif ( $action eq 'removeWatch' ) {
        $success = $remote->remove_edge( $targetu, watch => {} );
    } elsif ( $action eq 'join' ) {
        my $error;
        if ( $remote->can_join( $targetu, errref => \$error ) ) {
            $success = $remote->join_community( $targetu );
        } else {
            if ( $error eq LJ::Lang::ml( 'edges.join.error.targetnotopen' ) && $targetu->is_moderated_membership ) {
                $targetu->comm_join_request( $remote );
                $ret{note} = BML::ml( '/community/join.bml.reqsubmitted.body' );
            } else {
                return $err->( $error );
            }
        }
    } elsif ( $action eq 'leave' ) {
        my $error;
        return $err->( $error )
            unless $remote->can_leave( $targetu, errref => \$error );

        $success = $remote->leave_community( $targetu );
    } elsif ( $action eq 'setBan' ) {
        my $list_of_banned = LJ::load_rel_user($remote, 'B') || [ ];

        return $err->("Exceeded limit maximum of banned users")
            if @$list_of_banned >= ($LJ::MAX_BANS || 5000);

        my $ban_user = LJ::load_user($target);
        $success = $remote->ban_user($ban_user);
        LJ::Hooks::run_hooks('ban_set', $remote, $ban_user);

        #$ret{is_banned} = $remote->has_banned($ban_user) ? 1 : 0;
    } elsif ( $action eq 'setUnban' ) {
        my $unban_user = LJ::load_user($target);
        $success = $remote->unban_user_multi($unban_user->{userid});
        #$ret{is_banned} = $remote->has_banned($unban_user) ? 1 : 0;
    } else {
        return $err->("Invalid action $action");
    }

    sleep 1 if $LJ::IS_DEV_SERVER;

    return to_json({
        success     => $success,
        is_trusting => $remote->trusts( $targetu ),
        is_watching => $remote->watches( $targetu ),
        is_member   => $remote->member_of( $targetu ),
        is_banned   => $remote->has_banned( $targetu ),
        %ret,
    });
}

_code?>
