<?_code # -*-bml-*-
{
    #
    # htdocs/tools/endpoints/contentfilters.bml
    #
    # The AJAX endpoint for content filter related calls.
    #
    # Authors:
    #      Mark Smith <mark@dreamwidth.org>
    #
    # Copyright (c) 2009 by Dreamwidth Studios, LLC.
    #
    # This program is free software; you may redistribute it and/or modify it under
    # the same terms as Perl itself.  For a copy of the license, please reference
    # 'perldoc perlartistic' or 'perldoc perlgpl'.
    #

    use strict;
    use JSON;
    use vars qw/ %GET /;

    my $err = sub {
        return JSON::objToJson( {
            alert => $_[0],
            error => 1,
        } );
    };

    # make sure we have a user of some sort
    my $remote = LJ::get_remote();
    my $u = LJ::get_authas_user( $GET{user} || $remote->user )
        or return $err->( 'Unable to load user for call.' );

    # in theory, they're passing a mode in the GET arguments
    my $mode = $GET{mode}
        or return $err->( 'No mode passed.' );

    my %ret;

    # list_filters mode is very simple: it returns an array of the filters with the
    # pertinent information about those filters
    if ( $mode eq 'list_filters' ) {
        $ret{filters} = {};

        my @filters = $u->content_filters;
        foreach my $filt ( @filters ) {
            $ret{filters}->{$filt->id} =
                {
                    id => $filt->id,
                    name => $filt->name,
                    sortorder => $filt->sortorder,
                    public => $filt->public,
                };
        }

    # list the names of the people who are on a filter
    } elsif ( $mode eq 'list_members' ) {
        $ret{members} = {};

        my $filter = $u->content_filters( id => $GET{filterid} )
            or return $err->( 'No such filter.' );

        my $data = $filter->data;
        foreach my $uid ( keys %$data ) {
            my $member = $data->{$uid};

            # FIXME: use load_userids_multiple to get the user objects...
            $ret{members}->{$uid} = {
                user => LJ::load_userid( $uid )->user,
                adultcontent => $member->{adultcontent} || 'any',
                postertype => $member->{postertype} || 'any',
                tagmode => $member->{tagmode} || 'any_of',
                tags => { map { $_ => 1 } @{ $member->{tags} || [] } },
            };
        }

    # called to make a brand new filter
    } elsif ( $mode eq 'create_filter' ) {
        return $err->( 'Can only create filters for people.' )
            unless $u->is_individual;

        return $err->( 'No name provided.' )
            unless $GET{name} =~ /\S/;

        my $fid = $u->create_content_filter( name => $GET{name} );
        return $err->( 'Failed to create content filter.' )
            unless $fid;

        my $cf = $u->content_filters( id => $fid );
        return $err->( 'Failed to retrieve content filter.' )
            unless $cf;

        %ret = (
            id => $cf->id,
            name => $cf->name,
            public => $cf->public,
            sortorder => $cf->sortorder,
        );

    # delete a content filter
    } elsif ( $mode eq 'delete_filter' ) {
        return $err->( 'Can only create filters for people.' )
            unless $u->is_individual;

        return $err->( 'No/invalid id provided.' )
            unless $GET{id} =~ /^\d+$/;

        my $id = $u->delete_content_filter( id => $GET{id} );
        return $err->( 'Failed to delete the content filter.' )
            unless $id == $GET{id};

        $ret{ok} = 1;

    # save incoming changes
    } elsif ( $mode eq 'save_filters' ) {
        local $JSON::UnMapping = 1;
        my $obj = JSON::jsonToObj( $POST{json} );

        foreach my $fid ( keys %$obj ) {
            my $filt = $obj->{$fid};

            # load this filter
            my $cf = $u->content_filters( id => $fid );
            return $err->( "Filter id $fid does not exist." )
                unless $cf;

            # update the name if necessary, this has to be before the members check
            # because they might not have loaded members (or it might have none)
            $cf->name( $filt->{name} )
                if $filt->{name} && $filt->{name} ne $cf->name;

            # skip the filter if it hasn't actually been loaded
            next unless defined $filt->{members};

            # get data object for use later
            my $data = $cf->data;

            # fix up the member list
            foreach my $uid ( keys %{ $filt->{members} } ) {
                my $member = $filt->{members}->{$uid};

                # don't need this, we can look it up
                delete $member->{user};

                # tags are given to us as a hashref, we need to flatten to an array
                $member->{tags} = [ keys %{ $member->{tags} || {} } ];

                # these may or may not be present, nuke them if they're default
                delete $member->{postertype}
                    if $member->{postertype} && $member->{postertype} eq 'any';
                delete $member->{adultcontent}
                    if $member->{adultcontent} && $member->{adultcontent} eq 'any';
                delete $member->{tagmode}
                    if $member->{tagmode} && $member->{tagmode} eq 'any_of';

                # now save this in the actual filter
                $data->{$uid} = $member;
            }

            # see whether we deleted any members from the filter
            foreach my $uid ( keys %{ $data } ) {
                # delete userid from $data if it is not also in $filt->{members}
                delete $data->{$uid} unless exists $filt->{members}->{$uid};
            }

            # save public and sortorder preferences
            $cf->_getset( 'sortorder', $filt->{sortorder} + 0 ) unless $filt->{sortorder} == $cf->{sortorder};
            $cf->_getset( 'public', $filt->{public} ? 1 : 0 ) unless $filt->{public} == $cf->{public};

            # save the filter, very important...
            $cf->_save;
        }

        $ret{ok} = 1;
    } elsif ( $mode eq "view_filter" ) {
        # called to get reading page url
        return $err->( 'No name provided.' )
            unless $GET{name} =~ /\S/;

        $ret{url} = $u->journal_base . "/read/" . $GET{name};
    }

    return JSON::objToJson( \%ret );
}
_code?>
