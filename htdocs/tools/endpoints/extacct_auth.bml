<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?_code # -*-bml-*-
{
    use strict;
    use vars qw(%GET);
    use LJ::JSON;
    use DW::External::Account;

    # error method
    my $err = sub {
        my $msg = shift;
        return to_json({
            error => $msg
        });
    };

    # set this up before we do anything
    BML::set_content_type('text/javascript; charset=utf-8');
    BML::finish();

    # get user
    my $u = LJ::get_remote()
        or return $err->(BML::ml('/tools/endpoints/extacct_auth.bml.error.nouser'));
    
    # get the account
    my $acctid = $GET{'acctid'};
    my $account = DW::External::Account->get_external_account($u, $acctid);
    return $err->(BML::ml('/tools/endpoints/extacct_auth.bml.error.nosuchaccount', { acctid => $acctid, username => $u->username })) unless $account;

    # make sure this account supports challenge/response authentication
    return $err->(BML::ml('/tools/endpoints/extacct_auth.bml.error.nochallenge', { account => $account->displayname })) unless $account->supports_challenge;

    # get the auth challenge
    my $challenge = $account->challenge;
    return $err->(BML::ml('/tools/endpoints/extacct_auth.bml.error.authfailed', { account => $account->displayname } )) unless $challenge;

    # return the challenge
    return to_json( { challenge => $challenge, success => 1 } );
}
_code?>
