<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
body<=
<?_code
{
    use strict;
    use vars qw($head %FORM %ML %GET $title_user $title_subject $title);

    $head = "";  # not local, used to build <link> tags

    LJ::need_res(qw (stc/display_none.css stc/talkpage.css) );

    my $remote = LJ::get_remote();
    my $errtxt;

    # libs for userpicselect
    LJ::need_res( LJ::Talk::init_iconbrowser_js( LJ::BetaFeatures->user_in_beta( $remote => "journaljquery" ) ) )
        if $remote && $remote->can_use_userpic_select;
    LJ::set_active_resource_group( "jquery" )
        if LJ::BetaFeatures->user_in_beta( $remote => "journaljquery" );


    my $pics = LJ::Talk::get_subjecticons();

    my $apache_r = BML::get_request();
    $apache_r->notes->{codepath} = "bml.talkpost";

    my $uri = BML::get_uri();

    my $editid = $FORM{edit} ? $FORM{edit} : 0;
    my $comment;
    if ($editid) {
        $comment = LJ::Comment->new(LJ::load_user($apache_r->notes->{_journal}), dtalkid => $editid);
        return $errtxt unless $comment->remote_can_edit(\$errtxt);

        my $parent = $comment->parent;
        # for comments where the parent comment is deleted, we pretend the parent comment doesn't exist so the user can edit
        $parent = undef if $parent && $parent->is_deleted;
        $FORM{replyto} = $parent ? $comment->parent->dtalkid : 0;

        $FORM{subject} = $comment->subject_orig;
        $FORM{body} = $comment->body_orig;
        $FORM{subjecticon} = $comment->prop('subjecticon');
        $FORM{prop_opt_preformatted} = $comment->prop('opt_preformatted');

        $FORM{prop_picture_keyword} = $comment->userpic_kw;
    }

    if ($uri =~ m!/(\d+)\.html$!) {
        $FORM{'itemid'} = $1 unless $FORM{'replyto'} > 0;
        $FORM{'journal'} = $apache_r->notes->{_journal};
        BML::set_language_scope("/talkpost.bml");
    }

    my $init = LJ::Talk::init(\%FORM);
    return "<?h1 $ML{'Error'} h1?><?p $init->{'error'} p?>" if $init->{'error'};

    my $u = $init->{'journalu'};
    return $ML{'talk.error.nojournal'} unless $u;

    $title_user = $u->user;

    $apache_r->notes->{journalid} = $u->{'userid'};
    return $LJ::MSG_READONLY_USER if $u->is_readonly;

    my $dbcr = LJ::get_cluster_def_reader($u);

    return $LJ::MSG_READONLY_USER if $LJ::CLUSTER_DOWN{0} || ! $dbcr;

    # redirect if account was renamed
    if ( $u->is_redirect ) {
        my $id = $FORM{'itemid'} + 0;
        my $redirect = $u->redirect_rename( "/$id.html?mode=reply" );
        return $redirect if $redirect;
    }

    LJ::Hooks::run_hooks("need_res_for_journals", $u);

    my $ret = "";

    my $parpost;
    my $reply;

    if ( $init->{replyto} )
    {
        my $qparentid = $init->{'replyto'};

        my $sql = "SELECT t.posterid, t.nodetype, t.jtalkid, t.nodeid AS 'itemid', ".
            "UNIX_TIMESTAMP()-UNIX_TIMESTAMP(t.datepost) AS 'secondsold', ".
            "t.state, l.anum FROM talk2 t, log2 l WHERE l.journalid=$u->{'userid'} AND ".
            "l.jitemid=t.nodeid AND t.journalid=$u->{'userid'} AND t.jtalkid=$qparentid";
        foreach my $pass (1, 2) {
            my $db = $pass == 1 ? LJ::get_cluster_reader($u) : $dbcr;
            $parpost = $db->selectrow_hashref($sql);
            last if $parpost;
        }
        return $ML{'.error.noreplypost'} unless $parpost;

        unless ($parpost->{'nodetype'} eq "L" && $parpost->{'itemid'}) {
            return "<?h1 $ML{'Error'} h1?><?p $ML{'.error.cannotreplynopost'} p?>";
        }

        ## load its text
        {
            my $tt = LJ::get_talktext2($u, $init->{'replyto'});
            $parpost->{'subject'} = $tt->{$init->{'replyto'}}->[0];
            $parpost->{'body'} = $tt->{$init->{'replyto'}}->[1];
        }

        ### load the talk properties

        LJ::load_talk_props2($u->{'userid'}, [ $init->{'replyto'} ], {$init->{'replyto'} => $parpost});

        if($LJ::UNICODE && $parpost->{'unknown8bit'}) {
            LJ::item_toutf8($u, \$parpost->{'subject'}, \$parpost->{'body'}, {});
          }

        $init->{'itemid'} = $parpost->{'itemid'};
        $init->{'ditemid'} = $parpost->{'itemid'}*256 + $parpost->{'anum'};
    }

    my $itemid = $init->{'itemid'};

    ## load the journal item
    my $item = LJ::Talk::get_journal_item($u, $itemid);

    if ($init->{'oldurl'} && $item) {
        $init->{'anum'} = $item->{'anum'};
        $init->{'ditemid'} = $init->{'itemid'}*256 + $item->{'anum'};
    }

    unless ($item && $item->{'anum'} == $init->{'anum'}) {
        return "<?h1 $ML{'Error'} h1?><?p $ML{'talk.error.noentry'} p?>";
    }

    my $props = $item->{'props'};

    my $ditemid = $init->{'ditemid'};
    my $talkurl = $u->journal_base . "/$ditemid.html";
    my $entry = LJ::Entry->new( $u, ditemid => $ditemid );

    # canonical link to the entry or comment thread
    $head .= LJ::canonical_link( $entry->url, $GET{replyto} );

    my $toplevel = $parpost ? 0 : 1;
    $parpost ||= $item;  # if there's no parent post, remote is reply to top-level item

    my ($up, $ur);  # $up = user posted journal item; $ur = user remote is replying to
    LJ::load_userids_multiple([ $item->{'posterid'} => \$up,
                                $parpost->{'posterid'} => \$ur, ],
                              [ $u ]);

    my @user_props = ("opt_whoscreened");
    push @user_props, qw( opt_blockrobots adult_content ) if $u->is_visible;
    $u->preload_props(@user_props);
    if (!$u->is_visible || $u->should_block_robots || ($entry && $entry->should_block_robots)) {
        $head = LJ::robot_meta_tags();
    }

    # check suspended user
    return "<?h1 $ML{'talk.error.suspended.title'} h1?><?p $ML{'talk.error.suspended'} p?>"
        if $u->is_suspended || $up->is_suspended ||
           $ur && $ur->is_suspended;

    # check read-only user
    return "<?h1 $ML{'talk.error.readonly_remote.title'} h1?><?p $ML{'talk.error.readonly_remote'} p?>"
        if $remote && $remote->is_readonly;
    return "<?h1 $ML{'talk.error.readonly_journal.title'} h1?><?p $ML{'talk.error.readonly_journal'} p?>"
        if $u->is_readonly;

    # check deleted
    if ( $u->is_deleted ) {
        return $u->display_journal_deleted( $remote, bml => {
                title => \$title,
                head => \$head } );
    }

    # check suspended entry
    # reply page of suspended entry cannot be accessed by anyone, even entry poster
    return "<?h1 $ML{'talk.error.suspended.title'} h1?><?p " . BML::ml('talk.error.suspendedentryreply', { aopts => "href='" . $u->journal_base . "/'" }) . " p?>"
        if $entry && $entry->is_suspended;

    my $parentcomment;
    $parentcomment = LJ::Comment->new( $u, jtalkid => $parpost->{jtalkid} ) unless $toplevel;

    # check for screened comment
    if ( $parentcomment ) {
        return "<?h1 $ML{'Error'} h1?><?p $ML{'.error.noreply_screened'} p?>"
            if $parpost->{'state'} eq "S" && !$parentcomment->visible_to( $remote );
    }

    return "<?h1 $ML{'Error'} h1?><?p $ML{'.error.noreply_deleted'} p?>"
        if $parpost->{'state'} eq "D";

    # check if frozen
    return "<?h1 $ML{'Error'} h1?><?p $ML{'.error.noreply_frozen'} p?>"
        if $parpost->{'state'} eq "F";

    # don't allow anonymous comments on syndicated items
    if ( $u->is_syndicated && $u->{'opt_whocanreply'} eq "all" ) {
        $u->{'opt_whocanreply'} = "reg";
    }

    ####  Check security before viewing this post
    return $errtxt unless LJ::Talk::check_viewable($remote, $item, \%FORM, \$errtxt);

    my $event = !$FORM{'replyto'} ? $item->{'event'} : $parpost->{'body'};
    my $preformatted = $FORM{'replyto'} eq "" ? $props->{'opt_preformatted'} : $parpost->{'opt_preformatted'};

    my $suspend_msg = $entry && $entry->should_show_suspend_msg_to($remote) ? 1 : 0;
    LJ::CleanHTML::clean_event(\$event, { 'preformatted' => $preformatted,
                                          'suspend_msg' => $suspend_msg,
                                          'unsuspend_supportid' => $suspend_msg ? $entry->prop("unsuspend_supportid") : 0, });
    LJ::expand_embedded($u, $ditemid, $remote, \$event);
    BML::ebml(\$event);

    $ret .= "<table summary='' id='poster'><tr>";

    my $pickw = $init->{'replyto'} ? $parpost->{'picture_keyword'} : $props->{'picture_keyword'};
    LJ::Hooks::run_hook('notify_event_displayed', $entry);

    my $userpic;
    if ( $init->{replyto} ) {
        $userpic = $parentcomment->userpic;
    } else {
        $userpic = $entry->userpic;
    }

    my %userpics;
    if ($userpic) {
        $ret .= "<td class='userpic' valign='bottom'>" .  $userpic->imgtag . "</td>";
    }

    $ret .= "<td class='attrib' valign='bottom'>";

    # who-wrote-where
    {
        my $suffix = $u->equals( $ur ) ? "" : "_comm";

        # user logged in
        if ($ur) {
            $ret .= BML::ml("talk.somebodywrote$suffix",
                            { 'realname' => LJ::ehtml($ur->{'name'}),
                              'userlink' => LJ::ljuser($ur),
                              'commlink' => LJ::ljuser($u) });

        # user anonymous
        } else {
            $ret .= BML::ml("talk.anonwrote$suffix",
                            { 'commlink' => LJ::ljuser($u) });
        }
    }

    unless ($init->{'replyto'}) {
        my $etime = LJ::mysqldate_to_time( $item->{eventtime} );
        $etime = LJ::S2::sitescheme_secs_to_iso( $etime );
        $ret .= LJ::Talk::format_eventtime( $etime, $u );
    }

    $ret .= "</td></tr></table>";

    unless ($init->{'replyto'}) {
        $ret .= LJ::Talk::link_bar({ 'u' => $u, 'up' => $up, 'headref' => \$head,
                                     'remote' => $remote, 'itemid' => $ditemid, });
    }

    if ($u->is_locked) {
        $ret .= "<div class='warningbar warning-background' style='text-align: center; margin: 5px auto;'>$ML{'statusvis_message.locked'}</div>";
    } elsif ($u->is_memorial) {
        $ret .= "<div class='warningbar warning-background' style='text-align: center; margin: 5px auto;'>$ML{'statusvis_message.memorial'}</div>";
    } elsif ($u->is_readonly) {
        $ret .= "<div class='warningbar warning-background' style='text-align: center; margin: 5px auto;'>$ML{'statusvis_message.readonly'}</div>";
    }

    my %current = LJ::currents( $props, $up, { entry => $entry } );

    $ret .= "<div id='entry' class='usercontent' style='margin-left: 30px'>";

    $ret .= LJ::currents_table( %current ) unless $init->{replyto};

    ### security indicator
    my $sec = "";
    if ($parpost->{'security'} eq "private") {
        $sec = BML::fill_template("securityprivate");
    } elsif ($parpost->{'security'} eq "usemask") {
        if ($parpost->{'allowmask'} == 0) { # custom security with no group -- essentially private
            $sec = BML::fill_template("securityprivate");
        } elsif ($parpost->{'allowmask'} > 1 && $u && $u->equals($remote)) { # custom group -- only show to journal owner
            $sec = BML::fill_template("securitygroups");
        } else { # friends only or custom group showing to non journal owner
            $sec = BML::fill_template("securityprotected");
        }
    }

    # age restriction settings
    my $age_restriction = "";
    my $entry_age_prop = $item->{props}->{adult_content} || "";
    if ( $entry_age_prop eq "explicit" ) {
        $age_restriction = LJ::img( "adult-18" );
    } elsif ( $entry_age_prop eq "concepts" ) {
        $age_restriction = LJ::img( "adult-nsfw" );
    }

    $ret .= $sec . $age_restriction;
    $ret .= "<br />\n" unless ( $sec eq "" && $age_restriction eq "" ) or $parpost->{subject};


    # define this variable OUTSIDE the following if-statement
    my $cleansubject = $parpost->{'subject'};

    ###
    if ($parpost->{'subject'}) {
        if ($init->{'replyto'}) {
            # comments can't have HTML in subjects at all
            $cleansubject = LJ::ehtml($cleansubject);
        } else {
            # but journal entries can have some
            LJ::CleanHTML::clean_subject(\$cleansubject);
            BML::ebml(\$cleansubject);
          }
          $title_subject = LJ::strip_html($cleansubject);
        } else {
          # (no subject) should display in mode=reply too!
          $title_subject = BML::ml('.nosubject');
      }

    $ret .= qq{<div id='entrysubj'><h2><a href="$talkurl">$title_subject</a></h2></div>\n};
        # let's go for visual consistency with the main entry page!
        # note that this doesn't contain the age-restriction $flags magic
    $ret .= $event;
    $ret .= "</div>";

    # links to reply, thread from start, parent comment, and thread
    if ( $parentcomment ) {
        $ret .= "<br /><div id='comment-interaction-links'>";

        my $reply_url = LJ::Talk::talkargs( $parentcomment->reply_url, LJ::viewing_style_args( %GET ) );
        $ret .= "(<a href='". $reply_url . "'>" . $ML{'talk.replytothis'} . "</a>)";

        # only link to thread from start / parent comment if this isn't a top-level comment
        if ( $parentcomment->parent ) {
            my $threadstart_url = $parentcomment->threadroot_url( LJ::viewing_style_args( %GET ) );
            $ret .= " (<a href='". $threadstart_url . "'>" . $ML{'talk.threadrootlink'} . "</a>)";

            my $parent_url = $parentcomment->parent_url( LJ::viewing_style_args( %GET ) );
            $ret .= " (<a href='". $parent_url . "'>" . $ML{'talk.parentlink'} . "</a>)";
        }

        my $thread_url = $parentcomment->url( LJ::viewing_style_args( %GET ) );
        $ret .= " (<a href='". $thread_url . "'>" . $ML{'talk.threadlink'} . "</a>)";

        $ret .= "</div>";
    }

    $ret .= "<br clear='both' /><hr size='2' align='center' />";

    my $jarg = "journal=$u->{'user'}&amp;";
    my $readurl = LJ::Talk::talkargs($talkurl, LJ::viewing_style_args( %GET ) );

    my $replycount = $entry->prop( "replycount" );
    my $readlink_text;

    # show total number of comments, including screened comments if the viewer is allowed to
    if ( $remote && LJ::Talk::can_screen( $remote, $u, $up ) &&  $entry->prop( "hasscreened" ) ) {
        my $screenedcount = LJ::Talk::get_screenedcount( $u, $itemid );
        $readlink_text = BML::ml( "talk.commentsread.counted.screened",
                                 { replycount => $replycount, screenedcount => $screenedcount } );
    } else {
        $readlink_text = BML::ml( "talk.commentsread.counted",
                                 { replycount => $replycount } );
        $readlink_text = BML::ml( "talk.commentsread.nocomments" )
            if $replycount == 0;
    }

    $ret .= "<p align='center' class='lesstop'><b>(<a href=\"$readurl#comments\">$readlink_text</a>)</b></p>";

    # can a comment even be made?
    if ( $entry->comments_disabled ) {
        $ret .= "<?h1 $ML{'Sorry'} h1?><?p $ML{'.error.nocommentspost'} p?>";
        return $ret;
    }
    if ($u->{'opt_showtalklinks'} eq "N") {
        $ret .= "<?h1 $ML{'Sorry'} h1?><?p $ML{'.error.nocommentsjournal'} p?>";
        return $ret;
    }
    unless ($u->can_get_comments ||
            ($remote && $remote->can_leave_comments)) {
        $ret .= "<?h1 $ML{'Sorry'} h1?><?p ";
        $ret .= $LJ::MSG_NO_COMMENT || $ML{'.sorry.cannotcomment'};
        $ret .= " p?>";
        return $ret;
    }

    my $h1title = $editid ? $ML{'.editresponse'} : $ML{'.postresponse'};
    $ret .= BML::fill_template("H1", { DATA => $h1title });

    $ret .= LJ::Talk::talkform({ 'remote'    => $remote,
                                 'journalu'  => $u,
                                 'parpost'   => $parpost,
                                 'replyto'   => $init->{replyto},
                                 'ditemid'   => $ditemid,
                                 'form'      => \%FORM,
                                 'do_captcha' => LJ::Talk::Post::require_captcha_test($remote, $u, $FORM{body}, $ditemid)});

    BML::noparse();
    return $ret;
}
_code?>

<=body
title=> <?_code return $title _code?>
head<=
<?_code return $head _code?>
<?_code return (! $LJ::REQ_HEAD_HAS{'chalresp_js'}++) ? $LJ::COMMON_CODE{'chalresp_js'} : ""; _code?>
<=head
windowtitle=> <?_code $title ? "" : "$title_user : $title_subject $ML{'.title'}" _code?>
page?>
