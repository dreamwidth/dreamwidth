<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=><?_ml .title2 _ml?>
body<=
<?_code
{
    use strict;
    use vars qw/ %GET %POST /;

    LJ::set_active_crumb('managecommunities');

    my $dbr = LJ::get_db_reader();

    my $ret;
    my $remote = LJ::get_remote();

    unless ($remote) {
       return "<?needlogin?>";
    }

    return "<?h1 $ML{'Error'} h1?><?p $ML{'.error.badaccounttype'} p?>"
       unless $remote->is_person;

    $ret .= "<?p $ML{'.commlist.text'} p?>";
    $ret .= "<div style='margin: 15px 0'>";

    my %show;

    # what communities does remote
    my $cids = LJ::load_rel_target($remote, 'A');
    my %admin;
    if ($cids) { foreach (@$cids) { $admin{$_} = $show{$_} = 1; } }

    # keep track of what communities remote moderates
    my $mods = LJ::load_rel_target($remote, 'M');
    my %mods;
    my %modcount;
    if ($mods) { foreach (@$mods) { $mods{$_} = $show{$_} = 1; } }

    my %names = ();
    my %pending = ();
    if (%show) {
       my $in = join(',', keys %show);
       my $us = LJ::load_userids(keys %show);

       my $sth = $dbr->prepare("SELECT userid, membership FROM community ".
                               "WHERE userid IN ($in)");
       $sth->execute;
       while (my ($uid, $membership) = $sth->fetchrow_array) {
           my $cu = $us->{$uid};
           next unless $cu && ( $cu->is_visible || $cu->is_readonly );
           $names{$uid} = [ $cu->{user}, $cu->{name}, -1 ];
           if ($mods{$uid}) {
               $modcount{$uid} = $names{$uid}[2] = $cu->get_mod_queue_count;
           }
           if ($membership eq 'moderated') {
               my $ids = $cu->get_pending_members || [];
               $pending{$uid} = scalar @$ids;
           }
       }
    }

    # deleted and expunged communities won't show up in this
    if (%names) {

       # Make up the first table row, linking to the other sort methods
       my @snames;
       $ret .= "<table cellpadding='0' cellspacing='0' style='width: 100%;'><thead><tr>";

       if (!defined $GET{'sortby'} || $GET{'sortby'} eq 'username') {
           $ret .= "<th>$ML{'.commlist.username'}</th>";
           @snames = sort { $names{$a}->[0] cmp $names{$b}->[0] } keys %names;
       } else {
           $ret .= "<th><a href='".BML::self_link({'sortby' => 'username'}) . "'>$ML{'.commlist.username'}</a></th>";
       }

       if ($GET{'sortby'} eq 'title') {
           $ret .= "<th>$ML{'.commlist.title'}</th>";
           @snames = sort { $names{$a}->[1] cmp $names{$b}->[1] } keys %names;
       } else {
           $ret .= "<th><a href='".BML::self_link({'sortby' => 'title'}) . "'>$ML{'.commlist.title'}</a></th>";
       }

       $ret .= "<th>$ML{'.commlist.actions'}</th>";

       if ($GET{'sortby'} eq 'mod') {
           $ret .= "<th>$ML{'.commlist.moderation'}</th>";
           @snames = sort { $names{$b}->[2] <=> $names{$a}->[2] } keys %names;
       } elsif (@$mods) {
           $ret .= "<th><a href='".BML::self_link({'sortby' => 'mod'}) . "'>$ML{'.commlist.moderation'}</a></th>";
       } else {
           $ret .= "<th>&nbsp;</th>";
       }

       $ret .= "</tr></thead>";

       my $rc = 0;
       foreach my $id (@snames) {
           my $user = $names{$id}->[0];
           my $name = $names{$id}->[1];
           my $rstyle = ($rc++ & 1) ? "even" : "odd";
           $ret .= "<tr class='$rstyle'><td><?ljcomm $user ljcomm?></td><td>" . LJ::eall($name) . "</td><td>";
           if ($admin{$id}) {
               $ret .= BML::ml('Actionlink', {
                   'link'=>"<a href='/update?usejournal=$user'>$ML{'.commlist.post'}</a>"}) . "&nbsp; ";
               $ret .= LJ::Hooks::run_hook('community_manage_actionlink', $user);
               $ret .= BML::ml('Actionlink', {
                   'link'=>"<a href='/manage/profile/?authas=$user'>$ML{'.commlist.actinfo2'}</a>"}) . "&nbsp; ";
               $ret .= BML::ml('Actionlink', {
                   'link'=>"<a href='$LJ::SITEROOT/customize/?authas=$user'>$ML{'.commlist.customize2'}</a>"}) . "&nbsp; ";
               $ret .= BML::ml('Actionlink', {
                   'link'=>"<a href='/community/settings?authas=$user'>$ML{'.commlist.actsettingspost'}</a>"}) . "<br />\n";
               $ret .= BML::ml('Actionlink', {
                   'link'=>"<a href='/community/sentinvites?authas=$user'>$ML{'.commlist.actinvites'}</a>"}) . "&nbsp; ";
               my $pend = $pending{$id} ? BML::ml('.commlist.actpending', { num => $pending{$id},
                                                  aopts => "href=\"/community/pending?authas=$user\"" }) : '';
               $ret .= BML::ml('Actionlink', {
                   'link'=>"<a href='/community/members?authas=$user'>$ML{'.commlist.actmembers2'}</a>$pend"}) . "&nbsp; ";

               $ret .= BML::ml('Actionlink', {
                   'link'=>"<a href='/manage/tags?authas=$user'>$ML{'.commlist.tags'}</a>"}) . "&nbsp; ";
               $ret .= BML::ml('Actionlink', {
                   'link'=>"<a href='/manage/tracking/user?journal=$user'>$ML{'.commlist.tracking'}</a>"}) . "&nbsp; ";
           }
           $ret .= "</td><td align='center'>";
           if ($mods{$id}) {
               my $num = $modcount{$id} || "0"; # relying on this to be <b>-wrapped

               # only show the items in queue if the community has moderated posting (number can be 0 then) or there are
               # posts in the queue (for example after a switch from moderated posting to non-moderated posting)
               my $comm = LJ::load_userid( $id );
               $ret .= BML::ml('.commlist.moderation.num2', {'aopts' => "href='$LJ::SITEROOT/community/moderate?authas=$user'", 'num' => $num})
                   if $comm->has_moderated_posting || $num;
           } else {
               $ret .= "&nbsp";
           }
           $ret .= "</td></tr>";
       }
       $ret .= "</table>";
       $ret .= "</div>";
    } else {
       $ret .= "$ML{'.commlist.none'}";
       $ret .= "</div><hr class='hr' />";
    }


    # save any changes
    if (LJ::did_post()) {
        unless ( LJ::check_form_auth() ) {
            $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>";
            return $ret;
        }

        $remote->set_prop( 'opt_nomodemail', $POST{modemail} ? undef : 1 );
    }

    my $mod_emails = $remote->prop("opt_nomodemail") ? 0 : 1;

    $ret .= "<div class='columns-2 pkg' style='margin-bottom: 15px;'>\n";
    $ret .= "<div class='columns-2-left'>\n";
    # form for setting email option
    $ret .= "<?h1 $ML{'.joinmail.title'} h1?>\n";
    $ret .= "<?p " . BML::ml('.joinmail.body2', { aopts=>"href='$LJ::SITEROOT/manage/settings/?cat=notifications'" }). " p?>\n";
    $ret .= "<form method='post' action='manage'>\n";
    $ret .= LJ::form_auth();
    # options for getting moderation emails
    $ret .= "<?p $ML{'.modemail.body'} p?>";
    $ret .= "<fieldset class='nostyle' style='margin: 0 0 15px 30px;'>";

    $ret .= LJ::html_check({ type => 'radio', name => 'modemail', id => 'modemail_yes',
                             value => '1', selected => $mod_emails });
    $ret .= "<label for='modemail_yes'>$ML{'.modemail.yes'}</label><br />";

    $ret .= LJ::html_check({ type => 'radio', name => 'modemail', id => 'modemail_no',
                             value => '0', selected => !$mod_emails });
    $ret .= "<label for='modemail_no'>$ML{'.modemail.no'}</label><br />";
    $ret .= "</fieldset> ";
    $ret .= "<div class='action-box'><div class='inner'>" . LJ::html_submit($ML{'.joinmail.save'}) . "</div></div><div class='clear-floats'></div>";
    $ret .= "</form>";
    $ret .= "</div><!-- end .columns-2-left -->";
    $ret .= "<div class='columns-2-right'>";

    $ret .= "<?h1 $ML{'.create.header'} h1?>";
    $ret .= "<?p " . BML::ml('.create.text2', {'aopts' => "href='$LJ::SITEROOT/community/create'"}) . " p?>";

    $ret .= "<?h1 $ML{'/manage/invites.bml.title'} h1?>";
    $ret .= "<?p <a href=\"/manage/invites\"><?_ml /manage/invites.bml.title _ml?></a> p?>";
    $ret .= "</div><!-- end .columns-2-right -->";
    $ret .= "</div><!-- end .columns-2 -->";
    return $ret;
}
_code?>

<=body
page?>

