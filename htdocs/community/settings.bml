<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title<=
<?_code
 if ($GET{'mode'} eq 'create') {
    return $ML{'.title.create2'};
 }
 else {
    return $ML{'.title.modify'};
 }
_code?>
<=title
head<=
<style type='text/css'>
    fieldset { display: block; width: 320px; border: 1px solid #ccc; margin: 0 15px 15px 0; padding: 8px; }
    fieldset div { min-height: 170px; }
    * html fieldset div { height: 190px; }
    *:first-child+html fieldset div { min-height: 190px; }
    #left-column, #right-column { float: left; }
    legend { font-size: 1.2em; font-weight: bold; }
    p.input-wrapper { margin-left: 27px; text-indent: -27px; }
    p.nested-input-wrapper { margin-left: 54px; text-indent: -27px; }
    .action-box { clear: both; }
</style>
<=head
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST);

    my $ret;
    my %errors;


    my $remote = LJ::get_remote();

    unless ($remote) {
        $ret .= "<?needlogin?>";
        return $ret;
    }

    unless ( $remote->is_person ) {
        $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'.error.maintainertype'} p?>";
        return $ret;
    }

    my $mode = "modify";
    $mode = "create" if $GET{'mode'} eq 'create';

    # if we're changing rather than creating, show the work as menu
    if ( $mode eq 'modify') {
        $ret .= "<form action='$LJ::SITEROOT/community/settings' method='get'>";
        $ret .= LJ::make_authas_select($remote, { authas => $GET{authas}, type => "C" });
        $ret .= "</form>";
    }

    if (LJ::did_post())
    {
        return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>"
            unless LJ::check_form_auth();

        my $sth;
        my $cuser = LJ::canonical_username($POST{'cuser'});
        my $cu = LJ::load_user($cuser);


        $errors{username} = $ML{'.error.notfound'} unless $cu;

        $errors{username} = $ML{'.error.samenames'}
            if $cu && $cu->equals( $remote );

        # if we're changing rather than creating, check that we can
        if ( $mode eq 'modify' && ! $remote->can_manage_other( $cu ) ) {
            $errors{'username'} = BML::ml( '.error.noaccess', { comm => $cuser } );
        }

        # if we're creating, community password must match
        if ($mode eq 'create' && $cu && !LJ::auth_okay($cu, $POST{'cpassword'})) {
            $errors{'password'} = $ML{'.error.badpassword'};
        }

        # disallow changing the journal type if the journal has entries
        if ( $mode eq 'create' && !%errors && ( !$remote || !$remote->has_priv( "changejournaltype", "" ) ) ) {
            my $count;
            my $userid=$cu->{'userid'}+0;

            my $dbcr = LJ::get_cluster_reader($cu);
            $count = $dbcr->selectrow_array("SELECT COUNT(*) FROM log2 WHERE journalid=$userid AND posterid=journalid");

            $errors{'username'} = $ML{'.error.hasentries'} if $count;
        }

        # if it's already a community, don't let them turn it into a community
        if ( $mode eq 'create' && !%errors && $cu->is_community ) {
            $errors{'username'} = $ML{'.error.alreadycomm'};
        }

        # check the posting guidelines entry is valid,
        # but only check if entry is selected.
        my $postingguidelines_loc = $cu->posting_guidelines_location( $POST{'postingguidelines'} );
        if ( $postingguidelines_loc eq "E" ) {
            $errors{'postingguidelinesentry'} = $ML{'.error.postingguidelinesentryinvalid'}
                unless $cu->posting_guidelines_entry( $POST{'postingguidelinesentry'} );
        }

        # if we found errors, we'll redisplay the form below.  otherwise,
        # proceed.
        unless (%errors) {
            my $dbh = LJ::get_db_writer();

            my $qmembership = $POST{membership};
            $qmembership = "closed" unless $qmembership =~ /^(?:open|moderated|closed)$/;
            my $qpostlevel = $POST{postlevel};
            $qpostlevel = "select" unless $qpostlevel =~ /^(?:anybody|members|select)$/;

            # postlevel and nonmember_posting are a single setting in the UI, but separate options in the backend
            # split them out so we can save them properly
            my $nonmember_posting = 0;
            if ($qpostlevel eq "anybody") {
                $qpostlevel = "members";
                $nonmember_posting = 1;
            }

            $cu->update_self( { journaltype => 'C', password => '' } );
            if ($mode eq 'create') {
                LJ::set_rel($cu, $remote, 'A');

                # delete existing watchlist & trustlist
                foreach ( $cu->watched_users ) {
                    $cu->remove_edge( $_, watch => {} );
                }
                foreach ( $cu->trusted_users ) {
                    $cu->remove_edge( $_, trust => {} );
                }

                # log this to statushistory
                my $msg = "account '" . $cu->user . "' converted to community";
                $msg .= " (maintainer is '" . $remote->user . "')";
                LJ::statushistory_add($cu, $remote, "change_journal_type", $msg);
            }

            $cu->set_comm_settings( $remote, { membership => $qmembership,
                                    postlevel => $qpostlevel } );

            # lazy-cleanup: if a community has subscriptions (most likely
            # due to a personal->comm conversion), nuke those subs.
            # (since they can't manage them anyway!)
            $cu->delete_all_subscriptions;

            # ... and migrate their interests to the right table
            $cu->lazy_interests_cleanup;
            LJ::Hooks::run_hook("change_journal_type", $cu);

            my $moderated = $POST{moderated} ? 1 : 0;
            my $hidejoinpostlink = $POST{showjoinpostlink} ? 0 : 1;

            $cu->set_prop( { nonmember_posting => $nonmember_posting,
                             moderated => $moderated } );
            $cu->hide_join_post_link( $hidejoinpostlink );
            if ( $postingguidelines_loc eq "E" ) {
                $cu->posting_guidelines_entry( $POST{'postingguidelinesentry'} );
            }

            if ( LJ::is_enabled( 'adult_content' ) ) {
                my $adult_content = $POST{'adult_content'};
                $adult_content = "none"
                    unless $adult_content eq "explicit" || $adult_content eq "concepts";
                $cu->set_prop('adult_content', $adult_content);
            }

            if ($moderated && ! LJ::load_rel_user($cu->{'userid'}, 'M')->[0]) {
                LJ::set_rel($cu->{'userid'}, $remote->{'userid'}, 'M');
              }

            # since journaltype changed
            $cu->invalidate_directory_record;

            $ret .= $cu->maintainer_linkbar( "settingspost" );
            $ret .= "<?h1 $ML{'.success'} h1?>";
            if ($mode eq 'create') {
                $ret .= "<?p $ML{'.label.commcreated'} p?>";
            } else {
                $ret .= "<?p $ML{'.label.commchanged'} p?>";
            }

            $ret .= "<?p $ML{'.label.rellinks'} <ul><li><a href='" . $cu->journal_base . "'>$ML{'.label.commsite'}</a></li>";
            $ret .= "<li><a href='" . $cu->profile_url() . "'>$ML{'.label.comminfo'}</a></li>"
                . "<li>" . BML::ml('.label.managepage', { aopts => 'href="/community/manage"' }) . "</li>";

            my $posting_guidelines_url = $cu->posting_guidelines_url;
            $ret .= "<li>" . BML::ml('.label.guidelines', { aopts => "href='$posting_guidelines_url'"} ) . "</li>"
                if $posting_guidelines_url;
            $ret .= "</ul> p?>";

            return $ret;
        }
    }

    # we're either creating a new community or modifying settings of an existing one
    # based on whether $mode is 'create' or 'modify'. Most of the page is the same in
    # either case, and additionally we must preload existing settings when modifying.

    my ($cname, $c);

    $cname = $POST{'cuser'}; # if we're falling through with errors when creating

    my %info = (
                'membership'=>$POST{'membership'} || 'open',
                'postlevel'=>$POST{'postlevel'} || 'members',
                'nonmember_posting'=>$POST{'nonmember_posting'} || 0,
                'moderated'=>$POST{'moderated'} || 0,
                'hide_join_post_link'=>$POST{'showjoinpostlink'} ? 0 : 1,
                'posting_guidelines_entry'=>$POST{'postingguidelinesentry'} || '',
                'posting_guidelines_location'=>$POST{'postingguidelines'} || $LJ::DEFAULT_POSTING_GUIDELINES_LOC,
                );

    if ($mode eq 'modify') {
        if ($GET{comm}) {
            # old GET arg
            return BML::redirect("$LJ::SITEROOT/community/settings?authas=$GET{comm}");
        }
        my $authas_name = $POST{'cuser'} ? $POST{'cuser'} : $GET{'authas'};
        $cname = LJ::canonical_username($authas_name);
        $c = LJ::load_user($cname);
        unless ($c) {
            # if no community was specified, redirect to manage
            return BML::redirect("$LJ::SITEROOT/community/manage");
        }

        unless ( $c->is_community ) {
            $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'.error.notcomm'} p?>";
            return $ret;
        }

        # get props unless we're reloading the form because of an error
        unless ( LJ::did_post() ) {
            my $dbr = LJ::get_db_reader();
            ($info{'membership'},$info{'postlevel'}) =
                $dbr->selectrow_array("SELECT membership, postlevel FROM community WHERE userid=$c->{'userid'}");
            $c->preload_props( qw/ nonmember_posting moderated hide_join_post_link posting_guidelines_entry / );
            $info{'nonmember_posting'} = $c->{'nonmember_posting'} ? 1 : 0;
            $info{'moderated'} = $c->{'moderated'} ? 1 : 0;
            $info{'hide_join_post_link'} = $c->{'hide_join_post_link'} ? 1 : 0;
            $info{'posting_guidelines_location'} = $c->posting_guidelines_location;
            my $e = $c->get_posting_guidelines_entry;
            $info{'posting_guidelines_entry'} = $e->url
                if $e;
        }
    }

    $ret .= "<form method='post' action='settings?mode=$mode'>";
    $ret .= LJ::form_auth();

    if ($mode eq 'create') {
        LJ::set_active_crumb('createcommunity');
          $ret .= "<?p " . BML::ml('.label.commcreate3', {'aopts' => "href='$LJ::SITEROOT/create'"}) . " p?>";
          $ret .= "<div class='highlight-box'><table summary='' cellpadding='7'><tr valign='top'><td><b>$ML{'.label.maintainer2'}</b></td>";
          $ret .= "<td><?ljuser $remote->{'user'} ljuser?><br />" . BML::ml('.label.maintainer.login3', {'aopts' => "href='$LJ::SITEROOT/login?ret=1'"}) . "</td></tr>";
          $ret .= "<tr valign='top'><td><b>$ML{'.label.community2'}</b></td>";
          $ret .= "<td>$ML{'.label.username'}<br /><input name='cuser' maxlength='25' value='$cname' /><br />";
          $ret .= "<?inerr $errors{'username'} inerr?><br />";
          $ret .= "$ML{'.label.password2'}<br /><input name='cpassword' type='password' /><br />";
          $ret .= "<?inerr $errors{'password'} inerr?></td></tr></table> </div>";
    } else {
        LJ::set_active_crumb('commsettings');
          $ret .= LJ::html_hidden('cuser', $cname);
          $ret .= $c->maintainer_linkbar( "settingspost" );
    }

    $ret .= "<div id='left-column' class='community-settings'>";

    # membership levels
    $ret .= "<fieldset id='membership'>";
    $ret .= "<legend>$ML{'.label.membership'}</legend><div><?p $ML{'.label.whocanjoin'} p?>";
    $ret .= "<p class='input-wrapper'>";
    $ret .= LJ::html_check({ type => 'radio', name => 'membership', id => 'memopen',
                             value => 'open', selected => ($info{membership} eq 'open' ? 1 : 0)});
    $ret .= "<label for='memopen'> $ML{'.label.openmemb'}</label></p><p class='input-wrapper'>";
    $ret .= LJ::html_check({ type => 'radio', name => 'membership', id => 'memmoderated',
                             value => 'moderated', selected => ($info{membership} eq 'moderated' ? 1 : 0)});
    $ret .= " <label for='memmoderated'>$ML{'.label.moderatedmemb'}</label></p><p class='input-wrapper'>";
    $ret .= LJ::html_check({ type => 'radio', name => 'membership', id => 'memclosed',
                             value => 'closed', selected => ($info{membership} eq 'closed' ? 1 : 0)});
    $ret .= "<label for='memclosed'> $ML{'.label.closedmemb2'}</label></p>";
    $ret .= "</div></fieldset>";

    # adult content
    if ( LJ::is_enabled( 'adult_content' ) ) {
        my $adult_content = $c ? $c->adult_content : "none";

        $ret .= "<fieldset id='adult-content'>";
        $ret .= "<legend>$ML{'.label.adultcontentheader2'}</legend><div><?p $ML{'.label.adultcontenttext2'} " . LJ::help_icon('adult_content') . " p?>";

        $ret .= "<p class='input-wrapper'>";
        $ret .= LJ::html_check({
            type => 'radio', id => 'adultnone', name => 'adult_content',
            value => 'none', selected => $adult_content eq "none" ? 1 : 0,
        });
        $ret .= " <label for='adultnone'>$ML{'.label.adultcontentnone2'}</label></p>";

        $ret .= "<p class='input-wrapper'>";
        $ret .= LJ::html_check({
            type => 'radio', id => 'adultconcepts', name => 'adult_content',
            value => 'concepts', selected => $adult_content eq "concepts" ? 1 : 0,
        });
        $ret .= " <label for='adultconcepts'>$ML{'.label.adultcontentconcepts2'}</label></p>";

        $ret .= "<p class='input-wrapper'>";
        $ret .= LJ::html_check({
            type => 'radio', id => 'adultexplicit', name => 'adult_content',
            value => 'explicit', selected => $adult_content eq "explicit" ? 1 : 0,
        });
        $ret .= " <label for='adultexplicit'>" . BML::ml('.label.adultcontentexplicit2', { age => 18 }) . "</label></p>";

        $ret .= "</div></fieldset>";
    }

    $ret .= "</div><div id='right-column' class='community-settings'>";

    my $posting_access = "members";
    if ($info{postlevel} eq "select") {
        $posting_access = "select";
    } elsif ($info{nonmember_posting}) {
        $posting_access = "anybody";
    }

    $ret .= "<fieldset id='member-restrictions'>";
    $ret .= "<legend>$ML{'.label.postingaccess'}</legend><div><?p $ML{'.label.whocanpost2'} p?>";

    $ret .= "<p class='input-wrapper'>";
    $ret .= LJ::html_check({
        type => 'radio', id => 'postanybody', name => 'postlevel',
        value => 'anybody', selected => $posting_access eq "anybody" ? 1 : 0,
    });
    $ret .= " <label for='postanybody'>$ML{'.label.postingaccessanybody'}</label></p>";

    $ret .= "<p class='input-wrapper'>";
    $ret .= LJ::html_check({
        type => 'radio', id => 'postmembers', name => 'postlevel',
        value => 'members', selected => $posting_access eq "members" ? 1 : 0,
    });
    $ret .= " <label for='postmembers'>$ML{'.label.postingaccessmembers'}</label></p>";

    $ret .= "<p class='input-wrapper'>";
    $ret .= LJ::html_check({
        type => 'radio', id => 'postselect', name => 'postlevel',
        value => 'select', selected => $posting_access eq "select" ? 1 : 0,
    });
    $ret .= " <label for='postselect'>$ML{'.label.postingaccessselect'}</label></p>";

    $ret .= "<?p $ML{'.label.moderation'} p?>";
    $ret .= "<p class='input-wrapper'>";
    $ret .= LJ::html_check({ id => 'moderate', name => 'moderated', selected => $info{moderated} ? 1 : 0 });
    $ret .= " <label for='moderate'>$ML{'.label.moderationyes'}</label></p>";

    $ret .= "</div></fieldset>";

    $ret .= "<fieldset id='success-page-display'>";
    $ret .= "<legend>$ML{'.label.successpagedisplay'}</legend><?p $ML{'.label.showwhatlinks'} p?>";

    $ret .= "<p class='input-wrapper'>";
    $ret .= LJ::html_check( {
                id => 'showjoinpostlink', name => 'showjoinpostlink',
                selected => $info{'hide_join_post_link'} ? 0 : 1
            } );
    $ret .= " <label for='showjoinpostlink'>$ML{'.label.showjoinpostlink'}</label></p>";

    my $postingguidelines = $info{'posting_guidelines_location'};
    $ret .= "<?p $ML{'.label.showwhatguidelines'} p?>";
    $ret .= "<p class='input-wrapper'>";
    $ret .= LJ::html_check({
        type => 'radio', id => 'nopostingguidelines', name => 'postingguidelines',
        value => 'N', selected => $postingguidelines eq "N" ? 1 : 0,
    });
    $ret .= " <label for='nopostingguidelines'>$ML{'.label.nopostingguidelines'}</label></p>";

    $ret .= "<p class='input-wrapper'>";
    $ret .= LJ::html_check({
        type => 'radio', id => 'profilepostingguidelines', name => 'postingguidelines',
        value => 'P', selected => $postingguidelines eq "P" ? 1 : 0,
    });
    $ret .= " <label for='postmembers'>$ML{'.label.profilepostingguidelines'}</label></p>";

    $ret .= "<p class='input-wrapper'>";
    $ret .= LJ::html_check({
        type => 'radio', id => 'entrypostingguidelines', name => 'postingguidelines',
        value => 'E', selected => $postingguidelines eq "E" ? 1 : 0,
    });

    $ret .= " <label for='postselect'>$ML{'.label.entrypostingguidelines'}</label></p>";

    $ret .= "<p class='nested-input-wrapper'>";
    $ret .= " <label for='postingguidelinesentry'>$ML{'.label.postingguidelinesentry'}</label> ";
    $ret .= LJ::html_text( {
                id => 'postingguidelinesentry', name => 'postingguidelinesentry', value => $info{'posting_guidelines_entry'}
            });
    $ret .= "<br /><?inerr $errors{'postingguidelinesentry'} inerr?></p>";

    $ret .= "</fieldset>";

    $ret .= "</div>";

    $ret .= "<div class='action-box'><div class='inner'><input type='submit' value='" .
        ($mode eq 'create' ? "$ML{'.button.createcommunity'}" : "$ML{'.button.changecommunity2'}") .
        "' /></div></div><div class='clear-floats'></div></form>";

    return $ret;
}
_code?>

<=body
page?>
