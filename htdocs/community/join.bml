<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=><?_ml .title _ml?>
body<=
<?_code
{
    use strict;

    LJ::set_active_crumb('joincomm');

    my $ret;

    my $remote = LJ::get_remote();
    return "<?needlogin?>"
        unless $remote;

    # bad statusvis?
    return "<?h1 $ML{'.error.statusvis.title'} h1?><?p $ML{'.error.statusvis.body'} p?>"
        unless $remote->is_visible;

    # make sure a community doesn't join a community
    return "<?h1 $ML{'Error'} h1?><?p $ML{'.label.commlogged'} p?>"
        unless $remote->is_individual;

    # get info about the community

    my $cu = LJ::load_user($GET{comm});

    # does this community even exist?
    return "<?h1 $ML{'Error'} h1?><?p $ML{'.label.errorcomminfo'} p?>"
        unless $cu;

    # can only join communities, not other journal types
    return "<?h1 $ML{'Error'} h1?><?p $ML{'.label.notcomm'} p?>"
        unless $cu->is_community;

    # makes sure this community accepts new members
    return "<?h1 $ML{'Error'} h1?><?p $ML{'.label.locked'} p?>"
        if $cu->is_locked;

    # ensure this user isn't banned
    return "<?h1 $ML{'Sorry'} h1?><?p $ML{'.label.banned'} p?>"
        if $cu->has_banned( $remote );

    # and make sure they're not already a member
    return "<?h1 $ML{'Error'} h1?><?p $ML{'.error.already.member'} p?>"
        if $remote->member_of( $cu );

    # make sure underage users can't join adult communities
    my $adult_content;
    unless ($remote->can_join_adult_comm( comm => $cu, adultref => \$adult_content )) {
        my $adult_err;
        if ( $adult_content eq "explicit" ) {
            $adult_err = BML::ml('.error.isminor2', {'comm' => $cu->ljuser_display});
        }

        unless ($remote->best_guess_age) {
            $adult_err .= " " . BML::ml('.error.setage', {'aopts' => "href='$LJ::SITEROOT/manage/profile/'"});
        }

        return "<?h1 $ML{'Error'} h1?><?p $adult_err p?>";
    }

    my $ci = $cu->get_community_row;
    my $cuserid = $ci->{'userid'};

    LJ::text_out(\$ci->{'name'});
    my $ecname = LJ::ehtml($ci->{'name'});

    # get the list of maintainers and their usernames
    my $dbr = LJ::get_db_reader();
    my $admins = $dbr->selectcol_arrayref("SELECT u.user FROM useridmap u, reluser r ".
                                          "WHERE r.userid=$cuserid AND r.targetid=u.userid AND r.type='A'") || [];
    my $list = "<ul>";
    foreach (sort @$admins) { $list .= "<li><?ljuser $_ ljuser?></li>"};
    $list .= "</ul>";

    my $next_links = "<?p $ML{'.label.you_can'} p?><ul>";
    $next_links .= "<li><a href=\'" . $cu->journal_base . "'>". BML::ml('.label.read_recent_entries', {'user' => $cu->user}) . "</a></li>";
    $next_links .= "<li><a href=\'" . $cu->profile_url . "'>" . BML::ml('.label.read_comm_info', {'user' => $cu->user}) . "</a></li>";
    $next_links .= "<li><a href='$LJ::SITEROOT/community/search'>".BML::ml('.label.search_other') . "</a></li>";
    $next_links .= LJ::Hooks::run_hook("join_comm_extra")
        if LJ::Hooks::are_hooks("join_comm_extra");
    $next_links .= "</ul>";

    # can't join closed communities
    if ($ci->{membership} eq 'closed') {
        $ret .= "<?h1 $ML{'Sorry'} h1?><?p " . BML::ml('.error.closed', { admins => $list }) . " p?>";
        $ret .= $next_links;
        return $ret;
    }

    # now do the join
    if (LJ::did_post()) {
        return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>"
            unless LJ::check_form_auth();

        # can members join this community openly?
        if ($ci->{membership} ne 'open') {
            # hit up the maintainers to let them know a join was requested
            $cu->comm_join_request( $remote );
            $ret = "<?h1 $ML{'.reqsubmitted.title'} h1?><?p $ML{'.reqsubmitted.body'} p?> ";
            $ret .= $next_links;
            return $ret;
          }

        # join community
        my $joined = $remote->join_community( $cu );
        unless ($joined) {
            return "<?h1 $ML{'error'} h1?>"
                   . "<?p " . LJ::last_error() . " p?>";
        }

        # add community as a friend if selected
        if ($POST{addfriend}) {
            BML::redirect("$LJ::SITEROOT/manage/circle/add?user=$cu->{user}&action=subscribe");
        }

        # success message -- only shows if user didn't add the community as a friend
        my $profile_url = $cu->profile_url;
        my $show_join_post_link = $cu->hide_join_post_link ? 0 : 1;
        my $post_url;
        $post_url = $LJ::SITEROOT . "/update?usejournal=" . $cu->user
            if $show_join_post_link && $remote->can_post_to( $cu );
        my $posting_guidelines_entry_url;
        if ( $cu->posting_guidelines_location eq "E" ) {
           $posting_guidelines_entry_url = $cu->posting_guidelines_url;
        }
        if ( $cu->posting_guidelines_location eq "P" ) {
           $posting_guidelines_entry_url = $cu->profile_url;
        }

        $ret .= "<?h1 $ML{'.success'} h1?><?p " . BML::ml('.label.membernow6',
                                                          { 'commname' => LJ::ljuser($cu) }) . " p?>";

        if ( $post_url || $posting_guidelines_entry_url ) {
            $ret .= "<ul>";
            $ret .= "<li><a href='$post_url'>$ML{'.success.posttocommunity'}</a></li>"
                if $post_url;
            $ret .= "<li><a href='$posting_guidelines_entry_url'>$ML{'.success.readcommunitypostingguidelines'}</a></li>"
                if $posting_guidelines_entry_url;
            $ret .= "</ul>";
        }

    } else {
        my $commuser = $cu->{user};
        my $cancel_text = $ML{'.btn.cancel'};

        my $cancel_btn = "<script type='text/javascript' language='Javascript'> \n <!-- \n
          document.write(\"<li><input type='button' value='$cancel_text' onclick='history.go(-1); return false;'></li>\");
               \n // -->\n </script>";

        if ($ci->{membership} ne 'open') {
            $ret .= "<?h1 $ML{'.request.title'} h1?><?p ";
            $ret .= BML::ml('.request.body', { comm => LJ::ljuser($cu) }) . "<br /> p?>";
            $ret .= "<form method='post' action='join?comm=$commuser'>";
            $ret .= LJ::form_auth();
            $ret .= "<div class='action-box'><ul class='inner nostyle'>"
                . "<li><input type='submit' value=\"$ML{'.button.join2'}\" /></li>";
            $ret .= "$cancel_btn</ul></div><div class='clear-floats'></div></form>";
            return $ret;
        }

        $ret .= "<?h1 " . BML::ml('.label.sure2', {'comm' => LJ::ljuser($cu)}) . " h1?>";
        $ret .= "<?p " . BML::ml('.label.expls2', {'commname' => $ecname}) . " p?>";
        $ret .= $ci->{postlevel} eq "members" ?
             "<?p " . BML::ml('.label.allowposting2', {'sitename' => $LJ::SITENAMESHORT}) . " p?>" :
             "<?p " . BML::ml('.label.auth2', {'admins' => $list}) . " p?>";

        $ret .= "<form method='post' action='join?comm=$commuser'>";
        $ret .= LJ::form_auth();
        $ret .= "<table summary='' cellpadding='0' cellspacing='1' border='0'><tr>";
        $ret .= "<td><input type='checkbox' name='addfriend' checked='checked'></td><td>";
        $ret .= $remote->watches( $cu ) ?
                BML::ml( '.label.addtofriends2.modify', { comm => $cu->ljuser_display } ) :
                BML::ml( '.label.addtofriends3', { comm => $cu->ljuser_display } );
        $ret .= "</td></tr><tr>";
        $ret .= "<td>&nbsp;</td><td><span style='font-size: smaller;'>$ML{'.label.addtofriends.note2'}</span></td>";
        $ret .= "</tr></table>";
        $ret .= "<div class='action-box'><ul class='inner nostyle'>"
            . "<li><input type='submit' value=\"$ML{'.button.join2'}\" /></li>";
        $ret .= "$cancel_btn</ul></div><div class='clear-floats'></div></form>";
    }

    return $ret;
}
_code?>

<=body
page?>
