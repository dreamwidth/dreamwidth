<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=><?_ml .title _ml?>
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST);

    LJ::set_active_crumb('commmembers');

    my $ret;

    # get remote
    my $remote = LJ::get_remote();
    unless ($remote) {
        $ret .= "<?needlogin?>";
        return $ret;
    }

    # old GET arg
    if ($GET{comm}) {
        return BML::redirect("$LJ::SITEROOT/community/members?authas=$GET{comm}");
    }

    my $cname = $GET{authas};
    return BML::redirect("$LJ::SITEROOT/community/manage") unless $cname;

    $ret .= "<form action='members' method='GET'>\n";
    $ret .= LJ::make_authas_select($remote, { authas => $GET{authas}, type => 'C' });
    $ret .= "</form>\n\n";

    # get $c object
    my $c = LJ::load_user($cname);
    unless ($c) {
        $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'.error.nocomm'} p?>";
        return $ret;
    }

    # make sure it is a comm
    unless ( $c->is_comm ) {
        $ret .= "<?h1 $ML{'Error'} h1?><?p ";
        $ret .= BML::ml( '.error.notcomm', { user => LJ::ljuser($c) } );
        $ret .= " p?>";
        return $ret;
    }

    my $cid = $c->userid;
    # is $remote an admin?
    unless ( $remote->can_manage_other( $c ) ) {
        $ret .= "<?h1 $ML{'Error'} h1?><?p ";
        $ret .= BML::ml( '.error.noaccess',
                        { comm => LJ::ljuser( $cname, { type => 'C' } ) } );
        $ret .= " p?>";
        return $ret;
    }

    $ret .= $c->maintainer_linkbar( "members" );

    my @allattribs = ('member', 'post', 'preapprove', 'moderate', 'admin');
    my %attrshort = ( X => 'member', P => 'post', N => 'preapprove', M => 'moderate', A => 'admin');
    my %attrshort_r = ( map { $attrshort{$_} => $_ } keys %attrshort ); # reversed

    # saving a form submission
    if ($POST{'action:update'}) {
        # validate form auth
        return "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>"
            unless LJ::check_form_auth();

        my @userids = split(',', $POST{'ids'});
        my @saveattribs = split(',', $POST{'attribs'});

        # now we need to create our 'was' list
        my %was; # ( userid => { attrib => 1; } )
        my %users; # ( userid => username )
        foreach my $row (split ';', $POST{was}) { # UID:UNAME:MNPX;UID:UNAME:MX;UID:UNAME:AM
            # if this row matches...
            if ($row =~ /^(\d+):(\w+):(\w+)$/) {
                my ($uid, $name, $attrs) = ($1, $2, $3);
                $uid += 0;
                next unless $uid && $name && $attrs;

                # split attrs and setup
                $was{$uid}->{$attrshort{$_}} = 1 foreach split '', $attrs;
                $users{$uid} = $name;
            }
        }

        # invite new users
        my @to_add;
        my @add_errors;
        foreach my $num (1..5) {
            my $given_user = LJ::ehtml(LJ::trim($POST{"add_$num"}));

            next unless $given_user;

            my $target = LJ::load_user_or_identity( $given_user );
            unless ($target) {
                push @add_errors, BML::ml( '.error.nouser',
                                           { user => $given_user } );
                next;
            }

            my $target_disp = LJ::ljuser($target);

            unless ( $target->is_visible ) {
                push @add_errors, BML::ml( '.error.notactive',
                                           { user => $target_disp } );
                next;
            }

            my @attr = grep { defined $POST{"add_${num}_$_"} } @saveattribs;
            unless (@attr) {
                push @add_errors, BML::ml( '.error.noattr',
                                           { user => $target_disp,
                                             type => $target->{'journaltype'} } );
                next;
            }

            unless ( $target->is_individual ) {
                push @add_errors, BML::ml( '.error.invaliduser2',
                                           { user => $target_disp,
                                             type => $target->journaltype_readable } );
                next;
            }

            if (grep { $target->{'userid'} == $_ } @userids) {
                push @add_errors, BML::ml( '.error.alreadyadded',
                                           { user => $target_disp,
                                             type => $target->{'journaltype'} } );
                next;
            }

            my $adult_content;
            unless ($target->can_join_adult_comm( comm => $c, adultref => \$adult_content )) {
                if ( $adult_content eq "explicit" ) {
                    push @add_errors, BML::ml( '.error.isminor',
                                               { user => $target_disp } );

                    next;
                }
            }

            # insert authactions row
            push @to_add, [ $target, \@attr ];
        }
        return LJ::bad_input(@add_errors) if @add_errors;

        # now do the additions if any were needed
        my @fail;
        my @invited;
        if (@to_add) {
            foreach my $row (@to_add) {
                # good, let's extend an invite to this person
                my ($target, $attrs) = @$row;
                if ( $target->send_comm_invite( $c, $remote, $attrs ) ) {
                    push @invited, $row;
                } else {
                    push @fail, [ $target, LJ::last_error_code() ];
                }
            }
        }
        if (@fail) {
            my @bad;
            foreach (@fail) {
                if ($_->[1] eq 'comm_user_has_banned') {
                    push @bad, BML::ml( '.error.adding', { user => LJ::ljuser( $_->[0] ) } );
                } elsif ($_->[1] eq 'comm_invite_limit') {
                    push @bad, BML::ml( '.error.limit', { user => LJ::ljuser( $_->[0] ) } );
                } else {
                    push @bad, BML::ml( '.error.unknown', { user => LJ::ljuser( $_->[0] ) } );
                }
            }
            return LJ::bad_input(@bad);
        }

        # initialize lists of users to update and delete
        # keyed on attribute type
        my %add = ();
        my %delete = ();
        foreach (@allattribs) {
            $add{$_} = {};
            $delete{$_} = {};
        }

        # need a db handle now
        my $dbh = LJ::get_db_writer();

        # if we have $other_maints, then there are maintainers not in our
        # current view, so they will not be modified, so the user can delete
        # all maintainers from the current view
        my $in = join(',', map { $dbh->quote($_) } @userids);
        my $other_maints = $dbh->selectrow_array("SELECT COUNT(*) FROM reluser " .
                                                 "WHERE userid=? AND type='A' " .
                                                 "AND targetid NOT IN ($in)",
                                                 undef, $cid);

        # users already in community
        my $maints = 0;
        my $us = LJ::load_userids(@userids);
        my (%addr, %delr); # store additions and removals sorted by userid
        foreach my $id (@userids) {
            $id = $id + 0;
            my $str;
            foreach (@allattribs) {
                if ($POST{"edit_${id}_$_"}) {
                    unless ($was{$id}->{$_}) {
                        $add{$_}->{$id} = 1;
                        $addr{$id}->{$_} = 1;
                    }
                } else {
                    if ($was{$id}->{$_}) {
                        $delete{$_}->{$id} = 1;
                        $delr{$id}->{$_} = 1;
                    }
                }
            }
            $maints++ if $POST{"edit_${id}_admin"} && !$us->{$id}->is_expunged;
        }

        # can't remove ALL maintainers, give them an error so they can
        # go back and decide who to keep
        if (! $other_maints && $maints < 1) {
            $ret .= "<?h1 $ML{'Error'} h1?><?p ";
            $ret .= BML::ml( '.error.nomaint2',
                {
                    comm  => LJ::ljuser( $cname, { 'type' => 'C' } ),
                    aopts => "href='" . BML::get_uri() . "?authas=$cname'",
                } );
            $ret .= " p?>";
            return $ret;
        }

        # delete members
        foreach my $uid ( keys %{ $delete{member} || {} } ) {
            my $temp_u = LJ::load_userid( $uid )
                or next;
            $temp_u->remove_edge( $cid, member => {} );
        }

        # create a closure to send a notification email to a user if they are
        # added or removed from being a maintainer
        my $sendmail = sub {
            my ($targetu, $html, $plain, $subject) = @_;
            return if ! $targetu || $targetu->is_expunged;

            my $fromname = $remote->{user};

            #todo: check if user wants to receive emails?
            if ($targetu->email_raw) {
                  # send an email to this user:
                  # send an email with both plain and html content
                  my $msg =  new MIME::Lite (
                                             'From'    => "\"$LJ::SITENAME\" <$LJ::BOGUS_EMAIL>",
                                             'To'      => $targetu->email_raw,
                                             'Subject' => $subject,
                                             'Type'    => 'multipart/alternative',
                                             );

                  my $encoding = $targetu->{'mailencoding'} ?
                      $LJ::CACHE_ENCODINGS{$targetu->{'mailencoding'}} :
                      "UTF-8";

                  # add the plaintext version
                  my $plainpart = $msg->attach(
                                               'Type'     => 'TEXT',
                                               'Data'     => $plain,
                                               'Encoding' => 'quoted-printable',
                                               );

                  $plainpart->attr("content-type.charset" => $encoding)
                      if $LJ::UNICODE;

                  # add the html version
                  my $htmlpart = $msg->attach(
                                              'Type'     => 'text/html',
                                              'Data'     => $html,
                                              'Encoding' => 'quoted-printable'
                                              );

                  $htmlpart->attr("content-type.charset" => $encoding)
                      if $LJ::UNICODE;

                  LJ::send_mail($msg);
            }
        };

        my $maintainer_notify = sub {
            my ( $maint_u, $log_event, $ml_str ) = @_;
            $c->log_event( $log_event, { actiontarget => $maint_u->id, remote => $remote } );

            # send email to the maintainer
            my $mailusername = $maint_u->user;
            my $mailusercname = $c->name_raw;
            my $mailclink = $c->journal_base( ['community'] );
            my $mailcommanlink = "$LJ::SITEROOT/community/manage";

            my $html;

            $html .= "<p>";
            $html .= BML::ml( '.email.hello', { site => $LJ::SITENAMESHORT, user => $mailusername } );
            $html .= "</p>\n<p>";
            if ( $ml_str eq 'del' ) {
                $html .= BML::ml( ".email.$ml_str.body2", { admin => $remote->user, comm => qq(<a href="$mailclink">$mailusercname</a>) } );
            } else {  # add
                $html .= BML::ml( ".email.$ml_str.body2", { comm => qq(<a href="$mailclink">$mailusercname</a>) } );
                $html .= "</p>\n<p>";
                $html .= BML::ml( ".email.$ml_str.body2.html", { aopts => "href='" . $mailcommanlink . "'" } );
            }
            $html .= "</p>\n<p>$ML{'.email.close'}<br/>\n";
            $html .= BML::ml( '.email.signed', { site => $LJ::SITENAME } );
            $html .= "<br/>$LJ::SITEROOT</p>";

            my $plain;

            $plain .= BML::ml( '.email.hello', { site => $LJ::SITENAMESHORT, user => $mailusername } );
            $plain .= "\n\n";
            if ( $ml_str eq 'del' ) {
                $plain .= BML::ml( ".email.$ml_str.body2", { admin => $remote->user, comm => $mailusercname } );
            } else {  # add
                $plain .= BML::ml( ".email.$ml_str.body2", { comm => $mailusercname } );
                $plain .= "\n\n" . $ML{".email.$ml_str.body2.plain"} . "\n\n$mailcommanlink";
            }
            $plain .= "\n\n$ML{'.email.close'}\n";
            $plain .= BML::ml( '.email.signed', { site => $LJ::SITENAME } );
            $plain .= "\n$LJ::SITEROOT\n";

            my $subject = BML::ml( ".email.$ml_str.subject2", { comm => $mailusercname } );
            $sendmail->( $maint_u, $html, $plain, $subject );
        };

        # get all the maintainers who were removed
        my $changedmaintainers = LJ::load_userids(keys %{$delete{admin}}, keys %{$add{admin}});

        foreach my $uid (keys %{$delete{admin} || {}}) {
            my $delmaintu = $changedmaintainers->{$uid};
            next if ! $delmaintu || $delmaintu->is_expunged;

            $maintainer_notify->( $delmaintu, 'maintainer_remove', 'del' );
        }

        # delete other rel edges
        LJ::clear_rel_multi(
                            (map { [$cid, $_, 'A'] } keys %{$delete{admin}      || {}}),
                            (map { [$cid, $_, 'P'] } keys %{$delete{post}       || {}}),
                            (map { [$cid, $_, 'M'] } keys %{$delete{moderate}   || {}}),
                            (map { [$cid, $_, 'N'] } keys %{$delete{preapprove} || {}}),
                            );

        # perform additions
        my @msgs;
        if (%{$add{'member'}}) {
            foreach my $id (keys %{$add{'member'}}) {
                next if $was{$id}->{'member'};
                my $u = LJ::load_userid($id);
                if ( $remote->equals( $u ) ) {
                    # you're allowed to add yourself as member
                    $remote->join_community( $c );
                } else {
                    if ( $u && $u->send_comm_invite( $c, $remote, [ 'member' ] ) ) {
                        # if it succeeded, push the reinvited information
                        push @msgs, BML::ml('.reinvited2',
                            { user => $u->ljuser_display,
                              aopts => "href='$LJ::SITEROOT/manage/invites'" });
                    }
                }
            }
        }

        foreach my $uid (keys %{$add{admin} || {}}) {
            my $newmaintu = $changedmaintainers->{$uid};
            next unless $newmaintu;

            $maintainer_notify->( $newmaintu, 'maintainer_add', 'add' );
        }

        # set rels in db/memcache
        LJ::set_rel_multi( (map { [$cid, $_, 'A'] } keys %{$add{admin}      || {}}),
                           (map { [$cid, $_, 'P'] } keys %{$add{post}       || {}}),
                           (map { [$cid, $_, 'M'] } keys %{$add{moderate}   || {}}),
                           (map { [$cid, $_, 'N'] } keys %{$add{preapprove} || {}}),
                           );

        # delete reluser memcache key
        LJ::MemCache::delete([ $cid, "reluser:$cid:A" ]);
        LJ::MemCache::delete([ $cid, "reluser:$cid:P" ]);
        LJ::MemCache::delete([ $cid, "reluser:$cid:M" ]);
        LJ::MemCache::delete([ $cid, "reluser:$cid:N" ]);

        # create some other messages
        my %done; # keep track of who we've done
        foreach my $id (keys %addr, keys %delr) {
            next if $done{$id}++;

            my ($str, @astr, @dstr);
            push @astr, $ML{".label.$_"}
                foreach keys %{$addr{$id} || {}};
            push @dstr, $ML{".label.$_"}
                foreach keys %{$delr{$id} || {}};
            $str .= "<li>" . BML::ml('.success.added', { list => join(', ', @astr) }) . "</li>\n" if @astr;
            $str .= "<li>" . BML::ml('.success.deleted', { list => join(', ', @dstr) }) . "</li>\n" if @dstr;
            push @msgs, LJ::ljuser($users{$id}) . ":<ul>$str</ul>" if $str;
        }

        if ( @msgs ) {
            $ret .= "<?p $ML{'.success.message2'} p?>";
            $ret .= $_ foreach @msgs;
        }

        if (@invited) {
            $ret .= "<?p ";
            $ret .= BML::ml('.success.invited2',
                            { aopts => "href='$LJ::SITEROOT/manage/invites'" });
            $ret .= " p?><ul>";
            foreach my $row (@invited) {
                $ret .= "<li>" . LJ::ljuser($row->[0]) . ": ";
                $ret .= "$ML{\"/manage/invites.bml.label.$_\"}, " foreach @{$row->[1] || []};
                chop $ret; chop $ret;
                $ret .= "</li>\n";
            }
            $ret .= "</ul>";
        }
        $ret .= "<?p $ML{'.success.nochanges'} p?>" unless @msgs || @invited;
        $ret .= "<?p " . BML::ml( '.success.return2', { aopts => "href='" . BML::get_uri() . "?authas=$cname'" } ) . " p?>";

        return $ret;

    } elsif ( $POST{'action:purge'} ) {
        # show list of purged members and request confirmation
        my $members = LJ::load_userids( $c->member_userids );
        my @purged = sort { $a->user cmp $b->user }
                     grep { $_ && $_->is_expunged } values %$members;

        if ( @purged ) {
            $ret .= "<p>";
            $ret .= LJ::Lang::ml( '.purge.explain', { commname => $c->ljuser_display,
                                                      count => scalar @purged } );
            $ret .= "</p><p>$ML{'.purge.continue'}</p>\n";

            # list of users
            $ret .= "<ul class='bullet-list'>";
            $ret .= "<li>" . $_->ljuser_display . "</li>" foreach @purged;
            $ret .= "</ul>\n";

            # submit confirmation via action:update
            $ret .= "<form method='post' action='members?authas=$cname'>";
            $ret .= LJ::form_auth();

            my @ids = map { $_->id } @purged;
            my %hidden = ( attribs => '', ids => join ',', @ids );
            my @wstrs;

            foreach my $id ( @ids ) {
                # clear all the attrs. we don't care if they're valid.
                my $name = $members->{$id}->user;
                push @wstrs, "$id:$name:" . join '', keys %attrshort;
                $hidden{"edit_${id}_$_"} = 0 foreach values %attrshort;
            }

            $hidden{was} = join ';', @wstrs;
            $ret .= LJ::html_hidden( %hidden );

            $ret .= LJ::html_submit( 'action:update', $ML{'.purge.confirm'} );
            $ret .= "</form><br />\n";

        } else {
            # no one in the community was purged
            $ret .= "<p>";
            $ret .= LJ::Lang::ml( '.purge.none', { commname => $c->ljuser_display } );
            $ret .= "</p>\n";
        }

        $ret .= "<p>";
        $ret .= LJ::Lang::ml( '.backlink', { aopts => "href='members?authas=$cname'" } );
        $ret .= "</p>\n";

        return $ret;

    }

    # browsing mode

    # now get lists of: members, admins, able to post, moderators
    my %users = ();
    my %typemap = ( A => 'admin', P => 'post', E => 'member',
                    M => 'moderate', N => 'preapprove' );
    my $typein = q( 'A','P','M','N','E' );

    # need a dbr now
    my $dbr = LJ::get_db_reader();

    # get all community edges
    # FIXME: kind of lame to do it this way, manually, instead of having accessors for this...
    my $sth = $dbr->prepare("SELECT r.targetid, r.type, u.user FROM reluser r, useridmap u " .
                            "WHERE r.targetid = u.userid AND r.userid=? AND r.type IN ($typein)");
    $sth->execute($cid);

    my %usernames;
    my %count;
    while (my ($id, $type, $user) = $sth->fetchrow_array) {
        $users{$id}->{'userid'} = $id;
        $users{$id}->{'name'} = $user;
        $usernames{$user} = $id;
        my $key = $typemap{$type};
        $users{$id}->{$key} = 1;
        $count{$type}++;
    }

    # columns of our table, excluding username
    my @attribs = ('member', 'post');
    $c->preload_props( 'moderated' );
    push @attribs, ('preapprove')
        if $c->{'moderated'} || $count{'N'};
    push @attribs, ('moderate')
        if $c->{'moderated'} || $count{'M'};
    push @attribs, 'admin';

    # sorting method; default sort by username
    my $method = $GET{'sort'};
    my %sortmap = reverse %typemap;
    my $sort = $sortmap{$method} ? $method : '';

    # even if we're sorting another way, we still want a
    # secondary sort by username, for predictability

    my $cmp = $sort ? sub { $b->{$sort} <=> $a->{$sort} || $a->{name} cmp $b->{name} }
                    : sub { $a->{name} cmp $b->{name} };
    my @users = sort $cmp values %users;

    # iterate through list and store position value in users hash
    for ( my $i = 0; $i < @users; $i++ ) {
        my $id = $users[$i]->{userid};
        $users{$id}->{index} = $i;
    }

    my $page_size = 100; # change to adjust page size

    # are we going to jump to a specific user ?
    my ( $jumppage, $jumpuser, $currpage );
    if ( $POST{jumpto} ) {
        if ( my $user = $users{$usernames{$POST{jumpto}}} ) {
            $jumpuser = $user->{name};
            $jumppage = $user->{index} + 1;
            $currpage = int( $user->{index} / $page_size ) + 1;
            $page_size = 1;  # just show this user
        }
    }
    $jumppage = $GET{page} unless defined $jumppage;

    # how to make links back to this page
    my $self_link = sub {
        my $sort = $GET{'sort'} ? "&sort=$GET{'sort'}" : "";
        return "members?authas=$cname&page=$_[0]$sort";
    };

    my %items = BML::paging( \@users, $jumppage, $page_size );
    my $navbar = LJ::paging_bar($items{'page'}, $items{'pages'},
                                 { 'self_link' => $self_link });
    @users = @{$items{'items'}};

    # output starts here
    $ret .= BML::ml('.intro', { aopts1 => "href='$LJ::HELPURL{maintainership}'", aopts2 => "href='$LJ::HELPURL{add_to_comm}'" }) . "<br /><br />";
    $ret .= $ML{'.intro.invite'} . "<br /><br />";

    $ret .= "<form method='post' action='members?authas=$cname'>";
    $ret .= LJ::form_auth();

    # jump to user
    $ret .= "<p>$ML{'.jump2'}: ";
    $ret .= LJ::html_text( { name => 'jumpto', value => $POST{jumpto},
                             class => 'text', size => '10', maxlength => '75' } ) . " ";
    $ret .= LJ::html_submit( undef, 'Go' ) . "</p>";

    if ( $jumpuser ) {
        $ret .= "<p><h3><a href='" . $self_link->( $currpage ) . "'>";
        $ret .= "$ML{'.jump.clear'}</a></h3></p>";
    } else {
        $ret .= "<p><h3>$ML{'.jump.notfound'}</h3></p>"
            if $POST{jumpto};  # was not found in the list
        $ret .= "$navbar<br />";
    }

    my $purge_button = "<p>" . LJ::html_submit( 'action:purge', $ML{'.purge.request'} ) . "</p>\n";
    my $sortlink = BML::get_uri() . "?authas=$cname&sort=";
    $ret .= "<div align='center'>$purge_button<table cellpadding='0' cellspacing='0'>\n<thead><tr>" .
            "<th><a href='${sortlink}name'>$ML{'.key.user'}</a></th>";
    $ret .= "<th><a href='${sortlink}$_'>".$ML{".key.$_"}."</a></th>" for (@attribs);
    $ret .= "</tr></thead>\n";

    # rows for existing users
    my $rc = 0;
    my @wstrs;
    foreach(@users) {
        my $rstyle = ($rc++ & 1) ? "even" : "odd";
        $ret .= "<tr class='$rstyle'><td>" . LJ::ljuser($_->{'name'}) . "</td>";
        my $wstr;
        foreach my $key (@attribs) {
            $ret .= "<td style='text-align: center;'>";
            $ret .= LJ::html_check({ 'name' => "edit_$_->{'userid'}_$key",
                                     'selected' => $_->{$key} });
            $wstr .= $attrshort_r{$key} if $_->{$key};
            $ret .= "</td>";
        }
        push @wstrs, "$_->{userid}:$_->{name}:$wstr" if $wstr;
        $ret .= "</tr>\n";
    }

    # if on the last page, let users add to the list
    if ( $jumpuser || ( $items{page} == $items{pages} ) ) {
        foreach(1..5) {
            my $rstyle = ($rc++ & 1) ? "even" : "odd";
            $ret .= "<tr class='$rstyle'><td>";
            $ret .= LJ::html_text({ 'name' => "add_$_", 'size' => '10', 'class' => 'text', 'maxlength' => '75' }) . "</td>";
            foreach my $key (@attribs) {
                $ret .= "<td style='text-align: center;'>";
                if ($key eq 'member' || $key eq 'post') {
                    $ret .= LJ::html_check({ name => "add_${_}_$key", selected => 1, });
                } else {
                    $ret .= LJ::html_check({ name => "add_${_}_$key" });
                }
                $ret .= "</td>";
            }
            $ret .= "</tr>\n";
        }
    }

    # some hidden values
    $ret .= "</table>";
    $ret .= LJ::html_hidden('ids', join(',', map { $_->{'userid'}} @users),
                            'attribs', join(',', @attribs),
                            'was', join(';', @wstrs)) . "\n";

    $ret .= "<p>" . LJ::html_submit('action:update', $ML{'.update'}) . "</p>\n";
    $ret .= "</div></form>\n\n";

    $ret .= $navbar unless $jumpuser;

    return $ret;

}
_code?>

<=body
page?>
