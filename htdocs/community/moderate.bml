<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=><?_ml .title _ml?>
body<=
<?_code

{
    use strict;
    use LJ::Poll;
    use vars qw(%GET %POST);
    LJ::set_active_crumb('moderate');

    my $ret;
    my $remote = LJ::get_remote();

    unless ($remote) {
        $ret .= "<?needlogin?>";
        return $ret;
    }

    # old GET arg
    if ($GET{comm}) {
        return BML::redirect("$LJ::SITEROOT/community/moderate?authas=$GET{comm}");
    }

    $ret .= "<form action='moderate' method='GET'>\n";
    $ret .= LJ::make_authas_select($remote, { authas => $GET{authas}, type => 'C' });
    $ret .= "</form>\n\n";

    my $mode = $POST{'mode'};
    my ($saved_comm, $saved_modid) = ("", 0);

    if (LJ::did_post() && ($mode eq 'approve_do' || $mode eq 'reject_do')) {
        unless (LJ::check_form_auth()) {
            $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'error.invalidform'} p?>";
            return $ret;
        }
        my $cid = $POST{'cid'}+0;
        my $modid = $POST{'modid'}+0;

        my $c = LJ::load_userid($cid);
        my $dbcm = LJ::get_cluster_master( $c );
        unless ( $c && $dbcm ) {
            $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'.error.notfound'} p?>";
            return $ret;
        }

        unless ( $remote->can_moderate( $c ) ) {
            $ret .= "<?h1 $ML{'Error'} h1?><?p " .
                BML::ml('.error.noaccess', {'comm'=>"<?ljcomm $c->{'user'} ljcomm?>"}) . " p?>";
            return $ret;
        }

        $ret .= $c->maintainer_linkbar( "queue" );

        # use dbcm to read to minimize collisions between moderators due to replication lag
        my $entry = $dbcm->selectrow_hashref("SELECT * FROM modlog WHERE journalid=? AND modid=?",
                                             undef, $c->{'userid'}, $modid);
        my $frozen = $dbcm->selectrow_array("SELECT request_stor FROM modblob WHERE journalid=? AND modid=?",
                                            undef, $c->{'userid'}, $modid);

        my $req = $frozen ? Storable::thaw($frozen) : undef;
        unless ($frozen && $entry && $req->{'_moderate'}->{'authcode'} && $req->{'_moderate'}->{'authcode'} eq $POST{'auth'}) {
            $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'.error.noentry'} p?>";
            return $ret;
        }

        my $poster = LJ::load_userid($entry->{'posterid'});
        my ($success, $do_mail) = (0, 0);
        my $why_mail;
        my $prot_err;
        my $posturl;

        # in case the user renamed while the submission was in the queue
        # we need to fix up the username based on the userid we stored
        $req->{user} = $poster->user;
        $req->{username} = $poster->user;
        if ($mode eq 'approve_do') {
            # allow all system logprops
            # we've already made sure that the original user didn't provide any system ones
            my $res = LJ::Protocol::do_request('postevent', $req, \$prot_err, {
                    nomod => 1,
                    noauth => 1,
                    allow_system => 1,
                });
            if ($res) { # succeeded
                $success = 1;
                $ret .= "<?h1 $ML{'.posted.header'} h1?><?p $ML{'.posted.text'} p?>";
                # does the poster want to know? if they have working email and notification on
                ($do_mail, $why_mail) = (1, 'success')
                    if ($poster->{'opt_gettalkemail'} eq "Y" && $poster->{'status'} eq "A");
                $posturl = LJ::item_link($c, $res->{'itemid'}, $res->{'anum'});
            } else {
                $prot_err = LJ::Protocol::error_message($prot_err) if $prot_err;
                $ret .= "<?h1 $ML{'Error'} h1?><?p " .
                    BML::ml('.posted.proterror', {'err'=>"<b>$prot_err</b>"}) . " p?>";
                ($do_mail, $why_mail) = (1, 'proterror')
                    if $poster->{'status'} eq "A";
            }
            if ($POST{'preapprove'}) {
                LJ::set_rel($c, $poster, 'N');
                  $ret .= "<?h1 $ML{'.posted.appheader'} h1?><?p " .
                      BML::ml('.posted.apptext', {'user'=>"<?ljuser $poster->{'user'} ljuser?>"}) . " p?>";
            }
        }
        if ($mode eq 'reject_do') {
            $success = 1;
            $ret .= "<?h1 $ML{'.rejected.header'} h1?><?p $ML{'.rejected.text'} p?>";
            ($do_mail, $why_mail) = (1, 'reject')
                if $poster->{'status'} eq 'A';

            if ($POST{'mark_as_spam'} && !LJ::reject_entry_as_spam($c->{'userid'}, $modid)) {
                    $success = 0;
            }
        }

        $do_mail = 1 unless $poster->is_visible;

        # mail the poster
        if ($do_mail) {
            my $to = $poster->email_raw;
            my $body;
            my $etime = sprintf("%04d-%02d-%02d %02d:%02d",
                                $req->{'year'}, $req->{'mon'},
                                $req->{'day'}, $req->{'hour'},
                                $req->{'min'});
            my $music = $req->{'props'}->{'current_music'};
            my $mood = $req->{'props'}->{'current_mood'};
            my $pickeyword = $req->{'props'}->{'picture_keyword'};

            if ($why_mail eq 'success') {
                $body .= LJ::Lang::ml( ".email.body.approved", { comm => $c->{'user'}, url => $posturl } );
                $body .= LJ::Lang::ml( ".email.body.approved.note", { note => $POST{'why'} } ) if $POST{why};
            } elsif ($why_mail eq 'proterror') {
                $body .= LJ::Lang::ml( ".email.body.proterror", { comm => $c->{'user'}, error => $prot_err } );
            } elsif ($why_mail eq 'reject') {
                $body .= LJ::Lang::ml( ".email.body.rejected", { comm => $c->{'user'} } );
                $body .= LJ::Lang::ml( ".email.body.rejected.why", { reason => $POST{'why'} } ) if $POST{why};
            }

            $body .= LJ::Lang::ml( ".email.submission.header", {
                time => $etime,
                subject => $req->{'subject'}
            } );

            if ($music) {
                $body .= LJ::Lang::ml( ".email.submission.music", { music => $music } ) . "\n";
            }
            if ($mood) {
                $body .= LJ::Lang::ml( ".email.submission.mood", { mood => $mood } ) . "\n";
            }
            if ($pickeyword) {
                $body .= LJ::Lang::ml( ".email.submission.pickeyword", { pickeyword => $pickeyword } ) . "\n";
            }

            $body .= LJ::Lang::ml( ".email.submission.text", { text => $req->{'event'} } );

            $body .= LJ::Lang::ml( ".email.footer", {
                sitename => $LJ::SITENAME,
                siteurl => $LJ::SITEROOT
            } );

            LJ::send_mail({
                'to' => $to,
                'from' => $LJ::BOGUS_EMAIL,
                'charset' => 'utf-8',
                'subject' => LJ::Lang::ml( ".email.subject" ),
                'body' => $body,
            });
        }

        if ($success) {
            $saved_comm = $c->{'user'};
            $saved_modid = 0;

            # Delete this moderated entry from the list
            $c->do("DELETE FROM modlog WHERE journalid=? AND modid=?",
                   undef, $c->{'userid'}, $modid);
            $c->do("DELETE FROM modblob WHERE journalid=? AND modid=?",
                   undef, $c->{'userid'}, $modid);

            # expire mod_queue_count memcache
            $c->memc_delete( 'mqcount' );

        # FALL THROUGH to showing the list of entries in this community
        } else {
            $ret .= "<p>";
            $ret .= BML::ml('Backlink', {
                'link'=>'/community/manage',
                'text'=>$ML{'.manage'},
                }) . "<br />";
            $ret .= BML::ml('Backlink', {
                'link'=>"/community/moderate?authas=$c->{'user'}",
                'text'=>$ML{'.moderate'},
                }) . "<br />";
            $ret .= "</p>";
            return $ret;
        }
    }

    my $comm = $saved_comm || ($mode eq 'action' ? $POST{'comm'} : $GET{authas});
    my $modid = $saved_modid || ($mode eq 'action' ? $POST{'modid'} : $GET{'modid'});
    $modid += 0;

    # redirect to community/manage if a GET request with no arg
    return BML::redirect("manage") unless $comm;

    my $c = LJ::load_user($comm);
    unless ($c) {
        $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'.error.notfound'} p?>";
        return $ret;
    }

    my $can_spam = LJ::sysban_check( 'spamreport', $c->user ) ? 0 : 1;

    my $dbcr = LJ::get_cluster_def_reader($c);

    unless ( $remote->can_moderate( $c ) ) {
        $ret .= "<?h1 $ML{'Error'} h1?>";
        if ( $c->has_moderated_posting ) {
            $ret .= "<?p " . BML::ml( '.error.noaccess', { comm => $c->ljuser_display } ) . " p?>";
        } else {
            $ret .= "<?p " . BML::ml( '.error.notmoderated' ) . " p?>";
        }
        return $ret;
    }

    $ret .= $c->maintainer_linkbar( "queue" )
        unless LJ::did_post() && ( $mode eq 'approve_do' || $mode eq 'reject_do' );

    my $formauth = LJ::form_auth();

    if ($mode eq 'action' && $POST{'action:approve'}) {
        my ($posterid, $frreq);
        if ($modid) {
            ($posterid, $frreq) = $dbcr->selectrow_array
                ("SELECT l.posterid, b.request_stor FROM modlog l, modblob b " .
                 "WHERE l.journalid=? AND l.modid=? AND l.journalid=b.journalid AND l.modid=b.modid",
                 undef, $c->{'userid'}, $modid);
        }
        unless ($posterid) {
            $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'.error.noentry'} p?>";
            return $ret;
        }
        my $req = Storable::thaw($frreq);
        my $poster = LJ::load_userid($posterid);
        $ret .= "<?h1 $ML{'.approve.header'} h1?><?p $ML{'.approve.text'} p?>";
        $ret .= "<p><form method='post' action='/community/moderate'><center>";
        $ret .= $formauth;
        $ret .= "<input type='hidden' name='mode' value='approve_do'>";
        $ret .= "<input type='hidden' name='cid' value='$c->{'userid'}'>";
        $ret .= "<input type='hidden' name='modid' value='$modid'>";
        $ret .= "<input type='hidden' name='auth' value='" . $req->{'_moderate'}->{'authcode'} . "'>";
        $ret .= "<input type='submit' value='$ML{'.approve.button'}'>";
        $ret .= "</center>";
        if ( $poster && $poster->email_status eq 'A' ) {
            $ret .= "<?p $ML{'.approve.note'} p?>";
            $ret .= LJ::html_textarea({
                name => "why",
                class => "text",
                rows => 10,
                cols => 60,
            });
        }
        $ret .= "<p><input type='checkbox' name='preapprove'> " .
            BML::ml('.approve.preapprove', {'user'=>"<?ljuser $poster->{'user'} ljuser?>"});
        $ret .= "</form>";
        return $ret;
    }

    if ($mode eq 'action' && ($POST{'action:reject'} || $POST{'action:mark_as_spam'})) {
        my ($posterid, $frreq);
        if ($modid) {
            ($posterid, $frreq) = $dbcr->selectrow_array
                ("SELECT l.posterid, b.request_stor FROM modlog l, modblob b " .
                 "WHERE l.journalid=? AND l.modid=? AND l.journalid=b.journalid AND l.modid=b.modid",
                 undef, $c->{'userid'}, $modid);
        }
        unless ($posterid) {
            $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'.error.noentry'} p?>";
            return $ret;
        }
        my $req = Storable::thaw($frreq);
        my $poster = LJ::load_userid($posterid);
        $ret .= "<?h1 $ML{'.reject.header'} h1?><?p $ML{'.reject.text'} p?>";
        $ret .= "<p><form method='post' action='/community/moderate'><center>";
        $ret .= $formauth;
        $ret .= "<input type='hidden' name='mode' value='reject_do'>";
        $ret .= "<input type='hidden' name='cid' value='$c->{'userid'}'>";
        $ret .= "<input type='hidden' name='modid' value='$modid'>";
        $ret .= "<input type='hidden' name='auth' value='" . $req->{'_moderate'}->{'authcode'} . "'>";
        $ret .= "<input type='hidden' name='mark_as_spam' value='1'>" if $POST{'action:mark_as_spam'};
        $ret .= "<input type='submit' value='$ML{'.reject.button'}'>";
        $ret .= "</center>";
        if ($poster->{'status'} eq 'A') {
            $ret .= "<?p $ML{'.reject.reason'} p?>";
            $ret .= "<?p <textarea rows='10' cols='60' wrap='soft' name='why'></textarea> p?>";
        }
        $ret .= "</form>";
        return $ret;
    }

    # browse either the list of entries or an entry
    unless ($modid) {
        # present a list of entries
        $ret .= "<?h1 $ML{'.browse.header'} h1?><?p " .
            BML::ml('.browse.text', {'link'=>"<?ljcomm $comm ljcomm?>"}) . " p?>";
        $ret .= "<div style='margin: 10px 0 10px 40px'>";
        my @entries;
        my $sth = $dbcr->prepare("SELECT * FROM modlog WHERE journalid=$c->{'userid'}");
        $sth->execute;
        while ($_ = $sth->fetchrow_hashref) {
            push @entries, $_;
        }
        unless (@entries) {
            $ret .= "<i>$ML{'.browse.empty'}</i>";
        } else {
            $ret .= qq{
            <table cellpadding='5'>
                <thead><tr>
                    <th>$ML{'.brlist.time'}</th>
                    <th>$ML{'.brlist.poster'}</th>
                    <th>$ML{'.brlist.subject'}</th>
                    <th>$ML{'.brlist.actions'}</th>
                </tr></thead>
            };

            my %users;
            LJ::load_userids_multiple([ map { $_->{'posterid'}, \$users{$_->{'posterid'}} } @entries ]);
            foreach (sort { $a->{'logtime'} lt $b->{'logtime'} } @entries) {
                my $link = "/community/moderate?authas=$comm&amp;modid=" . $_->{'modid'};
                my $subject = $_->{'subject'} ? LJ::eall($_->{'subject'}) : "<i>[No Subject]</i>";
                $ret .= "<tr><td>$_->{'logtime'}</td>" .
                    "<td><?ljuser " . $users{$_->{'posterid'}}->{'user'} . " ljuser?></td>" .
                    "<td><a href='$link'>$subject</a></td>" .
                    "<td>" .
                    BML::ml('Actionlink', {
                        'link'=>"<a href='$link'>$ML{'.brlist.view'}</a>"
                        }) . "</td></tr>";
            }
            $ret .= "</table>";
        }
        $ret .= "</div>";
        $ret .= BML::ml('Backlink', {
            'link'=>'/community/manage',
            'text'=>$ML{'.manage'},
        }) . "<br />";

    } else {
        # view an entry
        my $frozen = $dbcr->selectrow_array("SELECT request_stor FROM modblob WHERE journalid=? AND modid=?",
                                            undef, $c->{'userid'}, $modid);
        unless ($frozen) {
            # there's no entry. maybe there was a modlog row, but not a modblob row
            # for whatever reason. let's lazy-clean. don't care if it returns a value
            # or not, because they may have legitimately just raced another moderator
            my $sth = $dbcr->prepare("DELETE FROM modlog WHERE journalid=? AND modid=?");
            $sth->execute($c->id, $modid);

            $ret .= "<?h1 $ML{'Error'} h1?><?p $ML{'.error.noentry'} p?>";
            return $ret;
        }
        my $req = Storable::thaw($frozen);

        # cleaning
        my $event = $req->{'event'};
        $event =~ s/^\s+//;
        $event =~ s/\s+$//;
        if ($req->{'lineendings'} eq "mac") {
            $event =~ s/\r/\n/g;
        } else {
            $event =~ s/\r//g;
        }
        my $subject = $req->{'subject'};
        my $props = $req->{'props'};
        my $up = LJ::load_user($req->{'username'});
        my $posterid = $up->{'userid'};
        my $error;
        my @polls = LJ::Poll->new_from_html(\$event, \$error, {
            'journalid' => $c->{'userid'},
            'posterid' => $posterid,
        });

        my $poll_preview = sub {
            my $poll = shift @polls;
            return '' unless $poll;
            return $poll->preview;
        };

        $event =~ s/<poll-placeholder>/$poll_preview->()/eg;
        LJ::CleanHTML::clean_event(\$event, {'preformatted' => $req->{'props'}->{'opt_preformatted'},
                                             'cutpreview' => 1,
                                             'cuturl' => '#',
                                         });

        # create iframe from <lj-embed> tag
        LJ::EmbedModule->expand_entry($c, \$event);

        BML::ebml(\$event);

        $ret .= "<p>";
        $ret .= BML::ml('Backlink', {
            'link'=>'/community/manage',
            'text'=>$ML{'.manage'},
        }) . "<br />";
        $ret .= BML::ml('Backlink', {
            'link'=>"/community/moderate?authas=$comm",
            'text'=>$ML{'.moderate'},
        }) . "<br />";
        $ret .= "</p>";

        $ret .= "<p>";
        $ret .= "<table summary=''><tr valign='middle'>";

        my $kw = $props->{picture_keyword};
        my $icon = LJ::Userpic->new_from_keyword( $up, $kw );

        if ( $up && $icon ) {
            my $alt = $up->name_html . LJ::ehtml( ": $kw" );
            my $src = $icon->url;
            my ( $width, $height ) = $icon->dimensions;
            $ret .= "<td><img src='$src' width='$width' ".
                "height='$height' align='absmiddle' ".
                "hspace='3' title='$alt' alt=''></td>";
        }

        $ret .= "<td>";
        $ret .= BML::ml("talk.somebodywrote_comm", { 'realname' => BML::eall($up->{'name'}),
                                                     'userlink' => LJ::ljuser($up->{'user'}),
                                                     'commlink' => "<?ljcomm $c->{'user'} ljcomm?>" });

        my $datestr = sprintf( "%04d-%02d-%02d", $req->{year}, $req->{mon}, $req->{day} );
        my $etime = sprintf( "%s %02d:%02d",
                             LJ::date_to_view_links( $c, $datestr ),
                             $req->{hour}, $req->{min} );
        $ret .= "<br /><font size='-1'>@ $etime</font>";
        $ret .= "</td></tr></table>";


        my $actions .= "<input type='hidden' name='mode' value='action' />";
        $actions .= "<input type='hidden' name='comm' value='$comm' />";
        $actions .= "<input type='hidden' name='modid' value='$modid' />";
        $actions .= "<input type='submit' name='action:approve' value='$ML{'.choice.approve'}' style='font-size: 15pt; background: #82dd88; color: #000000' />";
        $actions .= "&nbsp;&nbsp;<input type='submit' name='action:reject' value='$ML{'.choice.reject'}' style='font-size: 15pt; background: #e08291; color: #000000' />";
        $actions .= "&nbsp;&nbsp;<input type='submit' name='action:mark_as_spam' value='$ML{'.choice.mark_as_spam'}' style='font-size: 15pt; background: #e08291; color: #000000' />" if $can_spam;

        $ret .= "<form method='post' action='/community/moderate'>";
        $ret .= "<div class='action-bar'>$actions</div>";
        $ret .= "</form>";

        my %current = LJ::currents( $props, $up );

        if ($props->{'taglist'}) {
            $current{'Tags'} = join(", ", sort split(/\s*,\s*/, $props->{'taglist'}));
        }

        $ret .= "<div style='margin-left: 30px'>";
        $ret .= LJ::currents_table( %current );

        ### security indicator
        my $sec = "";
        if ($req->{'security'} eq "private") {
            $sec = "<?securityprivate?>";
        } elsif ($req->{'security'} eq "usemask") {
            $sec = "<?securityprotected?>";
        }

        $ret .= $sec;

        my $adult = $props->{'adult_content'};
        my $age_restriction;
        if ($adult eq "explicit" ) {
            $age_restriction = LJ::img( "adult-18" );
        } elsif ( $adult eq "concepts" ) {
            $age_restriction = LJ::img( "adult-nsfw" );
        }
        if ($adult) { $ret .= $age_restriction . " "; }

        if ($subject) {
            LJ::CleanHTML::clean_subject(\$subject);
              BML::ebml(\$subject);
              $ret .= "<font face='Arial,Helvetica' size='+1'><i><b>$subject</b></i></font><br />\n";
          }
        $ret .= $event;

        my $reason = $props->{'adult_content_reason'};
        if ($reason) { $ret .= "<br /><br />" . LJ::Lang::ml( '.adult.reason', { reason => $reason } ) };

        $ret .= "</div>";
        $ret .= "<br clear='all' /><hr width='100%' size='2' align='center' />";
    }

    return $ret;
}

_code?>

<=body
page?>

