<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?_code
{
    use strict;
    use vars qw($title $body %GET %POST);

    $title = "<?_ml .main.title _ml?>";
    $body = "";
    
    my $error = sub { 
        $title = "<?_ml .error.title _ml?>";
        $body = join '', @_;
        return undef;
    };
    my $makelink = sub {
        my ($by, $what, $state, $reporttime, $etext) = @_;
        $by = LJ::eurl($by);
        $what = LJ::eurl($what);
        $state = LJ::eurl($state);
        $reporttime = LJ::mysql_time($reporttime);
        $reporttime = $etext if $etext;
        return "<a href=\"spamreports?mode=view&amp;by=$by&amp;what=$what&amp;state=$state\">$reporttime</a>";
    };
    my $dellink = sub {
        my ($srids, $text, $extra) = @_;
        return "<form method=\"post\" action=\"spamreports\">" .
            LJ::html_hidden('mode', 'del') .
            LJ::html_hidden('srids', join(',', @$srids)) .
            LJ::html_hidden('ret', "spamreports?" . join('&amp;', map { "$_=" . LJ::eurl($GET{$_}) } keys %GET)) .
            LJ::html_submit('submit', $text) .
            $extra . 
            "</form>";
    };
    # login check
    my $remote = LJ::get_remote();
    return $error->("<?needlogin?>")
        unless $remote;
    
    # priv check
    my @displayprivs = ( "siteadmin:spamreports", "siteadmin:*" );
    my $numprivs = @displayprivs;

    return $error->(BML::ml("admin.noprivserror", { numprivs => $numprivs, needprivs => "<b>" . join(", ", @displayprivs) . "</b>"} ))
        unless $remote && $remote->has_priv( 'siteadmin', 'spamreports' );

    # show the top 10 spam reports by IP
    my $mode = lc($GET{mode} || $POST{mode});
    $mode = '' if $mode =~ /^del/ && !LJ::did_post() && !LJ::check_referer('/admin/spamreports.bml');

    # combined/user/anon viewing?
    my $view = $mode =~ /_([cua])$/ ? $1 : 'c';
    my ($extrawhere, $extratitle);
    if    ($view eq 'c') { $extrawhere = '1'; }
    elsif ($view eq 'u') { $extrawhere = 'posterid > 0'; $extratitle = " - Users Only"; }
    elsif ($view eq 'a') { $extrawhere = 'posterid = 0'; $extratitle = " - Anonymous Only"; }
    $mode =~ s/_[cua]$//; # strip out viewing option

    my $dbr = LJ::get_db_reader();
    return $error->("Unable to get database reader handle.") unless $dbr;
    my @rows;
    my @headers;
    if ($mode eq 'top10ip') {
        # top 10 by ip
        $title = "<?_ml .top10ip.title _ml?>";
        @headers = ('<?_ml .header.numreports _ml?>', '<?_ml .header.ipaddress _ml?>', '<?_ml .header.mostrecentreport _ml?>');
        my $res = $dbr->selectall_arrayref('SELECT COUNT(ip) AS num, ip, MAX(reporttime) FROM spamreports ' .
                                           "WHERE state = 'open' AND ip IS NOT NULL " .
                                           'GROUP BY ip ORDER BY num DESC LIMIT 10');
        foreach (@$res) {
            push @rows, [ $_->[0], $_->[1], $makelink->('ip', $_->[1], 'open', $_->[2]) ];
        }
 
    } elsif ($mode eq 'top10user') {
        # top 10 by user
        $title = "<?_ml .top10user.title _ml?>";
        @headers = ('<?_ml .header.numreports _ml?>', '<?_ml .header.postedbyuser _ml?>', '<?_ml .header.mostrecentreport _ml?>');
        my $res = $dbr->selectall_arrayref('SELECT COUNT(posterid) AS num, posterid, MAX(reporttime) FROM spamreports ' .
                                           "WHERE state = 'open' AND posterid > 0 " .
                                           'GROUP BY posterid ORDER BY num DESC LIMIT 10');
        foreach (@$res) {
            my $u = LJ::load_userid($_->[1]);
            push @rows, [ $_->[0], LJ::ljuser($u), $makelink->('posterid', $_->[1], 'open', $_->[2]) ];
        }
 
    } elsif ($mode eq 'tlast10') {
        # most recent 10 reports
        $title = "<?_ml .tlast10.title _ml?>$extratitle";
        @headers = ('<?_ml .header.postedby _ml?>', '<?_ml .header.postedin _ml?>', '<?_ml .header.reporttime _ml?>');
        my $res = $dbr->selectall_arrayref('SELECT posterid, ip, journalid, reporttime FROM spamreports ' .
                                           "WHERE state = 'open' AND $extrawhere ORDER BY reporttime DESC LIMIT 10");
        foreach (@$res) {
            my $u2 = LJ::load_userid($_->[2]);
            if ($_->[0] > 0) {
                my $u = LJ::load_userid($_->[0]);
                push @rows, [ LJ::ljuser($u), LJ::ljuser($u2), $makelink->('posterid', $_->[0], 'open', $_->[3]) ];
            } else {
                push @rows, [ "$_->[1]", LJ::ljuser($u2), $makelink->('ip', $_->[1], 'open', $_->[3]) ];
            }
        }

    } elsif ($mode =~ /^last(\d+)hr$/) {
        # reports in last X hours
        my $hours = $1+0;
        my $secs = $hours * 3600; # seconds in an hour
        $title = BML::ml(".tlasthrs.title", { hours => $hours } ) . $extratitle;
        @headers = ('<?_ml .tlasthrs.numreports _ml?>', '<?_ml .tlasthrs.postedby _ml?>', '<?_ml .tlasthrs.reporttime _ml?>');
        my $res = $dbr->selectall_arrayref('SELECT journalid, ip, posterid, reporttime FROM spamreports ' .
                                           "WHERE $extrawhere AND reporttime > (UNIX_TIMESTAMP() - $secs) LIMIT 1000");

        # count up items and their most recent report
        my %hits;
        my %times;
        foreach (@$res) {
            my $key;
            if ($_->[2] > 0) {
                my $u = LJ::load_userid($_->[2]);
                next unless $u;
                $key = $u->{userid};
            } else {
                next unless $_->[1];
                $key = $_->[1];
            }
            $hits{$key}++;
            $times{$key} = $_->[3] unless $times{$key} gt $_->[3];
        }
        
        # now reverse to number => item list
        my %revhits;
        foreach (keys %hits) {
            if ($revhits{$hits{$_}}) {
                push @{$revhits{$hits{$_}}}, $_;
            } else {
                $revhits{$hits{$_}} = [ $_ ];
            }
        }

        # now push them onto @rows
        foreach (sort { $b <=> $a } keys %revhits) {
            my $r = $revhits{$_};
            foreach (@$r) {
                my $isip = $_ =~ /\./ ? 1 : 0;
                push @rows, [ $hits{$_}, $isip ? $_ : LJ::ljuser(LJ::load_userid($_)), 
                              $makelink->($isip ? 'ip' : 'posterid', $_, 'open', $times{$_}) ];
            }
        }

    } elsif ($mode eq 'view') {
        # view a particular report
        my ($by, $what, $state) = (lc($GET{by}), $GET{what}, lc($GET{state}));
        $by = '' unless $by =~ /^(?:ip|poster(?:id)?)$/;
        $state = 'open' unless $state =~ /^(?:open|closed)$/;
        $body .= "<?p [ <a href=\"spamreports\">&lt;&lt; Front Page</a> ] ";
        
        # open/closed links
        my $eargs = LJ::eurl("?by=$by&what=$what&state");
        if ($state eq 'open') {
            $body .= " [ " . $makelink->($by, $what, 'closed', undef, "<?_ml .view.closedreports _ml?>") . " ]";
        } else {
            $body .= " [ " . $makelink->($by, $what, 'open', undef, "<?_ml .view.openreports _ml?>") . " ]";
        }
        $body .= " p?>\n";

        # setup title and verify that the data is right
        if ($by eq 'posterid') {
            $what += 0;
            my $u = LJ::load_userid($what);
            return $error->('<?_ml .error.noposterid _ml?>') unless $u;
            $title = BML::ml( ".view.byposterid.title", { user => $u->ljuser_display } );
            $title .= " (" . $u->{user} . ")" if $u->is_identity;
            $title .= " ($state)";

            # build some basic stats on what the account's activity
            # looks like, as requested by the antispam team

            my $num_comments_received = $u->num_comments_received;
            my $num_comments_posted = $u->num_comments_posted;
            my $num_entries_posted = $u->number_of_posts;

            $title .= "<br /><h6> ";

            $title .= BML::ml( '.view.poster.comments.posted', { posted_raw => $num_comments_posted, posted_comma => LJ::commafy( $num_comments_posted ) } ) . ", "
                if LJ::is_enabled( 'show-talkleft' ) && ( $u->is_personal || $u->is_identity );
            $title .= BML::ml( '.view.poster.comments.received', { received_raw => $num_comments_received, received_comma => LJ::commafy( $num_comments_received ) } ) . ", "
                unless $u->is_identity;
            $title .= BML::ml( '.view.poster.entries.posted', { entries_raw => $num_entries_posted, entries_comma => LJ::commafy( $num_entries_posted ) } )
                unless $u->is_identity;
            $title .= "</h6><br />";

        } elsif ($by eq 'poster') {
            my $u = LJ::load_user($what);
            return $error->('<?_ml .error.nouser _ml?>') unless $u;
            $title = BML::ml( ".view.byposter.title", { user => $u->ljuser_display } );
            $title .= " (" . $u->{user} . ")" if $u->is_identity;

            # Now just pretend that user used 'posterid'
            $by = 'posterid';
            $what = $u->{userid};
        } elsif ($by eq 'ip') {
            # check for right format x.x.x.x, not necessarily a valid IP
            return $error->('<?_ml .error.noip _ml?>') if $what !~ /^\d+\.\d+\.\d+\.\d+$/ or length $what > 15;
            $title = BML::ml( ".view.byip.title", { ip => $what, state => $state} );
        }

        # see if we should call a hook for extra actions?
        $body .= LJ::Hooks::run_hook('spamreport_notification', $remote, { $by => $what })
            if $state eq 'open' && $by eq 'posterid';

        # now the general info gathering
        my $res = $dbr->selectall_arrayref('SELECT reporttime, journalid, subject, body, ip, posttime, report_type, srid, client ' .
                                           "FROM spamreports WHERE state=? AND $by=? ORDER BY reporttime DESC LIMIT 1000",
                                            undef, $state, $what);
        unless ($res && @$res) {
            $body .= "<?_ml .view.noreports _ml?>";
            return undef;
        }
        $body .= '<table summary="">';
        my @srids;
        foreach (@$res) {
            my $u2 = LJ::load_userid($_->[1]);
            my $x = $by eq 'ip' ? 4 : 1;
            my $comment_body = $_->[3];
            LJ::text_uncompress(\$comment_body);
            my $spamlocation = ucfirst($_->[6]);
            my $srid = $_->[7];
            $body .= '<tr><td>' .  ($state eq 'open' ? $dellink->([$srid], BML::ml('.report.individual.close')) : '') . '</td><td>' .
                     "<strong>" . BML::ml(".report.individual.in", { spamlocation => $spamlocation } ) . "</strong>" . LJ::ljuser($u2) . '<br />' .
                     '<strong>'. BML::ml(".report.individual.reporttime") . '</strong> ' . LJ::mysql_time($_->[0]) . '<br />' .
                     "<strong>" . BML::ml(".report.individual.spamtime", { spamlocation => $spamlocation } ) . "</strong> " .  ($_->[5] ? LJ::mysql_time($_->[5]) : BML::ml(".report.individual.spamtime.notrecorded")) . '<br />' .
                     '<strong>' . '<?_ml.report.individual.client _ml?>' . '</strong> ' . LJ::ehtml( $_->[8] || "" ) . '<br />' .
                     '<strong>' . '<?_ml .report.individual.subject _ml?>' . '</strong> ' . LJ::ehtml($_->[2] || BML::ml('.report.individual.subject.none')) . '<br />' .
                     '<strong>' . '<?_ml .report.individual.body _ml?>' . '</strong> ' . LJ::ehtml($comment_body || BML::ml('.report.individual.body.none')) . '<br />' .
                     '</td></tr><tr><td>&nbsp;</td></tr>';
            push @srids, $srid;
        }

        # add quick sysban links for ease
        my $extra = "";
        if ($by eq "ip") {
            my $reason = LJ::Sysban::populate_full_by_value( $what, 'talk_ip_test' );
            if ( $reason && $reason->{talk_ip_test} ) {
                $extra = "<strong><?_ml .report.individual.sysban.done _ml?></strong>";
                if ( $remote->has_priv( 'sysban' ) ) {
                    $extra .= "<br/><textarea name='sysban_note' rows='3' cols='60' readonly='1'>" . LJ::ehtml( $reason->{talk_ip_test}->{note} || "<?_ml .report.individual.syban.nonote _ml?>" ) . "</textarea>";
                }
            } elsif ( $remote && $remote->has_priv( 'sysban', 'talk_ip_test' ) ) {
                $extra = LJ::html_check({name => "sysban_ip", value => $what, label => BML::ml( ".report.individual.sysban.ip" )});
                $extra .= "<br/><textarea name='sysban_note' rows='3' cols='60'> ~" . LJ::ehtml( $remote->username . " @ " . LJ::mysql_time() ) . "</textarea>";
            }
        }

        $body .= "</table><br />" . ($state eq 'open' ? $dellink->(\@srids, 'Close All', $extra) : $extra);

    } elsif ($mode =~ /^del/) {
        # figure out our combination
        my $dbh =  LJ::get_db_writer();
        return $error->("Unable to get database writer handle.") unless $dbh;
        my ($sql, $count, $backlink);

        my @srids = split(',', $POST{srids});
        my $in = join("','", map { $_+0 } @srids);
        $in = "'$in'";

        if ( $POST{sysban_ip} && $remote && $remote->has_priv( 'sysban', "talk_ip_test" ) && ! LJ::Sysban::validate( "talk_ip_test", $POST{sysban_ip} ) ) {
            LJ::Sysban::create( what => 'talk_ip_test', value => $POST{sysban_ip}, bandays => 0, note => ( $POST{sysban_note} || '<?_ml .reports.individual.sysban.anon _ml?>' ) );
        }

        $count = $dbh->do("UPDATE spamreports SET state='closed' WHERE srid IN($in) AND state='open'");
        return $error->($dbh->errstr) if $dbh->err;
        $backlink = "[ <a href='$POST{ret}'>&lt;&lt; <?_ml .nav.goback _ml?></a> ]";

        $title = "<?_ml .reports.close _ml?>";
        $body .= "<?p [ <a href=\"spamreports\">&lt;&lt; <?_ml .nav.frontpage _ml?></a> ] $backlink p?>\n";

        my $s = $count == 1 ? '' : 's';
        $body .= $count > 0 ? BML::ml(".reports.close.closed", {count => $count}) . "\n" : "<?_ml .reports.close.done _ml?>";

    } else {
        # standard
        my %modes = (top10user => '<?_ml .top10user.label _ml?>', top10ip => '<?_ml .top10ip.label _ml?>', tlast10 => '<?_ml .tlast10.label _ml?>',
                     last01hr => '<?_ml .tlasthrs.01.label _ml?>', last06hr => '<?_ml .tlasthrs.06.label _ml?>', last24hr => '<?_ml .tlasthrs.24.label _ml?>');
        $body .= "<?p <?_ml .reports.available _ml?> p?>\n<ul>";
        foreach (sort keys %modes) {
            $body .= "<li><a href=\"spamreports?mode=$_\">$modes{$_}</a>";
            if ($_ =~ /last/) {
                # this is a last view, so we have other options
                $body .= " [<a href=\"spamreports?mode=${_}_u\"><?_ml .reports.users _ml?></a>, ";
                $body .= "<a href=\"spamreports?mode=${_}_a\"><?_ml .reports.anon _ml?></a>]";
            }
            $body .= "</li>";
        }
        $body .= qq{<li><form method="GET" action="spamreports" style="display: inline; margin: 0;">
            <label for="repu"><?_ml .reports.user.individual _ml?>
                <input type="text" name="what" size="25" maxlength="25" id="repu" />
                <input type="hidden" name="by" value="poster" />
                <input type="hidden" name="mode" value="view" />
            </label></form></li>
        };
        $body .= "</ul>\n<?p <?_ml .reports.select _ml?> p?>";
    }

    # now spit out the requested table
    return unless @headers;
    $body .= "<?p [ <a href=\"spamreports\">&lt;&lt; <?_ml .nav.frontpage _ml?></a> ] p?>";
    $body .= "<table width=\"50%\">\n<thead><tr>";
    $body .= "<th align=\"center\">$_</th>" foreach @headers;
    $body .= "</tr></thead>\n";
    foreach (@rows) {
        $body .= "<tr>";
        $body .= "<td align=\"center\">$_</td>" foreach @$_;
        $body .= "</tr>\n";
    }
    $body .= "</table>\n";

    return;
}
_code?><?page
title=><?_code return $title; _code?>
windowtitle=><?_code return LJ::strip_html( $title ); _code?>
body=><?_code return $body; _code?>
page?>
