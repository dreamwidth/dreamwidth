<?_c
#
# theschwartz.bml
#
# Shows statistics and information on the TheSchwartz queue.
#
# Authors:
#      Mark Smith <mark@dreamwidth.org>
#
# Copyright (c) 2009 by Dreamwidth Studios, LLC.
#
# This program is free software; you may redistribute it and/or modify it under
# the same terms as Perl itself. For a copy of the license, please reference
# 'perldoc perlartistic' or 'perldoc perlgpl'.
#
_c?><?page
body<=
<?_code
{
    use strict;
    use vars qw/ %GET %POST $title $windowtitle $headextra @errors @warnings /;

    # translated/custom page title can go here
    $title = "TheSchwartz Queue/Admin Page";

    # for pages that require authentication
    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    # and check priv
    return "You must have the siteadmin:theschwartz privilege for this page."
        unless $remote->has_priv( siteadmin => 'theschwartz' );

    # of course, if TheSchwartz is off...
    my $sch = LJ::theschwartz()
        or return "Unable to get TheSchwartz worker.  Is it enabled?";

    my $ret = '';

    # okay, this is really hacky, and I apologize in advance for inflicting this
    # on the codebase.  but we have no way of really getting into the database used
    # by TheScwartz without this manual hackery... also, this requires that we not
    # be using roled TheSchwartz, or multiple (undefined results)
    #
    # FIXME: this can be so much better.
    return "Site configuration is not valid for using this tool."
        if scalar( grep { defined $_->{role} } @LJ::THESCHWARTZ_DBS ) > 0 ||
           scalar( @LJ::THESCHWARTZ_DBS ) > 1;

    # do manual connection
    my $db = $LJ::THESCHWARTZ_DBS[0];
    my $dbr = DBI->connect( $db->{dsn}, $db->{user}, $db->{pass} )
        or return "Unable to manually connect to TheSchwartz database.";

    # gather status on jobs in the queue
    my $jobs = $dbr->selectall_arrayref(
        q{SELECT j.jobid, f.funcname,
                 FROM_UNIXTIME(j.insert_time), j.insert_time,
                 FROM_UNIXTIME(j.run_after), j.run_after,
                 FROM_UNIXTIME(j.grabbed_until), j.grabbed_until,
                 j.priority
          FROM job j, funcmap f
          WHERE f.funcid = j.funcid
          ORDER BY j.insert_time}
    );
    return "Failed to retrieve outstanding job list: " . $dbr->errstr . "."
        if $dbr->err;

    # dump the output
    $ret .= "<?h2 Outstanding Jobs h2?>";
    if ( $jobs && @$jobs ) {
        $ret .= "<ul>";
        foreach my $job ( @$jobs ) {
            my ( $jid, $fn, $it, $r_it, $ra, $r_ra, $gu, $r_gu, $pr ) = @$job;

            my $ago_it = LJ::diff_ago_text( $r_it );
            my $ago_ra = LJ::diff_ago_text( $r_ra );

            my $state;
            if ( !$r_ra && !$r_gu ) {
                $state = 'queued';
            } elsif ( $r_gu ) {
                if ( $r_ra ) {
                    $state = 'retrying';
                } else {
                    $state = 'running';
                }
            } elsif ( $r_ra && !$r_gu ) {
                if ( $r_ra < time ) {
                    $state = 'failed at least once, will retry very soon';
                } else {
                    $state = 'failed at least once, will retry in ' . $ago_ra;
                    $state =~ s/\s?ago\s?//; # heh
                }
            } else {
                $state = 'UNKNOWN';
            }

            $pr ||= 'undefined';

            $ret .= "<li>#$jid <strong>$it [$ago_it]</strong> in <em>$fn</em><br />State: <strong>$state</strong>, priority $pr.";
            $ret .= "<br />&nbsp;</li>";
        }
        $ret .= "</ul>";
    } else {
        $ret .= "<?p No outstanding jobs. p?>";
    }

    # gather some status on the last 100 errors.
    my $errs = $dbr->selectall_arrayref(
        q{SELECT e.jobid, FROM_UNIXTIME(e.error_time), f.funcname, e.message
          FROM error e, funcmap f
          WHERE f.funcid = e.funcid
          ORDER BY e.error_time DESC
          LIMIT 100}
    );
    return "Failed to retrieve recent error list: " . $dbr->errstr . "."
        if $dbr->err;

    # gather some output
    $ret .= "<?h2 Recent Errors h2?>";
    if ( $errs && @$errs ) {
        $ret .= "<ul>";
        foreach my $err ( @$errs ) {
            $ret .= "<li>#$err->[0] <strong>$err->[1]</strong> in <em>$err->[2]</em><br />$err->[3]<br />&nbsp;</li>\n";
        }
        $ret .= "</ul>";
    } else {
        $ret .= "<?p No recent errors. p?>";
    }

    return $ret;
}
_code?>
<=body
title=><?_code return $title; _code?>
head<=
<?_code return $headextra; _code?>
<=head
page?>
