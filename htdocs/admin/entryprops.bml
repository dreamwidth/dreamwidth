<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
body<=
<?_code
{
    # this is for viewing the properties set on a particular entry
    use strict;
    use vars qw($ret %POST);
    use DW::External::Account;

    my $remote = LJ::get_remote();
    my @display_privs = ( "canview:entryprops", "canview:*" );
    my $numprivs = @display_privs;

    return BML::ml( "admin.noprivserror", { numprivs => $numprivs, needprivs => "<b>" . join(", ", @display_privs) . "</b>"} )
        unless $LJ::IS_DEV_SERVER || ( $remote && $remote->has_priv( "canview", "entryprops" ) );

    $ret .= "<form method='POST'>";
    $ret .= "View properties for URL: ";
    $ret .= LJ::html_text({name => 'url', maxlength => '100', size => '50'});
    $ret .= LJ::html_submit(value => "View");
    $ret .= "</form>";
    $ret .= "<?hr?>";

    my $entry = LJ::Entry->new_from_url($POST{url});
    unless ($entry && $entry->valid) {
        $ret .= LJ::error_list("$POST{url} is not a valid entry URL.") if LJ::did_post();
        return $ret;
    }

    # WE HAEV ENTRY!!

    my $subject;
    if ($entry->visible_to($remote)) {
        $subject = $entry->subject_html ? $entry->subject_html : "<em>no subject</em>";
    } else {
        $subject = "<em>hidden</em>";
    }

    my $security = $entry->security;
    if ($security eq "usemask") {
        if ($entry->allowmask == 1) {
            $security = "friends";
        } else {
            $security = "custom";
        }
    }

    my $pu = $entry->poster;

    $ret .= "<strong>Subject</strong>: <a href=" . $entry->url . ">" . $subject . "</a><br />";
    $ret .= "<strong>Poster</strong>: " . $pu->ljuser_display . "<br />";
    $ret .= "<strong>Journal</strong>: " . $entry->journal->ljuser_display . "<br />";
    $ret .= "<strong>Security</strong>: " . $security . " ";
    $ret .= "(journal wide minsecurity: " . ($entry->journal->prop("newpost_minsecurity") || "public") . ")<br />";
    $ret .= "<strong>User Date/Time</strong>: " . $entry->eventtime_mysql . "<br />";
    $ret .= "<strong>Server Date/Time</strong>: " . $entry->logtime_mysql . "<br />";
    $ret .= "<strong>Journal Adult Content</strong>: " . ( $entry->journal->adult_content || "none" ) . "<br />";

    $ret .= "<br />";

    my %props = %{$entry->props || {}};
    return $ret unless %props;

    $ret .= "<ul>";
    foreach my $prop (sort keys %props) {
        my $extra = "";
        if (my $p = LJ::get_prop("log", $prop)) {
            # an ugly hack, i know
            $props{$prop} = LJ::mysql_time($props{$prop}) if $p->{des} =~ /unix/i;
            
            # render xpost prop into human readable form
            if ( $prop eq "xpost" || $prop eq "xpostdetail" ) {
                my %external_accounts_map = map { $_->acctid => $_->servername . ( $_->active ? "" : " (deleted)" ) } DW::External::Account->get_external_accounts( $pu, show_inactive => 1 );

                # FIXME: temporary; trying to figure out when this is undef
                my $xpost_prop = $props{$prop};
                my $xpost_hash = DW::External::Account->xpost_string_to_hash( $props{$prop} );
                my %xpost_map = %{ $xpost_hash || {} };

                if ( $prop eq "xpost" ) {
                    $props{$prop} = join ", ", map { ( $external_accounts_map{$_} || "unknown" ) . " => $xpost_map{$_}" } keys %xpost_map;
                    $p->{des} .= " (site name => itemid)";
                } else {
                    $props{$prop} = join ", ", map { ( $external_accounts_map{$_} || "unknown" ) . " => { $xpost_map{$_}->{itemid}, $xpost_map{$_}->{url} }" } keys %xpost_map;
                    $p->{des} .= " (site name => { itemid, url })";
                }

                # FIXME: temporary
                $props{$prop} .= "raw information about $prop - <input type='text' value='$xpost_prop' />" 
                    unless $xpost_hash;
            } elsif ( $prop eq 'picture_mapid' && $pu->userpic_have_mapid ) {
                my $result = "$props{$prop} -> ";
                my $kw = $pu->get_keyword_from_mapid( $props{$prop},
                            redir_callback => sub {
                                $result .= "$_[2] -> ";
                            });
                $result .= $kw;
                my $picid = $pu->get_picid_from_keyword($kw,-1);
                if ( $picid == -1 ) {
                    $result .= " ( not assigned to an icon )";
                } else {
                    $result .= " ( assigned to an icon )";
                }
                $props{$prop} = $result;
            }

            $extra = "<br /><small>$p->{des}</small>";
        }

        $ret .= "<li><strong>$prop</strong>: $props{$prop}$extra</li><br />";
    }
    $ret .= "</ul>";

    return $ret;
}
_code?>
<=body
title=>Entry Properties
<=body
page?>
