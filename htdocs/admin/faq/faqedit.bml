<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?_info
nocache=>1
_info?><?page
title=><?_code return $FORM{'id'} ? "Edit FAQ Item #$FORM{'id'}" : "Add to FAQ"; _code?>
body<=
<center>
<a href="./"><b>(Back to FAQ Index)</b></a>
</center>

<?_code
{
    use strict;

    my $id = $FORM{id} + 0;
    my $rev = $FORM{rev} + 0;
    my $ret = "";

    my $dbh = LJ::get_db_writer();
    my $remote = LJ::get_remote();

    my @display_privs = ( "faqadd", "faqedit" );
    my $numprivs =  @display_privs;

    my $sth;

    return "<?needlogin?>" unless $remote;

    return BML::ml( "admin.noprivserror", { numprivs => $numprivs, needprivs => "<b>" . join(", ", @display_privs) . "</b>"} )
        unless $remote->has_priv( "faqadd" ) || $remote->has_priv( "faqedit" );

    my %ac_add  = $remote->priv_args( "faqadd" );
    my %ac_edit = $remote->priv_args( "faqedit" );

    my $faqd = LJ::Lang::get_dom( "faq" );
    my $rlang = LJ::Lang::get_root_lang( $faqd );
    my ( $faqcat, $sortorder, $question, $summary, $answer, $has_summary );

    if ( $id != 0 ) {
        my $faq = LJ::Faq->load( $id, lang => $rlang->{lncode}, rev => $rev );

        if ( ! $faq ) {
            $ret .= "<b>Error:</b> FAQ #$id does not exist.";

            $ret .= '<?h1 Version history h1?>';
            $ret .= '<form action="faqedit" method="get">';
            $ret .= '<input type="hidden" name="id" value="' . $id . '"/>';
            $ret .= '<p>Revisions: ';

            $sth = $dbh->prepare( 'SELECT rev, lastmodtime, lastmoduserid FROM faqhist WHERE faqid = ? ORDER BY rev DESC' );
            $sth->execute($id);
            my @revs;

            while ( my ($rev, $modtime, $moduser) = $sth->fetchrow_array ) {
                my $u = LJ::load_userid( $moduser );
                my $opt_display = $modtime . ' (' . $u->display_name . ')';
                push @revs, $rev, $opt_display;
            }

            if ( $rev == 0 ) {
                $ret .= LJ::html_select( { name => 'rev' }, @revs );
            } else {
                $ret .= LJ::html_select( { name => 'rev', selected => $rev}, @revs );
            }
            $ret .= '&nbsp;';
            $ret .= LJ::html_submit( 'Load' );
            $ret .= '</p></form>';

            return $ret;
        }

        $faqcat = $faq->faqcat;
        $sortorder = $faq->sortorder;
        $question = $faq->question_raw;
        $summary = $faq->summary_raw;
        $answer = $faq->answer_raw;
        $has_summary = $faq->has_summary;
        unless ( $ac_edit{'*'} || $ac_edit{''} || $ac_edit{$faqcat} ) {
            if ( %ac_edit ) {
                return "<b>Error: </b> You do not have access to edit a FAQ question in the \"$faqcat\" category.";
            } else {
                return "<b>Error: </b> You do not have access to edit the FAQ.";
            }
        }
    } else {
        return "<b>Error: </b> You do not have access to add to the FAQ."
            unless %ac_add;
    }

    $sortorder += 0;
    $sortorder ||= 50;

    if ( LJ::did_post() ) {
        $question = $FORM{q};
        # If summary is disabled or not present, pretend it was unchanged
        $summary = $FORM{s}
            if LJ::is_enabled( 'faq_summaries' ) && defined $FORM{s};
        $answer = $FORM{a};
        $faqcat = $FORM{faqcat};
        $sortorder = $FORM{sortorder} + 0 || 50;

        if ( $POST{'action:save'} ) { # Save FAQ
            return "<b>$ML{'Error'}</b> $ML{'error.invalidform'}"
                unless LJ::check_form_auth();

            # severity options are deprecated - always use 0
            my $opts_question = { changeseverity => 0 };
            my $opts_summary = { changeseverity => 0 };
            my $opts_answer = { changeseverity => 0 };
            my $do_trans = sub {
                my $id = shift;
                return unless $faqd;
                LJ::Lang::set_text( $faqd->{dmid}, $rlang->{lncode},
                                    "$id.1question", $question,
                                    $opts_question );
                LJ::Lang::set_text( $faqd->{dmid}, $rlang->{lncode},
                                    "$id.3summary", $summary, $opts_summary )
                    if LJ::is_enabled( 'faq_summaries' );
                LJ::Lang::set_text( $faqd->{dmid}, $rlang->{lncode},
                                    "$id.2answer", $answer, $opts_answer );
            };

            if ( $id == 0 ) {
                $dbh->do( qq{ INSERT INTO faq
                              ( faqid, question, summary, answer, faqcat,
                                sortorder, lastmoduserid, lastmodtime)
                              VALUES (NULL, ?, ?, ?, ?, ?, ?, NOW()) },
                          undef, $question, $summary, $answer, $faqcat,
                          $sortorder, $remote->{userid} );
                $id = $dbh->{mysql_insertid};
                $dbh->do( qq{ INSERT INTO faqhist
                              ( rev, faqid, question, summary, answer, faqcat,
                                sortorder, lastmoduserid, lastmodtime)
                              VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, NOW()) },
                          undef, $id, $question, $summary, $answer, $faqcat,
                          $sortorder, $remote->{userid} ) unless $dbh->errstr;
                $ret .= $dbh->errstr || "Added FAQ item. All good. FAQ id is <b><a href='$LJ::SITEROOT/support/faqbrowse?faqid=$id'>$id</a></b>";

                $opts_question->{childrenlatest} = 1;
                $opts_summary->{childrenlatest} = 1;
                $opts_answer->{childrenlatest} = 1;
                $do_trans->( $id ) if $id;
            } elsif ( $question =~ /\S/ ) {
                # If summaries are disabled or it's missing in the form,
                # $summary will still contain the previous summary, so there's
                # no need to special-case the update.
                $dbh->do( qq{ UPDATE faq SET question=?, summary=?, answer=?,
                                             faqcat=?, lastmoduserid=?,
                                             lastmodtime=NOW(), sortorder=?
                                         WHERE faqid=? },
                          undef, $question, $summary, $answer, $faqcat,
                          $remote->{userid}, $sortorder, $id );
                $dbh->do( qq{ INSERT INTO faqhist
                              ( rev, faqid, question, summary, answer, faqcat,
                                sortorder, lastmoduserid, lastmodtime)
                              VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, NOW()) },
                          undef, $id, $question, $summary, $answer, $faqcat,
                          $sortorder, $remote->{userid} ) unless $dbh->errstr;
                $ret .= $dbh->errstr || "Updated FAQ item. All good. FAQ id is <b><a href='$LJ::SITEROOT/support/faqbrowse?faqid=$id'>$id</a></b>";

                $do_trans->( $id );
            } else {
                $dbh->do( "DELETE FROM faq WHERE faqid=?", undef, $id );
                $dbh->do( qq{ INSERT INTO faqhist
                              ( rev, faqid, question, summary, answer, faqcat,
                                sortorder, lastmoduserid, lastmodtime)
                              VALUES (NULL, ?, NULL, NULL, NULL, NULL, NULL, ?, NOW()) },
                          undef, $id, $remote->{userid} ) unless $dbh->errstr;
                $ret .= $dbh->errstr || "FAQ item deleted.";

                # FIXME: delete translation from ml_* ?
            }

            return $ret;
        }

        if ( $POST{'action:preview'} ) { # Preview FAQ
            # FIXME: make lastmodtime look more like in LJ::Faq->load
            my $fake_faq
                = LJ::Faq->new( faqid => $id, question => $question,
                                summary => $summary, answer => $answer,
                                faqcat => $faqcat, lang => $rlang->{lncode},
                                lastmoduserid => $remote->{userid},
                                sortorder => $sortorder, unixmodtime => time,
                                lastmodtime => scalar gmtime );

            # Get remote username and journal URL, or example user's username
            # and journal URL
            my ( $user, $user_url );
            if ( $remote ) {
                $user = $remote->user;
                $user_url = $remote->journal_base;
            } else {
                my $u = LJ::load_user( $LJ::EXAMPLE_USER_ACCOUNT );
                $user = $u
                    ? $u->user
                    : "<b>[Unknown or undefined example username]</b>";
                $user_url = $u
                    ? $u->journal_base
                    : "<b>[Unknown or undefined example username]</b>";
            }

            $fake_faq->render_in_place( { user => $user, url => $user_url } );
            # Always display answer. (Except if hook says not to - see below)
            my $display_answer = 1;
            # Display summary if enabled and present.
            my $display_summary = $fake_faq->has_summary
                                  && LJ::is_enabled( 'faq_summaries' );

            # escape question
            # FIXME: do we still need to check for \n? Did we ever?
            my $q_html
                = LJ::html_newlines( LJ::trim( $fake_faq->question_html ) );

            # Clean this as if it were an entry, but don't allow lj-cuts
            my $s_html = $fake_faq->summary_html;
            LJ::CleanHTML::clean_event( \$s_html, { ljcut_disable => 1 } )
                if $display_summary;
            my $a_html = $fake_faq->answer_raw;
            LJ::CleanHTML::clean_event( \$a_html, { ljcut_disable => 1 } )
                if $display_answer;

            # run hook to transform the text of this FAQ before it's rendered
            # FIXME: hook is responsible for clean-up if it changes $display_*
            # from false to true. Should that be checked/enforced here instead?
            # FIXME: do we even need that hook? It looks like LJ only ever used
            # it to add stuff to LJ Talk FAQs, for Gizmo sponsorship.
            LJ::Hooks::run_hook( "faq.$id.transform", $remote, answer => \$a_html,
                          question => \$q_html, summary => \$s_html,
                          display_summary => \$display_summary,
                          display_answer => \$display_answer )
                if LJ::Hooks::are_hooks( "faq.$id.transform" );

            # display output
            $ret .= "<hr /><?h1 $q_html h1?>";
            $ret .= "<div style='margin-left: 20px;'>";
            $ret .= "<div name='summary' id='summary'>$s_html</div><br />"
                if $display_summary;

            $ret .= "<div id='answer' name='answer'>$a_html</div>"
                if $display_answer;

            $ret .= "</div>";

            # FIXME: lastmodtime and lastmodwho should be vars in .lastupdated
            # Also, using the string in htdocs/support/faqbrowse.bml.text for
            # now, but this may change (either duplicate it here, or remove it
            # altogether, since $remote presumably knows who they are and what
            # time it is).
            $ret .= "<p align='right'><b>$ML{'/support/faqbrowse.bml.lastupdated'}</b><br />"
                . $fake_faq->lastmodtime . " (" . $remote->user . ")</p><hr />";
        }
        # Fall through to form
    }

    $ret .= "<form action='faqedit' method='post'>";
    $ret .= LJ::form_auth();
    $ret .= LJ::html_hidden( 'id', $id );
    $ret .= "<p>Category: ";

    $sth = $dbh->prepare( "SELECT faqcat, faqcatname FROM faqcat ORDER BY catorder" );
    $sth->execute;
    my @cats;
    push @cats, '', '';

    while ( my ($fc, $fcname) = $sth->fetchrow_array ) {
        # $fc can't be NULL/undef
        push @cats, $fc, $fcname
            if $ac_add{'*'} || $ac_add{$fc} || $fc eq $faqcat;
    }

    $ret .= LJ::html_select( { name => 'faqcat', selected => $faqcat }, @cats );

    $ret .= "&nbsp;SortOrder: ";
    $ret .= LJ::html_text( { name => 'sortorder', value => $sortorder,
                             size => 5, maxlength => 4 } );

    $ret .= "<br><i>(sort order is how to sort within the category.  categories themselves are also sorted.)</i></p>";

    $ret .= "<?h1 Question h1?> <?p (as brief as possible, do not span multiple lines) p?><p>";

    $ret .= LJ::html_textarea( { name => 'q', value => $question,
                                 rows => 2, cols => 70, wrap => 'soft' } );
    $ret .= "<br /><i>(erase question to delete FAQ entry)</i></p>";

    if ( LJ::is_enabled( 'faq_summaries' ) || $has_summary ) {
        # If FAQ has summary and summaries are disabled, leave field in, but
        # make it read-only to let FAQ editors copy from it.
        my $readonly = !LJ::is_enabled( 'faq_summaries' );
        $ret .= "<?h1 Summary h1?> <?p (should be a shortish paragraph, urls are automatically linked, same markup as journal entries, no lj-cut) p?><p>";

        $ret .= LJ::html_textarea( { name => 's', value => $summary,
                                     rows => '10', cols => '70',
                                     wrap => 'soft', disabled => $readonly } );
        $ret .= "</p>";
    }

    $ret .= "<?h1 Answer h1?> <?p (long as you want, urls are automatically linked, same markup as journal entries, no lj-cut) p?><p>";

    $ret .= LJ::html_textarea( { name => 'a', value => $answer,
                                 rows => '15', cols => '70', wrap => 'soft' } );
    $ret .= "</p>";

    $ret .= "<p>" . LJ::html_submit( 'action:save', 'Add/Edit FAQ Item' );
    $ret .= " " . LJ::html_submit( 'action:preview', 'Preview FAQ Item' )
            . "</p></form>";

    if ( $id != 0 ) {
        $ret .= '<?h1 Version history h1?>';
        $ret .= '<form action="faqedit" method="get">';
        $ret .= '<input type="hidden" name="id" value="' . $id . '"/>';
        $ret .= '<p>Revisions: ';

        $sth = $dbh->prepare( 'SELECT rev, lastmodtime, lastmoduserid FROM faqhist WHERE faqid = ? ORDER BY rev DESC' );
        $sth->execute($id);
        my @revs;

        while ( my ($rev, $modtime, $moduser) = $sth->fetchrow_array ) {
            my $u = LJ::load_userid( $moduser );
            my $opt_display = $modtime . ' (' . $u->display_name . ')';
            push @revs, $rev, $opt_display;
        }

        if ($rev == 0) {
            $ret .= LJ::html_select( { name => 'rev' }, @revs );
        } else {
            $ret .= LJ::html_select( { name => 'rev', selected => $rev}, @revs );
        }
        $ret .= '&nbsp;';
        $ret .= LJ::html_submit( 'Load' );
        $ret .= '</p></form>';
    }

    return $ret;
}
_code?>

<=body
page?>
