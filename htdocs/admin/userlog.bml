<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=>User Log Viewer
head<=
<style>
<!--
td.logrow {
    border: solid 1px rgb(230,230,230);
    padding: 2px;
    margin: 0px;
}
th.logrow {
    border: solid 1px rgb(180,180,180);
    padding: 2px;
    margin: 0px;
    text-weight: bold;
}
-->
</style>
<=head
body<=
<?_code
{
    use strict;
    use vars qw($GET $POST);

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $err = sub {
        return "<?h1 Error h1?><?p $_[0] p?>";
    };

    my @displayprivs = ( "canview:userlog", "canview:*" );
    my $numprivs = @displayprivs;

    return BML::ml("admin.noprivserror", { numprivs => $numprivs, needprivs => "<b>" . join(", ", @displayprivs) . "</b>"} )
        unless $remote && $remote->has_priv( 'canview', 'userlog' );

    my $user = LJ::canonical_username($POST{user} || $GET{user});

    my $ret = <<FORM;
<form method='post' action='userlog'>
Username: <input type='text' name='user' value='$user' maxlength='25' size='25' /> <input type='submit' value='View' />
</form>
FORM
    return $ret unless $user;

    my $u = LJ::load_user($user);
    return $err->("User does not exist.")
        unless $u;

    return $err->("User is deleted and purged.")
        if $u->is_expunged;

    my $dbcr = LJ::get_cluster_reader($u);
    return $err->("Unable to get user cluster reader.")
        unless $dbcr;

    my $sth = $dbcr->prepare('SELECT * FROM userlog WHERE userid = ? ORDER BY logtime DESC LIMIT 10000');
    $sth->execute($u->{userid});
    return $err->("Database error: " . $sth->errstr)
        if $sth->err;

    $ret .= "<?p Latest log entries for " . LJ::ljuser($u) . ". p?>";
    $ret .= "<table style='border: solid 1px black; width: 95%;'>\n";
    $ret .= "<thead><tr>";
    $ret .= join('', map { "<th class='logrow'>$_</th>" } ("Date and Time", "Action", "Initiator", "IP Address", "Uniq Cookie"));
    $ret .= "</tr></thead>\n";

    while (my $row = $sth->fetchrow_hashref) {
        my $extra = {};
        LJ::decode_url_string($row->{extra}, $extra);

        my $action = "Action undefined for: $row->{action}";
        if ($row->{action} eq 'delete_entry') {
            $action = "Deleted entry $row->{actiontarget} via $extra->{method}";
        } elsif ($row->{action} eq 'account_create') {
            $action = "Account created";
        } elsif ($row->{action} eq 'ban_set') {
            my $u = LJ::load_userid($row->{actiontarget});
            $action = "Banned " . LJ::ljuser($u) if $u;
        } elsif ($row->{action} eq 'ban_unset') {
            my $u = LJ::load_userid($row->{actiontarget});
            $action = "Unbanned " . LJ::ljuser($u) if $u;
        } elsif ($row->{action} eq 'friend_invite_sent') {
            $action = "Friend invite sent to $extra->{extra}";
        } elsif ($row->{action} eq 'maintainer_add') {
            my $u = LJ::load_userid($row->{actiontarget});
            $action = "Added maintainer " . LJ::ljuser($u) if $u;
        } elsif ($row->{action} eq 'maintainer_remove') {
            my $u = LJ::load_userid($row->{actiontarget});
            $action = "Removed maintainer " . LJ::ljuser($u) if $u;
        } elsif ($row->{action} eq 'emailpost') {
            $action = "User posted via email gateway";
        } elsif ($row->{action} eq 'emailpost_auth') {
            $action = "Generated new emailpost_auth. Auth revoked for older emails."
        } elsif ($row->{action} eq 'accountstatus') {
            my $path = "$extra->{old} -> $extra->{new}";
            $action = {
                    'V -> D' => "Account deleted",
                    'D -> V' => "Account undeleted",
                }->{$path} || "Account status changed ($extra->{old} to $extra->{new})";
        } elsif ($row->{action} eq 'password_change') {
            $action = "User changed password";
        } elsif ($row->{action} eq 'password_reset') {
            $action = "User reset password via lost password email";
        } elsif ($row->{action} eq 'email_change') {
            $action = "Email address changed to: $extra->{new}";
        } elsif ($row->{action} eq 'mass_privacy_change') {
            $action = "Entry privacy updated (from $extra->{s_security} to $extra->{e_security})";
            # TODO: parse out e_unixtime and s_unixtime and display?
        } elsif ($row->{action} eq 'delete_userpic') {
            $action = "Deleted userpic #$extra->{picid}";
        } elsif ( $row->{action} eq 'impersonated' ) {
            $action = "Was impersonated: " . LJ::ehtml( $extra->{reason} );
        } elsif ( $row->{action} eq 'impersonator' ) {
            my $u = LJ::load_userid( $row->{actiontarget} );
            $action = "Did impersonate on " . ( $u ? $u->ljuser_display : "(no target)" ) . ": " .  LJ::ehtml( $extra->{reason} );
        } elsif ( $row->{action} eq 'rename' ) {
            $action = "Renamed from '$extra->{from}' to '$extra->{to}'.";
            $action .= "<br />Deleted: $extra->{del}" if $extra->{del};
            $action .= "<br />Redirected: $extra->{redir}" if $extra->{redir};
        } elsif ( $row->{action} eq 'redirect' ) {
            $action = $extra->{action} eq "add" ? "Added redirect: $extra->{renamedto}" : "Removed redirect: $extra->{renamedto}";
        } elsif (my $info = LJ::Hooks::run_hook('userlog_rows', $row)) {
            $action = $info;
        } else {
            $action = "Unknown action ($row->{action})";
        }

        my $time = LJ::mysql_time($row->{logtime});

        my $actor;
        if ($row->{remoteid}) {
            my $u = LJ::load_userid($row->{remoteid});
            $actor = LJ::ljuser($u);
        } else {
            $actor = "<em>not recorded</em>";
        }

        my $ip = $row->{ip} || "<em>not recorded</em>";
        my $uniq = $row->{uniq} || "<em>not recorded</em>";

        $ret .= "<tr>" . join('', map { "<td class='logrow'>$_</td>" } ($time, $action, $actor, $ip, $uniq)) . "</tr>\n";
    }

    $ret .= "</table>";
    return $ret;
}
_code?>
<=body
page?>
