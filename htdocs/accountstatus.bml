<?_c
# This code was forked from the LiveJournal project owned and operated
# by Live Journal, Inc. The code has been modified and expanded by
# Dreamwidth Studios, LLC. These files were originally licensed under
# the terms of the license supplied by Live Journal, Inc, which can
# currently be found at:
#
# http://code.livejournal.org/trac/livejournal/browser/trunk/LICENSE-LiveJournal.txt
#
# In accordance with the original license, this code and all its
# modifications are provided under the GNU General Public License.
# A copy of that license can be found in the LICENSE file included as
# part of this distribution.
_c?>
<?page
title=><?_ml .title _ml?>
body<=
<?_code
{
    use strict;
    use vars qw(%GET %POST);

    LJ::set_active_crumb('acctstatus');

    my $remote = LJ::get_remote();
    return "<?needlogin?>" unless $remote;

    my $authas = $GET{'authas'} || $remote->{'user'};
    my $u = LJ::get_authas_user($authas);
    return LJ::bad_input($ML{'error.invalidauth'})
        unless $u;

    # visibility status name mappings
    my %statusvis = ( "V" => "$ML{'.journalstatus.select.activated'}",
                      "D" => "$ML{'.journalstatus.select.deleted'}" );
    if ($u->is_suspended) {
        %statusvis = ("S" => "$ML{'.journalstatus.select.suspended'}");
    }

    # process form submission
    if (LJ::did_post() && LJ::check_referer('/accountstatus.bml')) {
        my $ret;

        # This is not the same as $u->statusvis
        my $statusvis = $POST{'statusvis'};
        my $ok = sub {
            return "<?h1 $ML{'.header.success'} h1?>\n<?p " . $_[0] . " p?>";
        };

        my $dberr = sub {
            return "<?h1 $ML{'Error'} h1?>\n<?p " . $_[0] . " p?>";
        };

        return $dberr->($ML{'error.invalidform'})
            unless LJ::check_form_auth();

        # are they suspended?
        return LJ::bad_input($ML{'.error.nochange.suspend'})
            if $u->is_suspended;

        # are they expunged?
        return LJ::bad_input($ML{'.error.nochange.expunged'})
            if $u->is_expunged;

        # invalid statusvis
        return LJ::bad_input($ML{'.error.invalid'})
            unless $statusvis eq 'D' || $statusvis eq 'V';

        # no need to change?
        if ( $u->statusvis eq $statusvis ) {
            my $text = $u->is_community ?
                '.message.nochange.comm' : '.message.nochange';
            return $ok->(BML::ml( $text, {'statusvis' => $statusvis{$statusvis} }));
        }

        my $res = 0;

        my $ip = BML::get_remote_ip();

        my @date = localtime(time);
        my $date = sprintf("%02d:%02d %02d/%02d/%04d", @date[2,1], $date[3], $date[4]+1, $date[5]+1900);

        if ( $statusvis eq 'D' ) {

            $res = $u->set_deleted;

            $u->set_prop( delete_reason => $POST{'reason'} ? $POST{'reason'} : "" );

            if($res) {
                # sending ESN status was changed
                LJ::Event::SecurityAttributeChanged->new($u, {
                    action   => 'account_deleted',
                    ip       => BML::get_remote_ip(),
                    datetime => $date,
                })->fire;
            }
        } elsif ( $statusvis eq 'V' ) {
            ## Restore previous statusvis of journal. It may be different
            ## from 'V', it may be read-only, or locked, or whatever.
            my @previous_status = grep { $_ ne 'D' } $u->get_previous_statusvis;
            my $new_status = $previous_status[0] || 'V';
            my $method = {
                V => 'set_visible',
                L => 'set_locked',
                M => 'set_memorial',
                O => 'set_readonly',
                R => 'set_renamed',
            }->{$new_status};
            return $dberr->("Can't set status '$new_status'") unless $method;

            $res = $u->$method;

            $u->set_prop( delete_reason => "" );

            if($res) {
                LJ::Event::SecurityAttributeChanged->new($u ,  {
                    action   => 'account_activated',
                    ip       => BML::get_remote_ip(),
                    datetime => $date,
                })->fire;
            }
        }

        # error updating?
        return $dberr->($ML{'.error.db'})
            unless $res;

        # success
        $ret .= $u->is_community ? 
            $ok->(BML::ml('.message.success.comm', {'statusvis' => $statusvis{$statusvis} })) :
            $ok->(BML::ml('.message.success', {'statusvis' => $statusvis{$statusvis} }));

        if ( $statusvis eq 'D' ) {
            $ret .= $u->is_community ? 
                "<p>$ML{'.message.deleted.comm'}</p>" :
                "<p>" . BML::ml( '.message.deleted2', {
                                sitenameshort => $LJ::SITENAMESHORT
                            } ) . "</p>";

            if ( $u->is_person ) {
                # are they leaving any community maintainerless?
                my $cids = LJ::load_rel_target( $remote, "A" );
                my @warn_comm_ids;

                if ( $cids ) {
                    # verify there are visible maintainers for each community
                    foreach my $cid ( @$cids ) {
                        push @warn_comm_ids, $cid
                            unless
                                grep { $_->is_visible }
                                values %{ LJ::load_userids(
                                              @{ LJ::load_rel_user( $cid, 'A' ) }
                                          ) };
                    }

                    # and if not, warn them about it
                    if ( @warn_comm_ids ) {
                        my $commlist = '<ul>';
                        $commlist .= '<li>' . $_->ljuser_display . '</li>'
                            foreach values %{ LJ::load_userids( @warn_comm_ids ) };
                        $commlist .= '</ul>';

                        $ret .= '<?p ' . BML::ml( '.message.noothermaintainer',
                                { commlist => $commlist, aopts => "href='$LJ::SITEROOT/community/manage'",
                                  pagetitle => BML::ml( '/community/manage.bml.title2' ) } ) . 'p?>';
                    }
                }
            }

            # optional stuff that gets printed after deletion
            $ret .= LJ::Hooks::run_hook("accountstatus.bml_after_deletion", $u, \%POST);
        }

        return $ret;
    }

    # update form

    my $ret;

    # authas switcher form
    $ret .= "<form method='get' action='accountstatus'>\n";
    $ret .= LJ::make_authas_select($remote, { 'authas' => $GET{'authas'}, 'showall' => 1}) . "\n";
    $ret .= "</form>\n\n";

    my $getextra;
    $getextra = "?authas=$authas" unless $authas eq $remote->{'user'};
    $ret .= "<form method='post' action='accountstatus$getextra'>\n";
    $ret .= LJ::form_auth();

    if ($u->is_community) {
        $ret .= "<p>" . BML::ml( '.journalstatus.about.comm', 
            { sitenameshort => $LJ::SITENAMESHORT,
              commname => LJ::ljuser( $u->{user} )} ) . "</p>\n";
    } else {
        $ret .= "<p>" . BML::ml( '.journalstatus.about2', { sitenameshort => $LJ::SITENAMESHORT } ) . "</p>\n";
    }

    # only show this text to not-deleted OpenID accounts
    $ret .= "<?p $ML{'.delete.openid'} 'p?>"
        if $u->is_identity && $u->statusvis ne "D";

    $ret .= LJ::Hooks::run_hook("accountstatus_delete_text", $u);

    $ret .= "<div style='margin-left: 30px'>$ML{'.journalstatus.select.head'}\n";
    $ret .= LJ::html_select({ 'name' => 'statusvis', 'selected' => $u->statusvis },
                              map { $_, $statusvis{$_} }
                              reverse sort keys %statusvis) . "<br /><br />\n";

    $ret .= "$ML{'.reason.head'} " . LJ::html_text({
                            name => 'reason',
                            id => 'reason',
                            class => 'text',
                            value => $u->prop( 'delete_reason' ),
                            size => 50,
                            maxlength => 255,
                         }) . "<br />";
    my $text = $u->is_community ? '.reason.about.comm' : '.reason.about';
    $ret .= "<span style='font-size:smaller; font-style:italic;'>$ML{$text}<br /><br />\n";

    $ret .= LJ::html_submit(undef, $ML{'.btn.status'},
                            { 'disabled' => $u->is_suspended }) . "\n";
    $ret .= "</div>\n</form>\n";

    return $ret;
}
_code?>
<=body
page?>

