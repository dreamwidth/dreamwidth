

    [%# visually grouped properties. Allow nesting to only two levels %]
    [% IF type == "string[]" AND is_group < 2 %]
        [% IF prop.grouptype == "module" %]

            <td class='prop-grouped prop-[% prop.grouptype %]' colspan=2>
            [% FOREACH prop_in_group IN override %]

                [% IF grouped_prop_override.prop_in_group %]
                    [% prop_in_group = grouped_prop_override.prop_in_group %]
                    [% override_token = prop_in_group _ "_values" %]
                    [% overriding_values = grouped_prop_override.override_token %]
                [% END %]
                
                [% IF prop_in_group.match('opts_group') %]
                    [% has_opts = 1 %]
                    [% NEXT %]
                [% END %]
                [% output_prop_element( props.$prop_in_group, prop_in_group, u, style, theme, props, is_group + 1) %]
            [% END %]

            [% modulename = prop.name.remove('_group') %]

            <label for='[% modulename %]_show'>[% eall( prop.des ) %]</label>
            [% modulename_token = modulename _ "_opts_group" %]

            [% output_prop_element( props.$modulename_token, modulename_token, u, style, theme, props, is_group + 1  ) IF has_opts %]

            </td>
        [% ELSIF prop.grouptype == "moduleopts" %]
            <ul class='prop-moduleopts'>
            [% FOREACH prop_in_group IN override %]
                <li>[% output_prop_element( props.$prop_in_group, prop_in_group, u, style, theme, props, is_group + 1) %] 
            [% END %]
            </ul>
        [% ELSE %]

            <td class='prop-grouped prop-[% prop.grouptype %]' colspan=2><label class='prop-header'>[% eall( prop.des ) _ help_icon( "s2opt_$prop->{name}" ) %]</label>

            [% FOREACH prop_in_group IN override %]
                [% output_prop_element( props.$prop_in_group, prop_in_group, u, style, theme, props, is_group + 1 ) %] 
            [% END %]
            [% IF prop.note %]
                <ul class=''><li>[% eall(prop.note) %]</li></ul>
            [% END %]

            </td>
        
        [% END %]
    [% ELSIF prop.item('values') %]
        [% "<td class='prop-input'>" UNLESS is_group %]

        [%# take the list of allowed values, determine whether we allow custom values %]
        [%# and whether we have a value not in the list (possibly set through the layer editor) %]
        [%# if so, prepend custom values %]
        [% value_list.unshift( override, "Custom: $override") IF prop.allow_other && override.defined && NOT value_list.grep($override) %]

        [% form.select(
            'name' = name,
              'disabled' = !can_use,
              'selected' = override, 
              items = value_list,
        ) %]
        [% "<label>" _ eall( prop.des ) _ "</label>" IF is_group && prop.des %]
        [% "</td>" UNLESS is_group %]
    [% ELSIF type == "int" %]
        [% "<td class='prop-input'>" UNLESS is_group %]
        [% form.textbox(
            'name' = name,
            'disabled' = !can_use,
            'value' = override,
            'maxlength' = 5,
            'size' = 7,
        ) %]
        [% "<label>" _ eall( prop.des ) _ "</label>" IF is_group && prop.des %]
        [% "</td>" UNLESS is_group %]
    [% ELSIF type == "bool" %]
        [% "<td class='prop-check'>" UNLESS is_group %]
        [% UNLESS prop.obsolete %]
        [%  # can't be changed, so don't print %]

            [% form.checkbox( 
                'name' = name,
                'disabled' = !can_use,
                'selected' = override,
                'label' = prop.label,
                'id' = name,
            ) %]

            [%# force the checkbox to be submitted, if the user unchecked it %]
            [%# so that it can be processed (disabled) when handling the post %]

            [% IF can_use %]
                [% form.hidden(
                    'name' = name,
                     'value' = 0,
                ) %]
            [% END %]
        [% END %]

        [% "</td>" UNLESS is_group %]
    [% ELSIF type == "string" %]
        [% rows = prop.rows ? prop.rows + 0 : 0 %]
        [% cols = prop.cols ? prop.cols + 0 : 0 %]
        [% full = prop.full ? prop.full + 0 : 0 %]

        [% "<td class='prop-input'>" UNLESS is_group %]

        [% IF full > 0 %]
            [% form.textarea(
                'name' = name,
                'disabled' = !can_use,
                'value' = override,
                'rows' = "40",
                'cols' = "40",
                'style' = "width: 97%; height: 350px; ",
            ) %]
        [% ELSIF rows > 0 && cols > 0 %]
            [% form.textarea(
                'name' = name,
                'disabled' = !can_use,
                'value' = override,
                'rows' = rows,
                'cols' = cols,
            ) %]
        [% ELSE %]
            [% size = prop.item('size') || 30 %]
            [% maxlength = prop.maxlength || 255 %]
            [% form.textbox(
                'name' = name,
                'disabled' = !can_use
                'value' = override
                'maxlength' = maxlength
                'size' = size
            ) %]
                [% END %]
        [% "</td>" UNLESS is_group %]
    [% ELSIF type == "Color" %]
        [% "<td class='prop-color'>" UNLESS is_group %]
        [% form.color(
            'name' = name,
            'disabled' = !can_use,
            'default' = override,
            'des' = prop.des,
            'onchange' = "form_change();",
            'no_btn' = 1,
        ) %]
        [% "</td>" UNLESS is_group %]

        <td>[% eall(prop.des) _ help_icon("s2opt_" _ $name) %]</td>
    
    [% END %]

    [% help_icon('s2propoff', ' ') IF NOT can_use %]


