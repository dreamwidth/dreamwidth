#
# AUTO-GENERATED. DO NOT EDIT.
#

name: (deploy) workers

on:
  workflow_dispatch:
    inputs:
      service:
        type: choice
        description: Which service to deploy
        options:
        - ALL WORKERS (*)
        - birthday-notify
        - change-poster-id
        - codebuild-notifier
        - content-importer
        - content-importer-lite
        - content-importer-verify
        - directory-meta
        - distribute-invites
        - dw-esn-cluster-subs
        - dw-esn-filter-subs
        - dw-esn-fired-event
        - dw-esn-process-sub
        - dw-send-email
        - dw-sphinx-copier
        - embeds
        - esn-cluster-subs
        - esn-filter-subs
        - esn-fired-event
        - esn-process-sub
        - resolve-extacct
        - send-email-ses
        - spellcheck-gm
        - sphinx-copier
        - sphinx-search-gm
        - synsuck
      tag:
        type: string
        description: SHA256 to deploy (include "sha256:" prefix)
        required: true

env:
  REGION: us-east-1
  ECS_CLUSTER: dreamwidth
  CONTAINER_NAME: worker
  IMAGE_BASE: ghcr.io/dreamwidth/worker

jobs:
  deploy:
    if: github.repository == 'dreamwidth/dreamwidth'

    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: (birthday-notify) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'birthday-notify'
        id: render-worker-container-birthday-notify
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-birthday-notify-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (change-poster-id) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'change-poster-id'
        id: render-worker-container-change-poster-id
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-change-poster-id-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (codebuild-notifier) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'codebuild-notifier'
        id: render-worker-container-codebuild-notifier
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-codebuild-notifier-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (content-importer) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'content-importer'
        id: render-worker-container-content-importer
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-content-importer-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (content-importer-lite) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'content-importer-lite'
        id: render-worker-container-content-importer-lite
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-content-importer-lite-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (content-importer-verify) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'content-importer-verify'
        id: render-worker-container-content-importer-verify
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-content-importer-verify-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (directory-meta) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'directory-meta'
        id: render-worker-container-directory-meta
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-directory-meta-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (distribute-invites) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'distribute-invites'
        id: render-worker-container-distribute-invites
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-distribute-invites-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (dw-esn-cluster-subs) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'dw-esn-cluster-subs'
        id: render-worker-container-dw-esn-cluster-subs
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-dw-esn-cluster-subs-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (dw-esn-filter-subs) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'dw-esn-filter-subs'
        id: render-worker-container-dw-esn-filter-subs
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-dw-esn-filter-subs-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (dw-esn-fired-event) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'dw-esn-fired-event'
        id: render-worker-container-dw-esn-fired-event
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-dw-esn-fired-event-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (dw-esn-process-sub) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'dw-esn-process-sub'
        id: render-worker-container-dw-esn-process-sub
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-dw-esn-process-sub-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (dw-send-email) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'dw-send-email'
        id: render-worker-container-dw-send-email
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-dw-send-email-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (dw-sphinx-copier) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'dw-sphinx-copier'
        id: render-worker-container-dw-sphinx-copier
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-dw-sphinx-copier-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (embeds) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'embeds'
        id: render-worker-container-embeds
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-embeds-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (esn-cluster-subs) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'esn-cluster-subs'
        id: render-worker-container-esn-cluster-subs
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-esn-cluster-subs-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (esn-filter-subs) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'esn-filter-subs'
        id: render-worker-container-esn-filter-subs
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-esn-filter-subs-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (esn-fired-event) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'esn-fired-event'
        id: render-worker-container-esn-fired-event
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-esn-fired-event-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (esn-process-sub) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'esn-process-sub'
        id: render-worker-container-esn-process-sub
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-esn-process-sub-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (resolve-extacct) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'resolve-extacct'
        id: render-worker-container-resolve-extacct
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-resolve-extacct-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (send-email-ses) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'send-email-ses'
        id: render-worker-container-send-email-ses
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-send-email-ses-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (spellcheck-gm) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'spellcheck-gm'
        id: render-worker-container-spellcheck-gm
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-spellcheck-gm-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (sphinx-copier) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'sphinx-copier'
        id: render-worker-container-sphinx-copier
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-sphinx-copier-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (sphinx-search-gm) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'sphinx-search-gm'
        id: render-worker-container-sphinx-search-gm
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-sphinx-search-gm-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (synsuck) Render Amazon ECS task definition
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'synsuck'
        id: render-worker-container-synsuck
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ".github/workflows/tasks/worker-synsuck-service.json"
          container-name: ${{ env.CONTAINER_NAME }}
          image: "${{ env.IMAGE_BASE }}@${{ github.event.inputs.tag }}"

      - name: (birthday-notify) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'birthday-notify'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-birthday-notify.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-birthday-notify-service"

      - name: (change-poster-id) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'change-poster-id'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-change-poster-id.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-change-poster-id-service"

      - name: (codebuild-notifier) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'codebuild-notifier'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-codebuild-notifier.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-codebuild-notifier-service"

      - name: (content-importer) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'content-importer'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-content-importer.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-content-importer-service"

      - name: (content-importer-lite) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'content-importer-lite'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-content-importer-lite.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-content-importer-lite-service"

      - name: (content-importer-verify) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'content-importer-verify'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-content-importer-verify.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-content-importer-verify-service"

      - name: (directory-meta) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'directory-meta'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-directory-meta.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-directory-meta-service"

      - name: (distribute-invites) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'distribute-invites'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-distribute-invites.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-distribute-invites-service"

      - name: (dw-esn-cluster-subs) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'dw-esn-cluster-subs'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-dw-esn-cluster-subs.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-dw-esn-cluster-subs-service"

      - name: (dw-esn-filter-subs) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'dw-esn-filter-subs'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-dw-esn-filter-subs.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-dw-esn-filter-subs-service"

      - name: (dw-esn-fired-event) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'dw-esn-fired-event'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-dw-esn-fired-event.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-dw-esn-fired-event-service"

      - name: (dw-esn-process-sub) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'dw-esn-process-sub'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-dw-esn-process-sub.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-dw-esn-process-sub-service"

      - name: (dw-send-email) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'dw-send-email'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-dw-send-email.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-dw-send-email-service"

      - name: (dw-sphinx-copier) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'dw-sphinx-copier'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-dw-sphinx-copier.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-dw-sphinx-copier-service"

      - name: (embeds) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'embeds'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-embeds.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-embeds-service"

      - name: (esn-cluster-subs) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'esn-cluster-subs'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-esn-cluster-subs.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-esn-cluster-subs-service"

      - name: (esn-filter-subs) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'esn-filter-subs'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-esn-filter-subs.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-esn-filter-subs-service"

      - name: (esn-fired-event) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'esn-fired-event'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-esn-fired-event.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-esn-fired-event-service"

      - name: (esn-process-sub) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'esn-process-sub'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-esn-process-sub.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-esn-process-sub-service"

      - name: (resolve-extacct) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'resolve-extacct'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-resolve-extacct.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-resolve-extacct-service"

      - name: (send-email-ses) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'send-email-ses'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-send-email-ses.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-send-email-ses-service"

      - name: (spellcheck-gm) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'spellcheck-gm'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-spellcheck-gm.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-spellcheck-gm-service"

      - name: (sphinx-copier) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'sphinx-copier'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-sphinx-copier.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-sphinx-copier-service"

      - name: (sphinx-search-gm) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'sphinx-search-gm'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-sphinx-search-gm.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-sphinx-search-gm-service"

      - name: (synsuck) Deploy to Amazon ECS service
        if: github.event.inputs.service == 'ALL WORKERS (*)' || github.event.inputs.service == 'synsuck'
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-worker-container-synsuck.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: "worker-synsuck-service"

      - name: Notify Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          title: "${{ github.event.inputs.service }} DEPLOY STARTED"
          description: "Deploying `${{ github.event.inputs.tag }}` to `${{ github.event.inputs.service }}`\n\nClick the header above to watch the deployment progress."
          url: "https://${{ env.REGION }}.console.aws.amazon.com/ecs/v2/clusters/dreamwidth/services?region=${{ env.REGION }}"
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          nocontext: true
